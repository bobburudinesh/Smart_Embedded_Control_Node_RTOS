
Smart_Embedded_Control_Node_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d99c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  0800db30  0800db30  0000eb30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3fc  0800e3fc  000101e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e3fc  0800e3fc  0000f3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e404  0800e404  000101e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e404  0800e404  0000f404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e408  0800e408  0000f408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800e40c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101e0  2**0
                  CONTENTS
 10 .bss          00017364  200001e0  200001e0  000101e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20017544  20017544  000101e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f777  00000000  00000000  00010210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dc5  00000000  00000000  0002f987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  00034750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b9  00000000  00000000  00036258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c44  00000000  00000000  00037711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024858  00000000  00000000  00061355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5620  00000000  00000000  00085bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017b1cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007fa4  00000000  00000000  0017b210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b7  00000000  00000000  001831b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db14 	.word	0x0800db14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800db14 	.word	0x0800db14

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20013190 	.word	0x20013190
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	@ 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_dmul>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800069e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006a6:	bf1d      	ittte	ne
 80006a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ac:	ea94 0f0c 	teqne	r4, ip
 80006b0:	ea95 0f0c 	teqne	r5, ip
 80006b4:	f000 f8de 	bleq	8000874 <__aeabi_dmul+0x1dc>
 80006b8:	442c      	add	r4, r5
 80006ba:	ea81 0603 	eor.w	r6, r1, r3
 80006be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ca:	bf18      	it	ne
 80006cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006d8:	d038      	beq.n	800074c <__aeabi_dmul+0xb4>
 80006da:	fba0 ce02 	umull	ip, lr, r0, r2
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ee:	f04f 0600 	mov.w	r6, #0
 80006f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006f6:	f09c 0f00 	teq	ip, #0
 80006fa:	bf18      	it	ne
 80006fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000700:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000704:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000708:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800070c:	d204      	bcs.n	8000718 <__aeabi_dmul+0x80>
 800070e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000712:	416d      	adcs	r5, r5
 8000714:	eb46 0606 	adc.w	r6, r6, r6
 8000718:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800071c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000720:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000724:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000728:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800072c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000730:	bf88      	it	hi
 8000732:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000736:	d81e      	bhi.n	8000776 <__aeabi_dmul+0xde>
 8000738:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000750:	ea46 0101 	orr.w	r1, r6, r1
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000760:	bfc2      	ittt	gt
 8000762:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800076a:	bd70      	popgt	{r4, r5, r6, pc}
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000770:	f04f 0e00 	mov.w	lr, #0
 8000774:	3c01      	subs	r4, #1
 8000776:	f300 80ab 	bgt.w	80008d0 <__aeabi_dmul+0x238>
 800077a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800077e:	bfde      	ittt	le
 8000780:	2000      	movle	r0, #0
 8000782:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000786:	bd70      	pople	{r4, r5, r6, pc}
 8000788:	f1c4 0400 	rsb	r4, r4, #0
 800078c:	3c20      	subs	r4, #32
 800078e:	da35      	bge.n	80007fc <__aeabi_dmul+0x164>
 8000790:	340c      	adds	r4, #12
 8000792:	dc1b      	bgt.n	80007cc <__aeabi_dmul+0x134>
 8000794:	f104 0414 	add.w	r4, r4, #20
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f305 	lsl.w	r3, r0, r5
 80007a0:	fa20 f004 	lsr.w	r0, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b8:	fa21 f604 	lsr.w	r6, r1, r4
 80007bc:	eb42 0106 	adc.w	r1, r2, r6
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 040c 	rsb	r4, r4, #12
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f304 	lsl.w	r3, r0, r4
 80007d8:	fa20 f005 	lsr.w	r0, r0, r5
 80007dc:	fa01 f204 	lsl.w	r2, r1, r4
 80007e0:	ea40 0002 	orr.w	r0, r0, r2
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ec:	f141 0100 	adc.w	r1, r1, #0
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 0520 	rsb	r5, r4, #32
 8000800:	fa00 f205 	lsl.w	r2, r0, r5
 8000804:	ea4e 0e02 	orr.w	lr, lr, r2
 8000808:	fa20 f304 	lsr.w	r3, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea43 0302 	orr.w	r3, r3, r2
 8000814:	fa21 f004 	lsr.w	r0, r1, r4
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	fa21 f204 	lsr.w	r2, r1, r4
 8000820:	ea20 0002 	bic.w	r0, r0, r2
 8000824:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f094 0f00 	teq	r4, #0
 8000838:	d10f      	bne.n	800085a <__aeabi_dmul+0x1c2>
 800083a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800083e:	0040      	lsls	r0, r0, #1
 8000840:	eb41 0101 	adc.w	r1, r1, r1
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	bf08      	it	eq
 800084a:	3c01      	subeq	r4, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1a6>
 800084e:	ea41 0106 	orr.w	r1, r1, r6
 8000852:	f095 0f00 	teq	r5, #0
 8000856:	bf18      	it	ne
 8000858:	4770      	bxne	lr
 800085a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	eb43 0303 	adc.w	r3, r3, r3
 8000864:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3d01      	subeq	r5, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1c6>
 800086e:	ea43 0306 	orr.w	r3, r3, r6
 8000872:	4770      	bx	lr
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800087c:	bf18      	it	ne
 800087e:	ea95 0f0c 	teqne	r5, ip
 8000882:	d00c      	beq.n	800089e <__aeabi_dmul+0x206>
 8000884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088e:	d1d1      	bne.n	8000834 <__aeabi_dmul+0x19c>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a2:	bf06      	itte	eq
 80008a4:	4610      	moveq	r0, r2
 80008a6:	4619      	moveq	r1, r3
 80008a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ac:	d019      	beq.n	80008e2 <__aeabi_dmul+0x24a>
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	d102      	bne.n	80008ba <__aeabi_dmul+0x222>
 80008b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b8:	d113      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	d105      	bne.n	80008cc <__aeabi_dmul+0x234>
 80008c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008c4:	bf1c      	itt	ne
 80008c6:	4610      	movne	r0, r2
 80008c8:	4619      	movne	r1, r3
 80008ca:	d10a      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ea:	bd70      	pop	{r4, r5, r6, pc}

080008ec <__aeabi_ddiv>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fa:	bf1d      	ittte	ne
 80008fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000900:	ea94 0f0c 	teqne	r4, ip
 8000904:	ea95 0f0c 	teqne	r5, ip
 8000908:	f000 f8a7 	bleq	8000a5a <__aeabi_ddiv+0x16e>
 800090c:	eba4 0405 	sub.w	r4, r4, r5
 8000910:	ea81 0e03 	eor.w	lr, r1, r3
 8000914:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000918:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800091c:	f000 8088 	beq.w	8000a30 <__aeabi_ddiv+0x144>
 8000920:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000924:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000928:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800092c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000930:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000934:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000938:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800093c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000940:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000944:	429d      	cmp	r5, r3
 8000946:	bf08      	it	eq
 8000948:	4296      	cmpeq	r6, r2
 800094a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800094e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000952:	d202      	bcs.n	800095a <__aeabi_ddiv+0x6e>
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	1ab6      	subs	r6, r6, r2
 800095c:	eb65 0503 	sbc.w	r5, r5, r3
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800096a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009cc:	d018      	beq.n	8000a00 <__aeabi_ddiv+0x114>
 80009ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ea:	d1c0      	bne.n	800096e <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009f0:	d10b      	bne.n	8000a0a <__aeabi_ddiv+0x11e>
 80009f2:	ea41 0100 	orr.w	r1, r1, r0
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009fe:	e7b6      	b.n	800096e <__aeabi_ddiv+0x82>
 8000a00:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a04:	bf04      	itt	eq
 8000a06:	4301      	orreq	r1, r0
 8000a08:	2000      	moveq	r0, #0
 8000a0a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a0e:	bf88      	it	hi
 8000a10:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a14:	f63f aeaf 	bhi.w	8000776 <__aeabi_dmul+0xde>
 8000a18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a1c:	bf04      	itt	eq
 8000a1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a26:	f150 0000 	adcs.w	r0, r0, #0
 8000a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a3c:	bfc2      	ittt	gt
 8000a3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	popgt	{r4, r5, r6, pc}
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4c:	f04f 0e00 	mov.w	lr, #0
 8000a50:	3c01      	subs	r4, #1
 8000a52:	e690      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a54:	ea45 0e06 	orr.w	lr, r5, r6
 8000a58:	e68d      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5e:	ea94 0f0c 	teq	r4, ip
 8000a62:	bf08      	it	eq
 8000a64:	ea95 0f0c 	teqeq	r5, ip
 8000a68:	f43f af3b 	beq.w	80008e2 <__aeabi_dmul+0x24a>
 8000a6c:	ea94 0f0c 	teq	r4, ip
 8000a70:	d10a      	bne.n	8000a88 <__aeabi_ddiv+0x19c>
 8000a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a76:	f47f af34 	bne.w	80008e2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	f47f af25 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e72c      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a88:	ea95 0f0c 	teq	r5, ip
 8000a8c:	d106      	bne.n	8000a9c <__aeabi_ddiv+0x1b0>
 8000a8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a92:	f43f aefd 	beq.w	8000890 <__aeabi_dmul+0x1f8>
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	e722      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa6:	f47f aec5 	bne.w	8000834 <__aeabi_dmul+0x19c>
 8000aaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aae:	f47f af0d 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000ab2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ab6:	f47f aeeb 	bne.w	8000890 <__aeabi_dmul+0x1f8>
 8000aba:	e712      	b.n	80008e2 <__aeabi_dmul+0x24a>

08000abc <__gedf2>:
 8000abc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ac0:	e006      	b.n	8000ad0 <__cmpdf2+0x4>
 8000ac2:	bf00      	nop

08000ac4 <__ledf2>:
 8000ac4:	f04f 0c01 	mov.w	ip, #1
 8000ac8:	e002      	b.n	8000ad0 <__cmpdf2+0x4>
 8000aca:	bf00      	nop

08000acc <__cmpdf2>:
 8000acc:	f04f 0c01 	mov.w	ip, #1
 8000ad0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ae6:	d01b      	beq.n	8000b20 <__cmpdf2+0x54>
 8000ae8:	b001      	add	sp, #4
 8000aea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aee:	bf0c      	ite	eq
 8000af0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000af4:	ea91 0f03 	teqne	r1, r3
 8000af8:	bf02      	ittt	eq
 8000afa:	ea90 0f02 	teqeq	r0, r2
 8000afe:	2000      	moveq	r0, #0
 8000b00:	4770      	bxeq	lr
 8000b02:	f110 0f00 	cmn.w	r0, #0
 8000b06:	ea91 0f03 	teq	r1, r3
 8000b0a:	bf58      	it	pl
 8000b0c:	4299      	cmppl	r1, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4290      	cmpeq	r0, r2
 8000b12:	bf2c      	ite	cs
 8000b14:	17d8      	asrcs	r0, r3, #31
 8000b16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b1a:	f040 0001 	orr.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__cmpdf2+0x64>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d107      	bne.n	8000b40 <__cmpdf2+0x74>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d1d6      	bne.n	8000ae8 <__cmpdf2+0x1c>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d0d3      	beq.n	8000ae8 <__cmpdf2+0x1c>
 8000b40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdrcmple>:
 8000b48:	4684      	mov	ip, r0
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	468c      	mov	ip, r1
 8000b50:	4619      	mov	r1, r3
 8000b52:	4663      	mov	r3, ip
 8000b54:	e000      	b.n	8000b58 <__aeabi_cdcmpeq>
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdcmpeq>:
 8000b58:	b501      	push	{r0, lr}
 8000b5a:	f7ff ffb7 	bl	8000acc <__cmpdf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	bf48      	it	mi
 8000b62:	f110 0f00 	cmnmi.w	r0, #0
 8000b66:	bd01      	pop	{r0, pc}

08000b68 <__aeabi_dcmpeq>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff fff4 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b70:	bf0c      	ite	eq
 8000b72:	2001      	moveq	r0, #1
 8000b74:	2000      	movne	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmplt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffea 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmple>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffe0 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpge>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffce 	bl	8000b48 <__aeabi_cdrcmple>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_dcmpgt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffc4 	bl	8000b48 <__aeabi_cdrcmple>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmpun>:
 8000bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x10>
 8000bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bda:	d10a      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x20>
 8000be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0001 	mov.w	r0, #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2iz>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d215      	bcs.n	8000c2e <__aeabi_d2iz+0x36>
 8000c02:	d511      	bpl.n	8000c28 <__aeabi_d2iz+0x30>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d912      	bls.n	8000c34 <__aeabi_d2iz+0x3c>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d105      	bne.n	8000c40 <__aeabi_d2iz+0x48>
 8000c34:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <app_resources_init>:

EventGroupHandle_t	xSensor_Button_Event_Group;



void app_resources_init(void) {
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af02      	add	r7, sp, #8
	BaseType_t xTimerStartResult;
	xbutton_Sema = xSemaphoreCreateBinary();
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f003 ff32 	bl	8004de8 <xQueueGenericCreate>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a37      	ldr	r2, [pc, #220]	@ (8001064 <app_resources_init+0xf0>)
 8000f88:	6013      	str	r3, [r2, #0]
	if(!xbutton_Sema) {
 8000f8a:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <app_resources_init+0xf0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d104      	bne.n	8000f9c <app_resources_init+0x28>
		print_error_uart();
 8000f92:	4a35      	ldr	r2, [pc, #212]	@ (8001068 <app_resources_init+0xf4>)
 8000f94:	2125      	movs	r1, #37	@ 0x25
 8000f96:	4835      	ldr	r0, [pc, #212]	@ (800106c <app_resources_init+0xf8>)
 8000f98:	f009 ff18 	bl	800adcc <Error_Handler_System>
	}
	xSensor_Queue = xQueueCreate(SENSOR_QUEUE_LENGTH, sizeof(uint8_t));
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f003 ff21 	bl	8004de8 <xQueueGenericCreate>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a31      	ldr	r2, [pc, #196]	@ (8001070 <app_resources_init+0xfc>)
 8000faa:	6013      	str	r3, [r2, #0]
	if(!xSensor_Queue) {
 8000fac:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <app_resources_init+0xfc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d104      	bne.n	8000fbe <app_resources_init+0x4a>
		print_error_uart();
 8000fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8001068 <app_resources_init+0xf4>)
 8000fb6:	2129      	movs	r1, #41	@ 0x29
 8000fb8:	482c      	ldr	r0, [pc, #176]	@ (800106c <app_resources_init+0xf8>)
 8000fba:	f009 ff07 	bl	800adcc <Error_Handler_System>
	}
	heartbeat_timer = xTimerCreate("Heartbeat_Timer", pdMS_TO_TICKS(100), pdTRUE, (void*)0, vHeartbeat_Timer_Callback);
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <app_resources_init+0x100>)
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2164      	movs	r1, #100	@ 0x64
 8000fc8:	482b      	ldr	r0, [pc, #172]	@ (8001078 <app_resources_init+0x104>)
 8000fca:	f006 facd 	bl	8007568 <xTimerCreate>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800107c <app_resources_init+0x108>)
 8000fd2:	6013      	str	r3, [r2, #0]

	xTimerStartResult = xTimerStart(heartbeat_timer, 10);
 8000fd4:	4b29      	ldr	r3, [pc, #164]	@ (800107c <app_resources_init+0x108>)
 8000fd6:	681c      	ldr	r4, [r3, #0]
 8000fd8:	f005 f856 	bl	8006088 <xTaskGetTickCount>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	230a      	movs	r3, #10
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f006 fb22 	bl	8007630 <xTimerGenericCommandFromTask>
 8000fec:	6078      	str	r0, [r7, #4]
	configASSERT_RTOS(xTimerStartResult == pdPASS, "Failed to start Heartbeat Timer\n");
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d004      	beq.n	8000ffe <app_resources_init+0x8a>
 8000ff4:	4a22      	ldr	r2, [pc, #136]	@ (8001080 <app_resources_init+0x10c>)
 8000ff6:	212e      	movs	r1, #46	@ 0x2e
 8000ff8:	481c      	ldr	r0, [pc, #112]	@ (800106c <app_resources_init+0xf8>)
 8000ffa:	f009 fecb 	bl	800ad94 <Error_Handler_RTOS>
	sensor_timer = xTimerCreate("Sensor_Timer", pdMS_TO_TICKS(2000), pdTRUE, (void *)1, vSensor_Timer_Callback);
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <app_resources_init+0x110>)
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800100a:	481f      	ldr	r0, [pc, #124]	@ (8001088 <app_resources_init+0x114>)
 800100c:	f006 faac 	bl	8007568 <xTimerCreate>
 8001010:	4603      	mov	r3, r0
 8001012:	4a1e      	ldr	r2, [pc, #120]	@ (800108c <app_resources_init+0x118>)
 8001014:	6013      	str	r3, [r2, #0]
	xTimerStartResult = xTimerStart(sensor_timer, 10);
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <app_resources_init+0x118>)
 8001018:	681c      	ldr	r4, [r3, #0]
 800101a:	f005 f835 	bl	8006088 <xTaskGetTickCount>
 800101e:	4602      	mov	r2, r0
 8001020:	230a      	movs	r3, #10
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2300      	movs	r3, #0
 8001026:	2101      	movs	r1, #1
 8001028:	4620      	mov	r0, r4
 800102a:	f006 fb01 	bl	8007630 <xTimerGenericCommandFromTask>
 800102e:	6078      	str	r0, [r7, #4]
	configASSERT_RTOS(xTimerStartResult == pdPASS, "Failed to start Sensor Timer\n");
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d004      	beq.n	8001040 <app_resources_init+0xcc>
 8001036:	4a16      	ldr	r2, [pc, #88]	@ (8001090 <app_resources_init+0x11c>)
 8001038:	2131      	movs	r1, #49	@ 0x31
 800103a:	480c      	ldr	r0, [pc, #48]	@ (800106c <app_resources_init+0xf8>)
 800103c:	f009 feaa 	bl	800ad94 <Error_Handler_RTOS>
	xSensor_Button_Event_Group = xEventGroupCreate();
 8001040:	f003 fbf4 	bl	800482c <xEventGroupCreate>
 8001044:	4603      	mov	r3, r0
 8001046:	4a13      	ldr	r2, [pc, #76]	@ (8001094 <app_resources_init+0x120>)
 8001048:	6013      	str	r3, [r2, #0]
	if(!xSensor_Button_Event_Group) {
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <app_resources_init+0x120>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <app_resources_init+0xe8>
		print_error_uart();
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <app_resources_init+0xf4>)
 8001054:	2134      	movs	r1, #52	@ 0x34
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <app_resources_init+0xf8>)
 8001058:	f009 feb8 	bl	800adcc <Error_Handler_System>
	}


}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	200001fc 	.word	0x200001fc
 8001068:	0800df88 	.word	0x0800df88
 800106c:	0800db30 	.word	0x0800db30
 8001070:	20000200 	.word	0x20000200
 8001074:	080010e9 	.word	0x080010e9
 8001078:	0800db4c 	.word	0x0800db4c
 800107c:	20000208 	.word	0x20000208
 8001080:	0800db5c 	.word	0x0800db5c
 8001084:	08001099 	.word	0x08001099
 8001088:	0800db80 	.word	0x0800db80
 800108c:	20000204 	.word	0x20000204
 8001090:	0800db90 	.word	0x0800db90
 8001094:	2000020c 	.word	0x2000020c

08001098 <vSensor_Timer_Callback>:

void vSensor_Timer_Callback( TimerHandle_t xTimer ) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
	TaskHandle_t sensor_task=  get_sensor_task_handle();
 80010a0:	f009 fe02 	bl	800aca8 <get_sensor_task_handle>
 80010a4:	60f8      	str	r0, [r7, #12]
	if(!sensor_task) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d104      	bne.n	80010b6 <vSensor_Timer_Callback+0x1e>
		print_error_uart();
 80010ac:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <vSensor_Timer_Callback+0x44>)
 80010ae:	213d      	movs	r1, #61	@ 0x3d
 80010b0:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <vSensor_Timer_Callback+0x48>)
 80010b2:	f009 fe8b 	bl	800adcc <Error_Handler_System>
	}
	xTaskNotifyGive(sensor_task);
 80010b6:	2300      	movs	r3, #0
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2302      	movs	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f006 f855 	bl	8007170 <xTaskGenericNotify>
	xEventGroupSetBits(xSensor_Button_Event_Group, BIT_0);
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <vSensor_Timer_Callback+0x4c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2101      	movs	r1, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 fca5 	bl	8004a1c <xEventGroupSetBits>

}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	0800df9c 	.word	0x0800df9c
 80010e0:	0800db30 	.word	0x0800db30
 80010e4:	2000020c 	.word	0x2000020c

080010e8 <vHeartbeat_Timer_Callback>:

void vHeartbeat_Timer_Callback( TimerHandle_t xTimer ) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <TIM6_DAC_IRQHandler>:

extern TIM_HandleTypeDef htim6;
extern void button_irq_handler(void);

void TIM6_DAC_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <TIM6_DAC_IRQHandler+0x10>)
 8001102:	f002 f9b3 	bl	800346c <HAL_TIM_IRQHandler>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000240 	.word	0x20000240

08001110 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart3);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <USART3_IRQHandler+0x10>)
 8001116:	f002 fc4d 	bl	80039b4 <HAL_UART_IRQHandler>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200173b0 	.word	0x200173b0

08001124 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	button_irq_handler();
 8001128:	f000 f906 	bl	8001338 <button_irq_handler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800112c:	2001      	movs	r0, #1
 800112e:	f001 f803 	bl	8002138 <HAL_GPIO_EXTI_IRQHandler>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&hlptim);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <TIM2_IRQHandler+0x10>)
 800113e:	f002 f995 	bl	800346c <HAL_TIM_IRQHandler>
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000028c 	.word	0x2000028c

0800114c <TIM7_IRQHandler>:

void TIM7_IRQHandler(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim7);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <TIM7_IRQHandler+0x10>)
 8001152:	f002 f98b 	bl	800346c <HAL_TIM_IRQHandler>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200002d4 	.word	0x200002d4

08001160 <main>:
double timer2_cnt_res=0;
double user_signal_time_period =0;
double user_signal_freq=0;


int main(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

	HAL_Init();
 8001164:	f000 fc62 	bl	8001a2c <HAL_Init>
	SystemClock_Config();
 8001168:	f000 f822 	bl	80011b0 <SystemClock_Config>
	debug_uart_init();
 800116c:	f009 fdc2 	bl	800acf4 <debug_uart_init>
	DWT_CTRL |= (1<<0);
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <main+0x48>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <main+0x48>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]
	SEGGER_UART_init(1050000);
 800117c:	480b      	ldr	r0, [pc, #44]	@ (80011ac <main+0x4c>)
 800117e:	f007 fc9f 	bl	8008ac0 <SEGGER_UART_init>
	SEGGER_SYSVIEW_Conf();
 8001182:	f007 fac7 	bl	8008714 <SEGGER_SYSVIEW_Conf>
	app_resources_init();
 8001186:	f7ff fef5 	bl	8000f74 <app_resources_init>
	led_task_init();
 800118a:	f009 fc4d 	bl	800aa28 <led_task_init>
	button_task_init();
 800118e:	f009 fbd9 	bl	800a944 <button_task_init>
	sensor_task_init();
 8001192:	f009 fd35 	bl	800ac00 <sensor_task_init>
	//timer_init_Basic();
	//timer_OC_Init();
	//timer_init_LPM();
	rtc_init();
 8001196:	f000 fbc9 	bl	800192c <rtc_init>
	rtc_date_time_config();
 800119a:	f000 fbe7 	bl	800196c <rtc_date_time_config>
	//HAL_TIM_Base_Start_IT(&htim7);
	//HAL_TIM_OC_Start_IT(&hlptim, TIM_CHANNEL_2);
	vTaskStartScheduler();
 800119e:	f004 fdf9 	bl	8005d94 <vTaskStartScheduler>
 80011a2:	2300      	movs	r3, #0



}
 80011a4:	4618      	mov	r0, r3
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	e0001000 	.word	0xe0001000
 80011ac:	00100590 	.word	0x00100590

080011b0 <SystemClock_Config>:
//  {
//	  print_error_uart();
//  }
//}
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	@ 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2230      	movs	r2, #48	@ 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f00a fba6 	bl	800b910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <SystemClock_Config+0xd8>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001288 <SystemClock_Config+0xd8>)
 80011de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <SystemClock_Config+0xd8>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	4b25      	ldr	r3, [pc, #148]	@ (800128c <SystemClock_Config+0xdc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a24      	ldr	r2, [pc, #144]	@ (800128c <SystemClock_Config+0xdc>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b22      	ldr	r3, [pc, #136]	@ (800128c <SystemClock_Config+0xdc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001214:	2310      	movs	r3, #16
 8001216:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001224:	23a8      	movs	r3, #168	@ 0xa8
 8001226:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800122c:	2307      	movs	r3, #7
 800122e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f000 ffa3 	bl	8002180 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <SystemClock_Config+0x9a>
  {
	  print_error_uart();
 8001240:	4a13      	ldr	r2, [pc, #76]	@ (8001290 <SystemClock_Config+0xe0>)
 8001242:	2179      	movs	r1, #121	@ 0x79
 8001244:	4813      	ldr	r0, [pc, #76]	@ (8001294 <SystemClock_Config+0xe4>)
 8001246:	f009 fdc1 	bl	800adcc <Error_Handler_System>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2302      	movs	r3, #2
 8001250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001256:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800125a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800125c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001260:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2105      	movs	r1, #5
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fa01 	bl	8002670 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <SystemClock_Config+0xce>
  {
	  print_error_uart();
 8001274:	4a06      	ldr	r2, [pc, #24]	@ (8001290 <SystemClock_Config+0xe0>)
 8001276:	2187      	movs	r1, #135	@ 0x87
 8001278:	4806      	ldr	r0, [pc, #24]	@ (8001294 <SystemClock_Config+0xe4>)
 800127a:	f009 fda7 	bl	800adcc <Error_Handler_System>
  }
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	@ 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000
 8001290:	0800dfb4 	.word	0x0800dfb4
 8001294:	0800dbb0 	.word	0x0800dbb0

08001298 <HAL_TIM_PeriodElapsedCallback>:

// This function increments global tick for every 1ms based on Timer 6 for HAL peripherals.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM6)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80012aa:	f000 fbe1 	bl	8001a70 <HAL_IncTick>
  }
  if(htim->Instance == TIM7) {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d104      	bne.n	80012c2 <HAL_TIM_PeriodElapsedCallback+0x2a>
  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80012b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012be:	f000 ff20 	bl	8002102 <HAL_GPIO_TogglePin>
  }


}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40001000 	.word	0x40001000
 80012d0:	40001400 	.word	0x40001400
 80012d4:	40020c00 	.word	0x40020c00

080012d8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	  if(htim->Instance == TIM2) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012e8:	d11b      	bne.n	8001322 <HAL_TIM_IC_CaptureCallback+0x4a>

			  if(!captureValues[0]) {
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <HAL_TIM_IC_CaptureCallback+0x54>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_TIM_IC_CaptureCallback+0x26>
				  captureValues[0] = __HAL_TIM_GET_COMPARE(&hlptim, TIM_CHANNEL_2);
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <HAL_TIM_IC_CaptureCallback+0x58>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012f8:	4a0c      	ldr	r2, [pc, #48]	@ (800132c <HAL_TIM_IC_CaptureCallback+0x54>)
 80012fa:	6013      	str	r3, [r2, #0]
				  captureValues[1] = __HAL_TIM_GET_COMPARE(&hlptim, TIM_CHANNEL_2);
				  capturedComplete = 1;
				  get_frequency_from_IC();
			  }
	  }
}
 80012fc:	e011      	b.n	8001322 <HAL_TIM_IC_CaptureCallback+0x4a>
			  } else if(!captureValues[1] && (captureValues[0] != 0)) {
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <HAL_TIM_IC_CaptureCallback+0x4a>
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <HAL_TIM_IC_CaptureCallback+0x4a>
				  captureValues[1] = __HAL_TIM_GET_COMPARE(&hlptim, TIM_CHANNEL_2);
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001314:	4a05      	ldr	r2, [pc, #20]	@ (800132c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001316:	6053      	str	r3, [r2, #4]
				  capturedComplete = 1;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
				  get_frequency_from_IC();
 800131e:	f000 f835 	bl	800138c <get_frequency_from_IC>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000210 	.word	0x20000210
 8001330:	2000028c 	.word	0x2000028c
 8001334:	20000218 	.word	0x20000218

08001338 <button_irq_handler>:


void button_irq_handler(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	BaseType_t	higher_priority_task_woken = pdFALSE;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
	print_debug_msg("Button_Pressed \n");
 8001342:	480f      	ldr	r0, [pc, #60]	@ (8001380 <button_irq_handler+0x48>)
 8001344:	f009 fd00 	bl	800ad48 <print_debug_msg>
	xSemaphoreGiveFromISR(xbutton_Sema, &higher_priority_task_woken);
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <button_irq_handler+0x4c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	1d3a      	adds	r2, r7, #4
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fed3 	bl	80050fc <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <button_irq_handler+0x3a>
 800135c:	f008 ff3e 	bl	800a1dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <button_irq_handler+0x50>)
 8001362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f3bf 8f4f 	dsb	sy
 800136c:	f3bf 8f6f 	isb	sy

}
 8001370:	e001      	b.n	8001376 <button_irq_handler+0x3e>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001372:	f008 ff17 	bl	800a1a4 <SEGGER_SYSVIEW_RecordExitISR>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	0800dbc8 	.word	0x0800dbc8
 8001384:	200001fc 	.word	0x200001fc
 8001388:	e000ed04 	.word	0xe000ed04

0800138c <get_frequency_from_IC>:

void get_frequency_from_IC(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	if(captureValues[0] <= captureValues[1]) {
 8001390:	4b2f      	ldr	r3, [pc, #188]	@ (8001450 <get_frequency_from_IC+0xc4>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <get_frequency_from_IC+0xc4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d807      	bhi.n	80013ac <get_frequency_from_IC+0x20>
		capture_difference = captureValues[1] - captureValues[0];
 800139c:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <get_frequency_from_IC+0xc4>)
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <get_frequency_from_IC+0xc4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001454 <get_frequency_from_IC+0xc8>)
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e007      	b.n	80013bc <get_frequency_from_IC+0x30>
	} else {
		capture_difference = (0xFFFFFFFF - captureValues[0]) + captureValues[1];
 80013ac:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <get_frequency_from_IC+0xc4>)
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <get_frequency_from_IC+0xc4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	3b01      	subs	r3, #1
 80013b8:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <get_frequency_from_IC+0xc8>)
 80013ba:	6013      	str	r3, [r2, #0]
	}

	timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2 )/(hlptim.Init.Prescaler + 1);
 80013bc:	f001 fb50 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 80013c0:	4603      	mov	r3, r0
 80013c2:	005a      	lsls	r2, r3, #1
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <get_frequency_from_IC+0xcc>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	3301      	adds	r3, #1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8e8 	bl	80005a4 <__aeabi_ui2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4920      	ldr	r1, [pc, #128]	@ (800145c <get_frequency_from_IC+0xd0>)
 80013da:	e9c1 2300 	strd	r2, r3, [r1]
	timer2_cnt_res = 1/timer2_cnt_freq;
 80013de:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <get_frequency_from_IC+0xd0>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f04f 0000 	mov.w	r0, #0
 80013e8:	491d      	ldr	r1, [pc, #116]	@ (8001460 <get_frequency_from_IC+0xd4>)
 80013ea:	f7ff fa7f 	bl	80008ec <__aeabi_ddiv>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	491c      	ldr	r1, [pc, #112]	@ (8001464 <get_frequency_from_IC+0xd8>)
 80013f4:	e9c1 2300 	strd	r2, r3, [r1]
	user_signal_time_period = capture_difference * timer2_cnt_res;
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <get_frequency_from_IC+0xc8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f8d1 	bl	80005a4 <__aeabi_ui2d>
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <get_frequency_from_IC+0xd8>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f946 	bl	8000698 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4915      	ldr	r1, [pc, #84]	@ (8001468 <get_frequency_from_IC+0xdc>)
 8001412:	e9c1 2300 	strd	r2, r3, [r1]
	user_signal_freq = 1/user_signal_time_period;
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <get_frequency_from_IC+0xdc>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f04f 0000 	mov.w	r0, #0
 8001420:	490f      	ldr	r1, [pc, #60]	@ (8001460 <get_frequency_from_IC+0xd4>)
 8001422:	f7ff fa63 	bl	80008ec <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4910      	ldr	r1, [pc, #64]	@ (800146c <get_frequency_from_IC+0xe0>)
 800142c:	e9c1 2300 	strd	r2, r3, [r1]
	print_debug_msg("Frequency of the signal applied = %.2f Hz\r\n",user_signal_freq);
 8001430:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <get_frequency_from_IC+0xe0>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	480e      	ldr	r0, [pc, #56]	@ (8001470 <get_frequency_from_IC+0xe4>)
 8001438:	f009 fc86 	bl	800ad48 <print_debug_msg>
	//sprintf(usr_msg,"Frequency of the signal applied = %.2f Hz\r\n",user_signal_freq );

	memset(captureValues, 0, sizeof(captureValues));
 800143c:	2208      	movs	r2, #8
 800143e:	2100      	movs	r1, #0
 8001440:	4803      	ldr	r0, [pc, #12]	@ (8001450 <get_frequency_from_IC+0xc4>)
 8001442:	f00a fa65 	bl	800b910 <memset>
	capturedComplete = 0;
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <get_frequency_from_IC+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000210 	.word	0x20000210
 8001454:	2000021c 	.word	0x2000021c
 8001458:	2000028c 	.word	0x2000028c
 800145c:	20000220 	.word	0x20000220
 8001460:	3ff00000 	.word	0x3ff00000
 8001464:	20000228 	.word	0x20000228
 8001468:	20000230 	.word	0x20000230
 800146c:	20000238 	.word	0x20000238
 8001470:	0800dbdc 	.word	0x0800dbdc
 8001474:	20000218 	.word	0x20000218

08001478 <HAL_MspInit>:

#include "main_SECN.h"



void HAL_MspInit(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
	vInitPrioGroupValue();
 80014b6:	f006 fcf5 	bl	8007ea4 <vInitPrioGroupValue>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b092      	sub	sp, #72	@ 0x48
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
// Low Level Initialization for UART Peripheral
	if(huart->Instance == USART3) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a46      	ldr	r2, [pc, #280]	@ (80015f0 <HAL_UART_MspInit+0x128>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d14c      	bne.n	8001574 <HAL_UART_MspInit+0xac>
		__HAL_RCC_USART3_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80014de:	4b45      	ldr	r3, [pc, #276]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a44      	ldr	r2, [pc, #272]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b42      	ldr	r3, [pc, #264]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80014f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014fa:	4b3e      	ldr	r3, [pc, #248]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a3d      	ldr	r2, [pc, #244]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b3b      	ldr	r3, [pc, #236]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001516:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a36      	ldr	r2, [pc, #216]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800152c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
		GPIO_InitTypeDef	gpiox;
		gpiox.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	63bb      	str	r3, [r7, #56]	@ 0x38
		gpiox.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	63fb      	str	r3, [r7, #60]	@ 0x3c
		gpiox.Speed = GPIO_SPEED_FREQ_HIGH;
 8001536:	2302      	movs	r3, #2
 8001538:	643b      	str	r3, [r7, #64]	@ 0x40
		gpiox.Alternate = GPIO_AF7_USART3;
 800153a:	2307      	movs	r3, #7
 800153c:	647b      	str	r3, [r7, #68]	@ 0x44
		gpiox.Pin = GPIO_PIN_11;
 800153e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001542:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &gpiox);
 8001544:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001548:	4619      	mov	r1, r3
 800154a:	482b      	ldr	r0, [pc, #172]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 800154c:	f000 fc24 	bl	8001d98 <HAL_GPIO_Init>

		gpiox.Pin = GPIO_PIN_8;
 8001550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001554:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOD, &gpiox);
 8001556:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800155a:	4619      	mov	r1, r3
 800155c:	4827      	ldr	r0, [pc, #156]	@ (80015fc <HAL_UART_MspInit+0x134>)
 800155e:	f000 fc1b 	bl	8001d98 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	210f      	movs	r1, #15
 8001566:	2027      	movs	r0, #39	@ 0x27
 8001568:	f000 fb5a 	bl	8001c20 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 800156c:	2027      	movs	r0, #39	@ 0x27
 800156e:	f000 fb73 	bl	8001c58 <HAL_NVIC_EnableIRQ>
		gpiox.Pin = GPIO_PIN_2 | GPIO_PIN_3;
		HAL_GPIO_Init(GPIOA, &gpiox);
		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
		HAL_NVIC_EnableIRQ(USART2_IRQn);
	}
}
 8001572:	e038      	b.n	80015e6 <HAL_UART_MspInit+0x11e>
	} else if (huart->Instance == USART2) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <HAL_UART_MspInit+0x138>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d133      	bne.n	80015e6 <HAL_UART_MspInit+0x11e>
		__HAL_RCC_USART2_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a1b      	ldr	r2, [pc, #108]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 8001588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
		gpiox.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
		gpiox.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
		gpiox.Speed = GPIO_SPEED_FREQ_HIGH;
 80015be:	2302      	movs	r3, #2
 80015c0:	623b      	str	r3, [r7, #32]
		gpiox.Alternate = GPIO_AF7_USART3;
 80015c2:	2307      	movs	r3, #7
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
		gpiox.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80015c6:	230c      	movs	r3, #12
 80015c8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &gpiox);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	@ (8001604 <HAL_UART_MspInit+0x13c>)
 80015d2:	f000 fbe1 	bl	8001d98 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	210f      	movs	r1, #15
 80015da:	2026      	movs	r0, #38	@ 0x26
 80015dc:	f000 fb20 	bl	8001c20 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015e0:	2026      	movs	r0, #38	@ 0x26
 80015e2:	f000 fb39 	bl	8001c58 <HAL_NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3748      	adds	r7, #72	@ 0x48
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40004800 	.word	0x40004800
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020400 	.word	0x40020400
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40004400 	.word	0x40004400
 8001604:	40020000 	.word	0x40020000

08001608 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM7) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <HAL_TIM_Base_MspInit+0x48>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d115      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x3e>
			__HAL_RCC_TIM7_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <HAL_TIM_Base_MspInit+0x4c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a0c      	ldr	r2, [pc, #48]	@ (8001654 <HAL_TIM_Base_MspInit+0x4c>)
 8001624:	f043 0320 	orr.w	r3, r3, #32
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_TIM_Base_MspInit+0x4c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
			HAL_NVIC_SetPriority(TIM7_IRQn, 15, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	210f      	movs	r1, #15
 800163a:	2037      	movs	r0, #55	@ 0x37
 800163c:	f000 faf0 	bl	8001c20 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001640:	2037      	movs	r0, #55	@ 0x37
 8001642:	f000 fb09 	bl	8001c58 <HAL_NVIC_EnableIRQ>
		}
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40001400 	.word	0x40001400
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_RTC_MspInit>:
		HAL_NVIC_SetPriority(TIM2_IRQn, 14, 0);
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
	}
}

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b092      	sub	sp, #72	@ 0x48
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	RCC_OscInitTypeDef	oscInit;
	RCC_PeriphCLKInitTypeDef	rcc_rtc_peri_clk_init;
	oscInit.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 8001660:	2308      	movs	r3, #8
 8001662:	61bb      	str	r3, [r7, #24]
	oscInit.LSIState = RCC_LSI_ON;
 8001664:	2301      	movs	r3, #1
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
	oscInit.PLL.PLLState = RCC_PLL_NONE;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	@ 0x30
	if(HAL_RCC_OscConfig(&oscInit) != HAL_OK){
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fd85 	bl	8002180 <HAL_RCC_OscConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <HAL_RTC_MspInit+0x2a>
		print_debug_msg("Error Initializing RTC Oscillator \n");
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <HAL_RTC_MspInit+0x58>)
 800167e:	f009 fb63 	bl	800ad48 <print_debug_msg>
	}
	rcc_rtc_peri_clk_init.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001682:	2302      	movs	r3, #2
 8001684:	60bb      	str	r3, [r7, #8]
	rcc_rtc_peri_clk_init.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800168a:	617b      	str	r3, [r7, #20]
	if(HAL_RCCEx_PeriphCLKConfig(&rcc_rtc_peri_clk_init) != HAL_OK){
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	4618      	mov	r0, r3
 8001692:	f001 fa3f 	bl	8002b14 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_RTC_MspInit+0x4a>
		print_debug_msg("Error Initializing RTC Clock \n");
 800169c:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <HAL_RTC_MspInit+0x5c>)
 800169e:	f009 fb53 	bl	800ad48 <print_debug_msg>
	}

	__HAL_RCC_RTC_ENABLE();
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <HAL_RTC_MspInit+0x60>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	3748      	adds	r7, #72	@ 0x48
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	0800dc08 	.word	0x0800dc08
 80016b4:	0800dc2c 	.word	0x0800dc2c
 80016b8:	42470e3c 	.word	0x42470e3c

080016bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	@ 0x38
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <HAL_InitTick+0xe4>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	4a32      	ldr	r2, [pc, #200]	@ (80017a0 <HAL_InitTick+0xe4>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	6413      	str	r3, [r2, #64]	@ 0x40
 80016dc:	4b30      	ldr	r3, [pc, #192]	@ (80017a0 <HAL_InitTick+0xe4>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e8:	f107 0210 	add.w	r2, r7, #16
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 f9dc 	bl	8002ab0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001702:	f001 f9ad 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 8001706:	6378      	str	r0, [r7, #52]	@ 0x34
 8001708:	e004      	b.n	8001714 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800170a:	f001 f9a9 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 800170e:	4603      	mov	r3, r0
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001716:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <HAL_InitTick+0xe8>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	0c9b      	lsrs	r3, r3, #18
 800171e:	3b01      	subs	r3, #1
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <HAL_InitTick+0xec>)
 8001724:	4a21      	ldr	r2, [pc, #132]	@ (80017ac <HAL_InitTick+0xf0>)
 8001726:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <HAL_InitTick+0xec>)
 800172a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800172e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001730:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <HAL_InitTick+0xec>)
 8001732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001734:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <HAL_InitTick+0xec>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_InitTick+0xec>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_InitTick+0xec>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001748:	4817      	ldr	r0, [pc, #92]	@ (80017a8 <HAL_InitTick+0xec>)
 800174a:	f001 fdcf 	bl	80032ec <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001754:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001758:	2b00      	cmp	r3, #0
 800175a:	d11b      	bne.n	8001794 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800175c:	4812      	ldr	r0, [pc, #72]	@ (80017a8 <HAL_InitTick+0xec>)
 800175e:	f001 fe15 	bl	800338c <HAL_TIM_Base_Start_IT>
 8001762:	4603      	mov	r3, r0
 8001764:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001768:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800176c:	2b00      	cmp	r3, #0
 800176e:	d111      	bne.n	8001794 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001770:	2036      	movs	r0, #54	@ 0x36
 8001772:	f000 fa71 	bl	8001c58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d808      	bhi.n	800178e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	2036      	movs	r0, #54	@ 0x36
 8001782:	f000 fa4d 	bl	8001c20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <HAL_InitTick+0xf4>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e002      	b.n	8001794 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001794:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001798:	4618      	mov	r0, r3
 800179a:	3738      	adds	r7, #56	@ 0x38
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	431bde83 	.word	0x431bde83
 80017a8:	20000240 	.word	0x20000240
 80017ac:	40001000 	.word	0x40001000
 80017b0:	20000004 	.word	0x20000004

080017b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return 1;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_kill>:

int _kill(int pid, int sig)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ce:	f00a f8a7 	bl	800b920 <__errno>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2216      	movs	r2, #22
 80017d6:	601a      	str	r2, [r3, #0]
  return -1;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_exit>:

void _exit (int status)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ffe7 	bl	80017c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f6:	bf00      	nop
 80017f8:	e7fd      	b.n	80017f6 <_exit+0x12>

080017fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e00a      	b.n	8001822 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180c:	f3af 8000 	nop.w
 8001810:	4601      	mov	r1, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	60ba      	str	r2, [r7, #8]
 8001818:	b2ca      	uxtb	r2, r1
 800181a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	dbf0      	blt.n	800180c <_read+0x12>
  }

  return len;
 800182a:	687b      	ldr	r3, [r7, #4]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800185c:	605a      	str	r2, [r3, #4]
  return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_isatty>:

int _isatty(int file)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f00a f828 	bl	800b920 <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20020000 	.word	0x20020000
 80018fc:	00000400 	.word	0x00000400
 8001900:	20000288 	.word	0x20000288
 8001904:	20017548 	.word	0x20017548

08001908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <SystemInit+0x20>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001912:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <SystemInit+0x20>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <rtc_init>:
		print_debug_msg("Error Initializing TIM 2 PWM\n");
	}

}

void rtc_init(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0

	hrtc.Instance = RTC;
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <rtc_init+0x34>)
 8001932:	4a0c      	ldr	r2, [pc, #48]	@ (8001964 <rtc_init+0x38>)
 8001934:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <rtc_init+0x34>)
 8001938:	2240      	movs	r2, #64	@ 0x40
 800193a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 0x7F;
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <rtc_init+0x34>)
 800193e:	227f      	movs	r2, #127	@ 0x7f
 8001940:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 0xF9;
 8001942:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <rtc_init+0x34>)
 8001944:	22f9      	movs	r2, #249	@ 0xf9
 8001946:	60da      	str	r2, [r3, #12]
	if(HAL_RTC_Init(&hrtc) != HAL_OK){
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <rtc_init+0x34>)
 800194a:	f001 f9c5 	bl	8002cd8 <HAL_RTC_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <rtc_init+0x2e>
		print_debug_msg("Error Initializing RTC\n");
 8001954:	4804      	ldr	r0, [pc, #16]	@ (8001968 <rtc_init+0x3c>)
 8001956:	f009 f9f7 	bl	800ad48 <print_debug_msg>
	}
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000031c 	.word	0x2000031c
 8001964:	40002800 	.word	0x40002800
 8001968:	0800dcd0 	.word	0x0800dcd0

0800196c <rtc_date_time_config>:

void rtc_date_time_config(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef	rtc_time;
	RTC_DateTypeDef rtc_date;

	rtc_time.TimeFormat = RTC_HOURFORMAT12_AM;
 8001972:	2300      	movs	r3, #0
 8001974:	71fb      	strb	r3, [r7, #7]
	rtc_time.Hours = 9;
 8001976:	2309      	movs	r3, #9
 8001978:	713b      	strb	r3, [r7, #4]
	rtc_time.Minutes = 16;
 800197a:	2310      	movs	r3, #16
 800197c:	717b      	strb	r3, [r7, #5]
	rtc_time.Seconds = 00;
 800197e:	2300      	movs	r3, #0
 8001980:	71bb      	strb	r3, [r7, #6]
	if(HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN) != HAL_OK) {
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	4810      	ldr	r0, [pc, #64]	@ (80019cc <rtc_date_time_config+0x60>)
 800198a:	f001 fa26 	bl	8002dda <HAL_RTC_SetTime>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <rtc_date_time_config+0x2e>
		print_debug_msg("Error Initializing RTC Date\n");
 8001994:	480e      	ldr	r0, [pc, #56]	@ (80019d0 <rtc_date_time_config+0x64>)
 8001996:	f009 f9d7 	bl	800ad48 <print_debug_msg>
	}
	rtc_date.Date = 8;
 800199a:	2308      	movs	r3, #8
 800199c:	70bb      	strb	r3, [r7, #2]
	rtc_date.Month = RTC_MONTH_JUNE;
 800199e:	2306      	movs	r3, #6
 80019a0:	707b      	strb	r3, [r7, #1]
	rtc_date.Year = 25;
 80019a2:	2319      	movs	r3, #25
 80019a4:	70fb      	strb	r3, [r7, #3]
	rtc_date.WeekDay = RTC_WEEKDAY_SUNDAY;
 80019a6:	2307      	movs	r3, #7
 80019a8:	703b      	strb	r3, [r7, #0]

	if(HAL_RTC_SetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN) != HAL_OK) {
 80019aa:	463b      	mov	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4806      	ldr	r0, [pc, #24]	@ (80019cc <rtc_date_time_config+0x60>)
 80019b2:	f001 fb0a 	bl	8002fca <HAL_RTC_SetDate>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <rtc_date_time_config+0x56>
		print_debug_msg("Error Initializing RTC Date and Time\n");
 80019bc:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <rtc_date_time_config+0x68>)
 80019be:	f009 f9c3 	bl	800ad48 <print_debug_msg>
	}

}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000031c 	.word	0x2000031c
 80019d0:	0800dce8 	.word	0x0800dce8
 80019d4:	0800dd08 	.word	0x0800dd08

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019dc:	f7ff ff94 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e0:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e2:	490d      	ldr	r1, [pc, #52]	@ (8001a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f009 ff91 	bl	800b92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7ff fba9 	bl	8001160 <main>
  bx  lr    
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a1c:	0800e40c 	.word	0x0800e40c
  ldr r2, =_sbss
 8001a20:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a24:	20017544 	.word	0x20017544

08001a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC_IRQHandler>
	...

08001a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <HAL_Init+0x40>)
 8001a36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_Init+0x40>)
 8001a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_Init+0x40>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 f8d8 	bl	8001c0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f7ff fe2e 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7ff fd0a 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	2000033c 	.word	0x2000033c

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	2000033c 	.word	0x2000033c

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4907      	ldr	r1, [pc, #28]	@ (8001b4c <__NVIC_EnableIRQ+0x38>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	db0a      	blt.n	8001b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	490c      	ldr	r1, [pc, #48]	@ (8001b9c <__NVIC_SetPriority+0x4c>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	440b      	add	r3, r1
 8001b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b78:	e00a      	b.n	8001b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4908      	ldr	r1, [pc, #32]	@ (8001ba0 <__NVIC_SetPriority+0x50>)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	3b04      	subs	r3, #4
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	761a      	strb	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000e100 	.word	0xe000e100
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	@ 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f1c3 0307 	rsb	r3, r3, #7
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	bf28      	it	cs
 8001bc2:	2304      	movcs	r3, #4
 8001bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d902      	bls.n	8001bd4 <NVIC_EncodePriority+0x30>
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	e000      	b.n	8001bd6 <NVIC_EncodePriority+0x32>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	4313      	orrs	r3, r2
         );
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3724      	adds	r7, #36	@ 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff4c 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c32:	f7ff ff61 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	6978      	ldr	r0, [r7, #20]
 8001c3e:	f7ff ffb1 	bl	8001ba4 <NVIC_EncodePriority>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff80 	bl	8001b50 <__NVIC_SetPriority>
}
 8001c50:	bf00      	nop
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff54 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c82:	f7ff ff09 	bl	8001a98 <HAL_GetTick>
 8001c86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e052      	b.n	8001d4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0216 	bic.w	r2, r2, #22
 8001cb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <HAL_DMA_Abort+0x62>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0208 	bic.w	r2, r2, #8
 8001ce4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf6:	e013      	b.n	8001d20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf8:	f7ff fece 	bl	8001a98 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d90c      	bls.n	8001d20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2203      	movs	r2, #3
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e015      	b.n	8001d4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e4      	bne.n	8001cf8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d32:	223f      	movs	r2, #63	@ 0x3f
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2280      	movs	r2, #128	@ 0x80
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00c      	b.n	8001d8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	@ 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e16b      	b.n	800208c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f040 815a 	bne.w	8002086 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d005      	beq.n	8001dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d130      	bne.n	8001e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e20:	2201      	movs	r2, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 0201 	and.w	r2, r3, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d017      	beq.n	8001e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d123      	bne.n	8001edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3208      	adds	r2, #8
 8001e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	69b9      	ldr	r1, [r7, #24]
 8001ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80b4 	beq.w	8002086 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b60      	ldr	r3, [pc, #384]	@ (80020a4 <HAL_GPIO_Init+0x30c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	4a5f      	ldr	r2, [pc, #380]	@ (80020a4 <HAL_GPIO_Init+0x30c>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80020a4 <HAL_GPIO_Init+0x30c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3a:	4a5b      	ldr	r2, [pc, #364]	@ (80020a8 <HAL_GPIO_Init+0x310>)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a52      	ldr	r2, [pc, #328]	@ (80020ac <HAL_GPIO_Init+0x314>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d02b      	beq.n	8001fbe <HAL_GPIO_Init+0x226>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a51      	ldr	r2, [pc, #324]	@ (80020b0 <HAL_GPIO_Init+0x318>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d025      	beq.n	8001fba <HAL_GPIO_Init+0x222>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a50      	ldr	r2, [pc, #320]	@ (80020b4 <HAL_GPIO_Init+0x31c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01f      	beq.n	8001fb6 <HAL_GPIO_Init+0x21e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4f      	ldr	r2, [pc, #316]	@ (80020b8 <HAL_GPIO_Init+0x320>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d019      	beq.n	8001fb2 <HAL_GPIO_Init+0x21a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4e      	ldr	r2, [pc, #312]	@ (80020bc <HAL_GPIO_Init+0x324>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0x216>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4d      	ldr	r2, [pc, #308]	@ (80020c0 <HAL_GPIO_Init+0x328>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_GPIO_Init+0x212>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4c      	ldr	r2, [pc, #304]	@ (80020c4 <HAL_GPIO_Init+0x32c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x20e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	@ (80020c8 <HAL_GPIO_Init+0x330>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_GPIO_Init+0x20a>
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	e00e      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	e00c      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	e00a      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e008      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	f002 0203 	and.w	r2, r2, #3
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd0:	4935      	ldr	r1, [pc, #212]	@ (80020a8 <HAL_GPIO_Init+0x310>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fde:	4b3b      	ldr	r3, [pc, #236]	@ (80020cc <HAL_GPIO_Init+0x334>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002002:	4a32      	ldr	r2, [pc, #200]	@ (80020cc <HAL_GPIO_Init+0x334>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002008:	4b30      	ldr	r3, [pc, #192]	@ (80020cc <HAL_GPIO_Init+0x334>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800202c:	4a27      	ldr	r2, [pc, #156]	@ (80020cc <HAL_GPIO_Init+0x334>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002032:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <HAL_GPIO_Init+0x334>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002056:	4a1d      	ldr	r2, [pc, #116]	@ (80020cc <HAL_GPIO_Init+0x334>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_GPIO_Init+0x334>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002080:	4a12      	ldr	r2, [pc, #72]	@ (80020cc <HAL_GPIO_Init+0x334>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3301      	adds	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b0f      	cmp	r3, #15
 8002090:	f67f ae90 	bls.w	8001db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3724      	adds	r7, #36	@ 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40013800 	.word	0x40013800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40021400 	.word	0x40021400
 80020c4:	40021800 	.word	0x40021800
 80020c8:	40021c00 	.word	0x40021c00
 80020cc:	40013c00 	.word	0x40013c00

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	041a      	lsls	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43d9      	mvns	r1, r3
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002142:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800214e:	4a05      	ldr	r2, [pc, #20]	@ (8002164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f806 	bl	8002168 <HAL_GPIO_EXTI_Callback>
  }
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e267      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d075      	beq.n	800228a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800219e:	4b88      	ldr	r3, [pc, #544]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d00c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021aa:	4b85      	ldr	r3, [pc, #532]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d112      	bne.n	80021dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b6:	4b82      	ldr	r3, [pc, #520]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021c2:	d10b      	bne.n	80021dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	4b7e      	ldr	r3, [pc, #504]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d05b      	beq.n	8002288 <HAL_RCC_OscConfig+0x108>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d157      	bne.n	8002288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e242      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e4:	d106      	bne.n	80021f4 <HAL_RCC_OscConfig+0x74>
 80021e6:	4b76      	ldr	r3, [pc, #472]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a75      	ldr	r2, [pc, #468]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0xb0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x98>
 80021fe:	4b70      	ldr	r3, [pc, #448]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6f      	ldr	r2, [pc, #444]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b6d      	ldr	r3, [pc, #436]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6c      	ldr	r2, [pc, #432]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xb0>
 8002218:	4b69      	ldr	r3, [pc, #420]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a68      	ldr	r2, [pc, #416]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b66      	ldr	r3, [pc, #408]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a65      	ldr	r2, [pc, #404]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800222e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fc2e 	bl	8001a98 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fc2a 	bl	8001a98 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	@ 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e207      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b5b      	ldr	r3, [pc, #364]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0xc0>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fc1a 	bl	8001a98 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff fc16 	bl	8001a98 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	@ 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1f3      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	4b51      	ldr	r3, [pc, #324]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0xe8>
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002296:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a2:	4b47      	ldr	r3, [pc, #284]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ae:	4b44      	ldr	r3, [pc, #272]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x152>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e1c7      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4937      	ldr	r1, [pc, #220]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e03a      	b.n	800235e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b34      	ldr	r3, [pc, #208]	@ (80023c4 <HAL_RCC_OscConfig+0x244>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7ff fbcf 	bl	8001a98 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fe:	f7ff fbcb 	bl	8001a98 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1a8      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4925      	ldr	r1, [pc, #148]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <HAL_RCC_OscConfig+0x244>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7ff fbae 	bl	8001a98 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002340:	f7ff fbaa 	bl	8001a98 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e187      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d036      	beq.n	80023d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HAL_RCC_OscConfig+0x248>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7ff fb8e 	bl	8001a98 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff fb8a 	bl	8001a98 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e167      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x200>
 800239e:	e01b      	b.n	80023d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <HAL_RCC_OscConfig+0x248>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fb77 	bl	8001a98 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	e00e      	b.n	80023cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ae:	f7ff fb73 	bl	8001a98 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d907      	bls.n	80023cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e150      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
 80023c0:	40023800 	.word	0x40023800
 80023c4:	42470000 	.word	0x42470000
 80023c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80023ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ea      	bne.n	80023ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8097 	beq.w	8002514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b81      	ldr	r3, [pc, #516]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b7d      	ldr	r3, [pc, #500]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	4a7c      	ldr	r2, [pc, #496]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	@ 0x40
 8002406:	4b7a      	ldr	r3, [pc, #488]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b77      	ldr	r3, [pc, #476]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b74      	ldr	r3, [pc, #464]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a73      	ldr	r2, [pc, #460]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7ff fb33 	bl	8001a98 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7ff fb2f 	bl	8001a98 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e10c      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x2ea>
 800245c:	4b64      	ldr	r3, [pc, #400]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	4a63      	ldr	r2, [pc, #396]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	@ 0x70
 8002468:	e01c      	b.n	80024a4 <HAL_RCC_OscConfig+0x324>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x30c>
 8002472:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002476:	4a5e      	ldr	r2, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6713      	str	r3, [r2, #112]	@ 0x70
 800247e:	4b5c      	ldr	r3, [pc, #368]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002482:	4a5b      	ldr	r2, [pc, #364]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6713      	str	r3, [r2, #112]	@ 0x70
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0x324>
 800248c:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002490:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6713      	str	r3, [r2, #112]	@ 0x70
 8002498:	4b55      	ldr	r3, [pc, #340]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249c:	4a54      	ldr	r2, [pc, #336]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800249e:	f023 0304 	bic.w	r3, r3, #4
 80024a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7ff faf4 	bl	8001a98 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7ff faf0 	bl	8001a98 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0cb      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ee      	beq.n	80024b4 <HAL_RCC_OscConfig+0x334>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7ff fade 	bl	8001a98 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7ff fada 	bl	8001a98 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0b5      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f6:	4b3e      	ldr	r3, [pc, #248]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002508:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	4a38      	ldr	r2, [pc, #224]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800250e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a1 	beq.w	8002660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251e:	4b34      	ldr	r3, [pc, #208]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b08      	cmp	r3, #8
 8002528:	d05c      	beq.n	80025e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d141      	bne.n	80025b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b31      	ldr	r3, [pc, #196]	@ (80025f8 <HAL_RCC_OscConfig+0x478>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff faae 	bl	8001a98 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff faaa 	bl	8001a98 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e087      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	491b      	ldr	r1, [pc, #108]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x478>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7ff fa83 	bl	8001a98 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7ff fa7f 	bl	8001a98 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e05c      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x416>
 80025b4:	e054      	b.n	8002660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_RCC_OscConfig+0x478>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff fa6c 	bl	8001a98 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7ff fa68 	bl	8001a98 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e045      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x444>
 80025e2:	e03d      	b.n	8002660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e038      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_RCC_OscConfig+0x4ec>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d028      	beq.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d121      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d11a      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002634:	4293      	cmp	r3, r2
 8002636:	d111      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	3b01      	subs	r3, #1
 8002646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0cc      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b68      	ldr	r3, [pc, #416]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d90c      	bls.n	80026ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b65      	ldr	r3, [pc, #404]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a58      	ldr	r2, [pc, #352]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a52      	ldr	r2, [pc, #328]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d044      	beq.n	8002790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d119      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d003      	beq.n	800272e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272a:	2b03      	cmp	r3, #3
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	4b3f      	ldr	r3, [pc, #252]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e067      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b37      	ldr	r3, [pc, #220]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4934      	ldr	r1, [pc, #208]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002760:	f7ff f99a 	bl	8001a98 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7ff f996 	bl	8001a98 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e04f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002790:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d20c      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	@ (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe ff50 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00
 800282c:	40023800 	.word	0x40023800
 8002830:	0800dfc8 	.word	0x0800dfc8
 8002834:	20000000 	.word	0x20000000
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002840:	b094      	sub	sp, #80	@ 0x50
 8002842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002854:	4b79      	ldr	r3, [pc, #484]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d00d      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x40>
 8002860:	2b08      	cmp	r3, #8
 8002862:	f200 80e1 	bhi.w	8002a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x34>
 800286a:	2b04      	cmp	r3, #4
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x3a>
 800286e:	e0db      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b73      	ldr	r3, [pc, #460]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002872:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002874:	e0db      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002876:	4b73      	ldr	r3, [pc, #460]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800287a:	e0d8      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800287c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002884:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002886:	4b6d      	ldr	r3, [pc, #436]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d063      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002892:	4b6a      	ldr	r3, [pc, #424]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	2200      	movs	r2, #0
 800289a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800289c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800289e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80028a6:	2300      	movs	r3, #0
 80028a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80028aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028ae:	4622      	mov	r2, r4
 80028b0:	462b      	mov	r3, r5
 80028b2:	f04f 0000 	mov.w	r0, #0
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	0159      	lsls	r1, r3, #5
 80028bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c0:	0150      	lsls	r0, r2, #5
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4621      	mov	r1, r4
 80028c8:	1a51      	subs	r1, r2, r1
 80028ca:	6139      	str	r1, [r7, #16]
 80028cc:	4629      	mov	r1, r5
 80028ce:	eb63 0301 	sbc.w	r3, r3, r1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e0:	4659      	mov	r1, fp
 80028e2:	018b      	lsls	r3, r1, #6
 80028e4:	4651      	mov	r1, sl
 80028e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ea:	4651      	mov	r1, sl
 80028ec:	018a      	lsls	r2, r1, #6
 80028ee:	4651      	mov	r1, sl
 80028f0:	ebb2 0801 	subs.w	r8, r2, r1
 80028f4:	4659      	mov	r1, fp
 80028f6:	eb63 0901 	sbc.w	r9, r3, r1
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800290a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800290e:	4690      	mov	r8, r2
 8002910:	4699      	mov	r9, r3
 8002912:	4623      	mov	r3, r4
 8002914:	eb18 0303 	adds.w	r3, r8, r3
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	462b      	mov	r3, r5
 800291c:	eb49 0303 	adc.w	r3, r9, r3
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800292e:	4629      	mov	r1, r5
 8002930:	024b      	lsls	r3, r1, #9
 8002932:	4621      	mov	r1, r4
 8002934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002938:	4621      	mov	r1, r4
 800293a:	024a      	lsls	r2, r1, #9
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002942:	2200      	movs	r2, #0
 8002944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800294c:	f7fe f97c 	bl	8000c48 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4613      	mov	r3, r2
 8002956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002958:	e058      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295a:	4b38      	ldr	r3, [pc, #224]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	099b      	lsrs	r3, r3, #6
 8002960:	2200      	movs	r2, #0
 8002962:	4618      	mov	r0, r3
 8002964:	4611      	mov	r1, r2
 8002966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002974:	4642      	mov	r2, r8
 8002976:	464b      	mov	r3, r9
 8002978:	f04f 0000 	mov.w	r0, #0
 800297c:	f04f 0100 	mov.w	r1, #0
 8002980:	0159      	lsls	r1, r3, #5
 8002982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002986:	0150      	lsls	r0, r2, #5
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4641      	mov	r1, r8
 800298e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002992:	4649      	mov	r1, r9
 8002994:	eb63 0b01 	sbc.w	fp, r3, r1
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029ac:	ebb2 040a 	subs.w	r4, r2, sl
 80029b0:	eb63 050b 	sbc.w	r5, r3, fp
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	00eb      	lsls	r3, r5, #3
 80029be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c2:	00e2      	lsls	r2, r4, #3
 80029c4:	4614      	mov	r4, r2
 80029c6:	461d      	mov	r5, r3
 80029c8:	4643      	mov	r3, r8
 80029ca:	18e3      	adds	r3, r4, r3
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	464b      	mov	r3, r9
 80029d0:	eb45 0303 	adc.w	r3, r5, r3
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029e2:	4629      	mov	r1, r5
 80029e4:	028b      	lsls	r3, r1, #10
 80029e6:	4621      	mov	r1, r4
 80029e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ec:	4621      	mov	r1, r4
 80029ee:	028a      	lsls	r2, r1, #10
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029f6:	2200      	movs	r2, #0
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	61fa      	str	r2, [r7, #28]
 80029fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a00:	f7fe f922 	bl	8000c48 <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3750      	adds	r7, #80	@ 0x50
 8002a34:	46bd      	mov	sp, r7
 8002a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	007a1200 	.word	0x007a1200

08002a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000000 	.word	0x20000000

08002a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a64:	f7ff fff0 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0a9b      	lsrs	r3, r3, #10
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4903      	ldr	r1, [pc, #12]	@ (8002a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	0800dfd8 	.word	0x0800dfd8

08002a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a8c:	f7ff ffdc 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	0b5b      	lsrs	r3, r3, #13
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4903      	ldr	r1, [pc, #12]	@ (8002aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	0800dfd8 	.word	0x0800dfd8

08002ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	220f      	movs	r2, #15
 8002abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ac0:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0203 	and.w	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002acc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	08db      	lsrs	r3, r3, #3
 8002aea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002af2:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <HAL_RCC_GetClockConfig+0x60>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0207 	and.w	r2, r3, #7
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	601a      	str	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40023c00 	.word	0x40023c00

08002b14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d035      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b3c:	4b62      	ldr	r3, [pc, #392]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b42:	f7fe ffa9 	bl	8001a98 <HAL_GetTick>
 8002b46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b4a:	f7fe ffa5 	bl	8001a98 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0b0      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	019a      	lsls	r2, r3, #6
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	071b      	lsls	r3, r3, #28
 8002b74:	4955      	ldr	r1, [pc, #340]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b7c:	4b52      	ldr	r3, [pc, #328]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b82:	f7fe ff89 	bl	8001a98 <HAL_GetTick>
 8002b86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b8a:	f7fe ff85 	bl	8001a98 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e090      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8083 	beq.w	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b44      	ldr	r3, [pc, #272]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	4a43      	ldr	r2, [pc, #268]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bdc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bde:	f7fe ff5b 	bl	8001a98 <HAL_GetTick>
 8002be2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be6:	f7fe ff57 	bl	8001a98 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e062      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002bf8:	4b35      	ldr	r3, [pc, #212]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c04:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c0c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02f      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d028      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c22:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c2a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c2c:	4b29      	ldr	r3, [pc, #164]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c32:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c38:	4a24      	ldr	r2, [pc, #144]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c3e:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d114      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe ff25 	bl	8001a98 <HAL_GetTick>
 8002c4e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe ff21 	bl	8001a98 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e02a      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c68:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ee      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c80:	d10d      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c96:	490d      	ldr	r1, [pc, #52]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
 8002c9c:	e005      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ca4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ca8:	6093      	str	r3, [r2, #8]
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb6:	4905      	ldr	r1, [pc, #20]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	42470068 	.word	0x42470068
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	42470e40 	.word	0x42470e40

08002cd8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e073      	b.n	8002dd2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7f5b      	ldrb	r3, [r3, #29]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe fcac 	bl	8001658 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d055      	beq.n	8002dc0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	22ca      	movs	r2, #202	@ 0xca
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2253      	movs	r2, #83	@ 0x53
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fa49 	bl	80031bc <RTC_EnterInitMode>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d12c      	bne.n	8002d8e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68d2      	ldr	r2, [r2, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6919      	ldr	r1, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	041a      	lsls	r2, r3, #16
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa50 	bl	800322a <RTC_ExitInitMode>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d110      	bne.n	8002db6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	22ff      	movs	r2, #255	@ 0xff
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dbe:	e001      	b.n	8002dc4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002dda:	b590      	push	{r4, r7, lr}
 8002ddc:	b087      	sub	sp, #28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	7f1b      	ldrb	r3, [r3, #28]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_RTC_SetTime+0x1c>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e087      	b.n	8002f06 <HAL_RTC_SetTime+0x12c>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d126      	bne.n	8002e56 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fa27 	bl	8003274 <RTC_ByteToBcd2>
 8002e26:	4603      	mov	r3, r0
 8002e28:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	785b      	ldrb	r3, [r3, #1]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fa20 	bl	8003274 <RTC_ByteToBcd2>
 8002e34:	4603      	mov	r3, r0
 8002e36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e38:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	789b      	ldrb	r3, [r3, #2]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fa18 	bl	8003274 <RTC_ByteToBcd2>
 8002e44:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	78db      	ldrb	r3, [r3, #3]
 8002e4e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e018      	b.n	8002e88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	785b      	ldrb	r3, [r3, #1]
 8002e74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e76:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	78db      	ldrb	r3, [r3, #3]
 8002e82:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	22ca      	movs	r2, #202	@ 0xca
 8002e8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2253      	movs	r2, #83	@ 0x53
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f98f 	bl	80031bc <RTC_EnterInitMode>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d120      	bne.n	8002eea <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002eb2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002eb6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ec6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6899      	ldr	r1, [r3, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f9a2 	bl	800322a <RTC_ExitInitMode>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	22ff      	movs	r2, #255	@ 0xff
 8002efc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]

  return status;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd90      	pop	{r4, r7, pc}

08002f0e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002f40:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002f44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	0d9b      	lsrs	r3, r3, #22
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d11a      	bne.n	8002fc0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f98e 	bl	80032b0 <RTC_Bcd2ToByte>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f985 	bl	80032b0 <RTC_Bcd2ToByte>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	789b      	ldrb	r3, [r3, #2]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f97c 	bl	80032b0 <RTC_Bcd2ToByte>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fca:	b590      	push	{r4, r7, lr}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	7f1b      	ldrb	r3, [r3, #28]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RTC_SetDate+0x1c>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e071      	b.n	80030ca <HAL_RTC_SetDate+0x100>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10e      	bne.n	8003016 <HAL_RTC_SetDate+0x4c>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	785b      	ldrb	r3, [r3, #1]
 8003008:	f023 0310 	bic.w	r3, r3, #16
 800300c:	b2db      	uxtb	r3, r3
 800300e:	330a      	adds	r3, #10
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d11c      	bne.n	8003056 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	78db      	ldrb	r3, [r3, #3]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f927 	bl	8003274 <RTC_ByteToBcd2>
 8003026:	4603      	mov	r3, r0
 8003028:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f920 	bl	8003274 <RTC_ByteToBcd2>
 8003034:	4603      	mov	r3, r0
 8003036:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003038:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	789b      	ldrb	r3, [r3, #2]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f918 	bl	8003274 <RTC_ByteToBcd2>
 8003044:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003046:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e00e      	b.n	8003074 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	78db      	ldrb	r3, [r3, #3]
 800305a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	785b      	ldrb	r3, [r3, #1]
 8003060:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003062:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003068:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	22ca      	movs	r2, #202	@ 0xca
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2253      	movs	r2, #83	@ 0x53
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f899 	bl	80031bc <RTC_EnterInitMode>
 800308a:	4603      	mov	r3, r0
 800308c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10c      	bne.n	80030ae <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800309e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80030a2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f8c0 	bl	800322a <RTC_ExitInitMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	22ff      	movs	r2, #255	@ 0xff
 80030c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]

  return status;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd90      	pop	{r4, r7, pc}

080030d2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80030f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	0b5b      	lsrs	r3, r3, #13
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d11a      	bne.n	8003166 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	78db      	ldrb	r3, [r3, #3]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 f8bb 	bl	80032b0 <RTC_Bcd2ToByte>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	785b      	ldrb	r3, [r3, #1]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f8b2 	bl	80032b0 <RTC_Bcd2ToByte>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	789b      	ldrb	r3, [r3, #2]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f8a9 	bl	80032b0 <RTC_Bcd2ToByte>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0d      	ldr	r2, [pc, #52]	@ (80031b8 <HAL_RTC_WaitForSynchro+0x48>)
 8003182:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003184:	f7fe fc88 	bl	8001a98 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800318a:	e009      	b.n	80031a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800318c:	f7fe fc84 	bl	8001a98 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800319a:	d901      	bls.n	80031a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e007      	b.n	80031b0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	00017f5f 	.word	0x00017f5f

080031bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d122      	bne.n	8003220 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031ea:	f7fe fc55 	bl	8001a98 <HAL_GetTick>
 80031ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031f0:	e00c      	b.n	800320c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031f2:	f7fe fc51 	bl	8001a98 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003200:	d904      	bls.n	800320c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2204      	movs	r2, #4
 8003206:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <RTC_EnterInitMode+0x64>
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d1e8      	bne.n	80031f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003244:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff8b 	bl	8003170 <HAL_RTC_WaitForSynchro>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2204      	movs	r2, #4
 8003264:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003282:	e005      	b.n	8003290 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	3b0a      	subs	r3, #10
 800328e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b09      	cmp	r3, #9
 8003294:	d8f6      	bhi.n	8003284 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	b2da      	uxtb	r2, r3
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b2db      	uxtb	r3, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	4413      	add	r3, r2
 80032de:	b2db      	uxtb	r3, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e041      	b.n	8003382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe f978 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 f9ac 	bl	8003688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d001      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e04e      	b.n	8003442 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a23      	ldr	r2, [pc, #140]	@ (8003450 <HAL_TIM_Base_Start_IT+0xc4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d022      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ce:	d01d      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003454 <HAL_TIM_Base_Start_IT+0xc8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d018      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1e      	ldr	r2, [pc, #120]	@ (8003458 <HAL_TIM_Base_Start_IT+0xcc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <HAL_TIM_Base_Start_IT+0xd0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003460 <HAL_TIM_Base_Start_IT+0xd4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <HAL_TIM_Base_Start_IT+0xd8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <HAL_TIM_Base_Start_IT+0xdc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d111      	bne.n	8003430 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d010      	beq.n	8003440 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	e007      	b.n	8003440 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40010000 	.word	0x40010000
 8003454:	40000400 	.word	0x40000400
 8003458:	40000800 	.word	0x40000800
 800345c:	40000c00 	.word	0x40000c00
 8003460:	40010400 	.word	0x40010400
 8003464:	40014000 	.word	0x40014000
 8003468:	40001800 	.word	0x40001800

0800346c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d020      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0202 	mvn.w	r2, #2
 80034a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd ff0e 	bl	80012d8 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f8c4 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f8cb 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d020      	beq.n	800351c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01b      	beq.n	800351c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0204 	mvn.w	r2, #4
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fee8 	bl	80012d8 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f89e 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8a5 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d020      	beq.n	8003568 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01b      	beq.n	8003568 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0208 	mvn.w	r2, #8
 8003538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2204      	movs	r2, #4
 800353e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fec2 	bl	80012d8 <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f878 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f87f 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d020      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01b      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0210 	mvn.w	r2, #16
 8003584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2208      	movs	r2, #8
 800358a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd fe9c 	bl	80012d8 <HAL_TIM_IC_CaptureCallback>
 80035a0:	e005      	b.n	80035ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f852 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f859 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0201 	mvn.w	r2, #1
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd fe60 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8f6 	bl	80037e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f82a 	bl	8003674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0220 	mvn.w	r2, #32
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f8c8 	bl	80037d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a43      	ldr	r2, [pc, #268]	@ (80037a8 <TIM_Base_SetConfig+0x120>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a6:	d00f      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a40      	ldr	r2, [pc, #256]	@ (80037ac <TIM_Base_SetConfig+0x124>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00b      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a3f      	ldr	r2, [pc, #252]	@ (80037b0 <TIM_Base_SetConfig+0x128>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a3e      	ldr	r2, [pc, #248]	@ (80037b4 <TIM_Base_SetConfig+0x12c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3d      	ldr	r2, [pc, #244]	@ (80037b8 <TIM_Base_SetConfig+0x130>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d108      	bne.n	80036da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a32      	ldr	r2, [pc, #200]	@ (80037a8 <TIM_Base_SetConfig+0x120>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02b      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e8:	d027      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2f      	ldr	r2, [pc, #188]	@ (80037ac <TIM_Base_SetConfig+0x124>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d023      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2e      	ldr	r2, [pc, #184]	@ (80037b0 <TIM_Base_SetConfig+0x128>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01f      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a2d      	ldr	r2, [pc, #180]	@ (80037b4 <TIM_Base_SetConfig+0x12c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01b      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a2c      	ldr	r2, [pc, #176]	@ (80037b8 <TIM_Base_SetConfig+0x130>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d017      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a2b      	ldr	r2, [pc, #172]	@ (80037bc <TIM_Base_SetConfig+0x134>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a2a      	ldr	r2, [pc, #168]	@ (80037c0 <TIM_Base_SetConfig+0x138>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00f      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a29      	ldr	r2, [pc, #164]	@ (80037c4 <TIM_Base_SetConfig+0x13c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a28      	ldr	r2, [pc, #160]	@ (80037c8 <TIM_Base_SetConfig+0x140>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a27      	ldr	r2, [pc, #156]	@ (80037cc <TIM_Base_SetConfig+0x144>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a26      	ldr	r2, [pc, #152]	@ (80037d0 <TIM_Base_SetConfig+0x148>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d108      	bne.n	800374c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a0e      	ldr	r2, [pc, #56]	@ (80037a8 <TIM_Base_SetConfig+0x120>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <TIM_Base_SetConfig+0xf2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a10      	ldr	r2, [pc, #64]	@ (80037b8 <TIM_Base_SetConfig+0x130>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d103      	bne.n	8003782 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f043 0204 	orr.w	r2, r3, #4
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	601a      	str	r2, [r3, #0]
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40000800 	.word	0x40000800
 80037b4:	40000c00 	.word	0x40000c00
 80037b8:	40010400 	.word	0x40010400
 80037bc:	40014000 	.word	0x40014000
 80037c0:	40014400 	.word	0x40014400
 80037c4:	40014800 	.word	0x40014800
 80037c8:	40001800 	.word	0x40001800
 80037cc:	40001c00 	.word	0x40001c00
 80037d0:	40002000 	.word	0x40002000

080037d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e042      	b.n	8003894 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fe50 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	@ 0x24
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800383e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fd7f 	bl	8004344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	@ 0x28
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d175      	bne.n	80039a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_UART_Transmit+0x2c>
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e06e      	b.n	80039aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2221      	movs	r2, #33	@ 0x21
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038da:	f7fe f8dd 	bl	8001a98 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	88fa      	ldrh	r2, [r7, #6]
 80038e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f4:	d108      	bne.n	8003908 <HAL_UART_Transmit+0x6c>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d104      	bne.n	8003908 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	e003      	b.n	8003910 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003910:	e02e      	b.n	8003970 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	@ 0x80
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fb1d 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e03a      	b.n	80039aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003948:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	3302      	adds	r3, #2
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	e007      	b.n	8003962 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	3301      	adds	r3, #1
 8003960:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1cb      	bne.n	8003912 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2200      	movs	r2, #0
 8003982:	2140      	movs	r1, #64	@ 0x40
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fae9 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e006      	b.n	80039aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b0ba      	sub	sp, #232	@ 0xe8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_UART_IRQHandler+0x66>
 8003a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fbd7 	bl	80041c6 <UART_Receive_IT>
      return;
 8003a18:	e273      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80de 	beq.w	8003be0 <HAL_UART_IRQHandler+0x22c>
 8003a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80d1 	beq.w	8003be0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_UART_IRQHandler+0xae>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_UART_IRQHandler+0xf6>
 8003a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d011      	beq.n	8003ada <HAL_UART_IRQHandler+0x126>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	f043 0208 	orr.w	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 820a 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_UART_IRQHandler+0x14e>
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fb62 	bl	80041c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0c:	2b40      	cmp	r3, #64	@ 0x40
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_UART_IRQHandler+0x17a>
 8003b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d04f      	beq.n	8003bce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa6d 	bl	800400e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3e:	2b40      	cmp	r3, #64	@ 0x40
 8003b40:	d141      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3314      	adds	r3, #20
 8003b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1d9      	bne.n	8003b42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d013      	beq.n	8003bbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9a:	4a8a      	ldr	r2, [pc, #552]	@ (8003dc4 <HAL_UART_IRQHandler+0x410>)
 8003b9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe f8d6 	bl	8001d54 <HAL_DMA_Abort_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e00e      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9b6 	bl	8003f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	e00a      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f9b2 	bl	8003f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	e006      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f9ae 	bl	8003f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bda:	e18d      	b.n	8003ef8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	bf00      	nop
    return;
 8003bde:	e18b      	b.n	8003ef8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f040 8167 	bne.w	8003eb8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8160 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8159 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c26:	2b40      	cmp	r3, #64	@ 0x40
 8003c28:	f040 80ce 	bne.w	8003dc8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80a9 	beq.w	8003d94 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	f080 80a2 	bcs.w	8003d94 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c62:	f000 8088 	beq.w	8003d76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1d9      	bne.n	8003c66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e1      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e3      	bne.n	8003cee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e3      	bne.n	8003d34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fd ff7f 	bl	8001c74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f8d9 	bl	8003f44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003d92:	e0b3      	b.n	8003efc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	f040 80ad 	bne.w	8003efc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dac:	f040 80a6 	bne.w	8003efc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f8c1 	bl	8003f44 <HAL_UARTEx_RxEventCallback>
      return;
 8003dc2:	e09b      	b.n	8003efc <HAL_UART_IRQHandler+0x548>
 8003dc4:	080040d5 	.word	0x080040d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 808e 	beq.w	8003f00 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8089 	beq.w	8003f00 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e3      	bne.n	8003dee <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	623b      	str	r3, [r7, #32]
   return(result);
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e3      	bne.n	8003e26 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0310 	bic.w	r3, r3, #16
 8003e82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e90:	61fa      	str	r2, [r7, #28]
 8003e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	69b9      	ldr	r1, [r7, #24]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e3      	bne.n	8003e6c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f847 	bl	8003f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eb6:	e023      	b.n	8003f00 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x524>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f910 	bl	80040f6 <UART_Transmit_IT>
    return;
 8003ed6:	e014      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <HAL_UART_IRQHandler+0x54e>
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f950 	bl	8004196 <UART_EndTransmit_IT>
    return;
 8003ef6:	e004      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
    return;
 8003ef8:	bf00      	nop
 8003efa:	e002      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
      return;
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
      return;
 8003f00:	bf00      	nop
  }
}
 8003f02:	37e8      	adds	r7, #232	@ 0xe8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6c:	e03b      	b.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f74:	d037      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fd fd8f 	bl	8001a98 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	6a3a      	ldr	r2, [r7, #32]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e03a      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d023      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b80      	cmp	r3, #128	@ 0x80
 8003fa2:	d020      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b40      	cmp	r3, #64	@ 0x40
 8003fa8:	d01d      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d116      	bne.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f81d 	bl	800400e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e00f      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	429a      	cmp	r2, r3
 8004002:	d0b4      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800400e:	b480      	push	{r7}
 8004010:	b095      	sub	sp, #84	@ 0x54
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800402c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004036:	643a      	str	r2, [r7, #64]	@ 0x40
 8004038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800403c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3314      	adds	r3, #20
 8004050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	61fb      	str	r3, [r7, #28]
   return(result);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800406a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	2b01      	cmp	r3, #1
 8004084:	d119      	bne.n	80040ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	60bb      	str	r3, [r7, #8]
   return(result);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f023 0310 	bic.w	r3, r3, #16
 800409c:	647b      	str	r3, [r7, #68]	@ 0x44
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040a6:	61ba      	str	r2, [r7, #24]
 80040a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6979      	ldr	r1, [r7, #20]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	613b      	str	r3, [r7, #16]
   return(result);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040c8:	bf00      	nop
 80040ca:	3754      	adds	r7, #84	@ 0x54
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff ff21 	bl	8003f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b21      	cmp	r3, #33	@ 0x21
 8004108:	d13e      	bne.n	8004188 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004112:	d114      	bne.n	800413e <UART_Transmit_IT+0x48>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d110      	bne.n	800413e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004130:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	1c9a      	adds	r2, r3, #2
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	621a      	str	r2, [r3, #32]
 800413c:	e008      	b.n	8004150 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	1c59      	adds	r1, r3, #1
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6211      	str	r1, [r2, #32]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29b      	uxth	r3, r3
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	4619      	mov	r1, r3
 800415e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10f      	bne.n	8004184 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fea6 	bl	8003f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b08c      	sub	sp, #48	@ 0x30
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b22      	cmp	r3, #34	@ 0x22
 80041e0:	f040 80aa 	bne.w	8004338 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ec:	d115      	bne.n	800421a <UART_Receive_IT+0x54>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d111      	bne.n	800421a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004208:	b29a      	uxth	r2, r3
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	1c9a      	adds	r2, r3, #2
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28
 8004218:	e024      	b.n	8004264 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004228:	d007      	beq.n	800423a <UART_Receive_IT+0x74>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <UART_Receive_IT+0x82>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e008      	b.n	800425a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004254:	b2da      	uxtb	r2, r3
 8004256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004258:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29b      	uxth	r3, r3
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4619      	mov	r1, r3
 8004272:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004274:	2b00      	cmp	r3, #0
 8004276:	d15d      	bne.n	8004334 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0220 	bic.w	r2, r2, #32
 8004286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695a      	ldr	r2, [r3, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d135      	bne.n	800432a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	613b      	str	r3, [r7, #16]
   return(result);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f023 0310 	bic.w	r3, r3, #16
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e4:	623a      	str	r2, [r7, #32]
 80042e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	69f9      	ldr	r1, [r7, #28]
 80042ea:	6a3a      	ldr	r2, [r7, #32]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b10      	cmp	r3, #16
 8004304:	d10a      	bne.n	800431c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff fe0e 	bl	8003f44 <HAL_UARTEx_RxEventCallback>
 8004328:	e002      	b.n	8004330 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fdf6 	bl	8003f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e002      	b.n	800433a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3730      	adds	r7, #48	@ 0x30
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	b0c0      	sub	sp, #256	@ 0x100
 800434a:	af00      	add	r7, sp, #0
 800434c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004360:	68d9      	ldr	r1, [r3, #12]
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	ea40 0301 	orr.w	r3, r0, r1
 800436c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	431a      	orrs	r2, r3
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	431a      	orrs	r2, r3
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800439c:	f021 010c 	bic.w	r1, r1, #12
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043aa:	430b      	orrs	r3, r1
 80043ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043be:	6999      	ldr	r1, [r3, #24]
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	ea40 0301 	orr.w	r3, r0, r1
 80043ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004610 <UART_SetConfig+0x2cc>)
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d005      	beq.n	80043e4 <UART_SetConfig+0xa0>
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b8d      	ldr	r3, [pc, #564]	@ (8004614 <UART_SetConfig+0x2d0>)
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d104      	bne.n	80043ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e4:	f7fe fb50 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 80043e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043ec:	e003      	b.n	80043f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ee:	f7fe fb37 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 80043f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004400:	f040 810c 	bne.w	800461c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004408:	2200      	movs	r2, #0
 800440a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800440e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004416:	4622      	mov	r2, r4
 8004418:	462b      	mov	r3, r5
 800441a:	1891      	adds	r1, r2, r2
 800441c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800441e:	415b      	adcs	r3, r3
 8004420:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004426:	4621      	mov	r1, r4
 8004428:	eb12 0801 	adds.w	r8, r2, r1
 800442c:	4629      	mov	r1, r5
 800442e:	eb43 0901 	adc.w	r9, r3, r1
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004446:	4690      	mov	r8, r2
 8004448:	4699      	mov	r9, r3
 800444a:	4623      	mov	r3, r4
 800444c:	eb18 0303 	adds.w	r3, r8, r3
 8004450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004454:	462b      	mov	r3, r5
 8004456:	eb49 0303 	adc.w	r3, r9, r3
 800445a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800446a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800446e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004472:	460b      	mov	r3, r1
 8004474:	18db      	adds	r3, r3, r3
 8004476:	653b      	str	r3, [r7, #80]	@ 0x50
 8004478:	4613      	mov	r3, r2
 800447a:	eb42 0303 	adc.w	r3, r2, r3
 800447e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004488:	f7fc fbde 	bl	8000c48 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4b61      	ldr	r3, [pc, #388]	@ (8004618 <UART_SetConfig+0x2d4>)
 8004492:	fba3 2302 	umull	r2, r3, r3, r2
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	011c      	lsls	r4, r3, #4
 800449a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044b4:	415b      	adcs	r3, r3
 80044b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044bc:	4641      	mov	r1, r8
 80044be:	eb12 0a01 	adds.w	sl, r2, r1
 80044c2:	4649      	mov	r1, r9
 80044c4:	eb43 0b01 	adc.w	fp, r3, r1
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044dc:	4692      	mov	sl, r2
 80044de:	469b      	mov	fp, r3
 80044e0:	4643      	mov	r3, r8
 80044e2:	eb1a 0303 	adds.w	r3, sl, r3
 80044e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044ea:	464b      	mov	r3, r9
 80044ec:	eb4b 0303 	adc.w	r3, fp, r3
 80044f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004500:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004508:	460b      	mov	r3, r1
 800450a:	18db      	adds	r3, r3, r3
 800450c:	643b      	str	r3, [r7, #64]	@ 0x40
 800450e:	4613      	mov	r3, r2
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	647b      	str	r3, [r7, #68]	@ 0x44
 8004516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800451a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800451e:	f7fc fb93 	bl	8000c48 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4611      	mov	r1, r2
 8004528:	4b3b      	ldr	r3, [pc, #236]	@ (8004618 <UART_SetConfig+0x2d4>)
 800452a:	fba3 2301 	umull	r2, r3, r3, r1
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2264      	movs	r2, #100	@ 0x64
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	1acb      	subs	r3, r1, r3
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800453e:	4b36      	ldr	r3, [pc, #216]	@ (8004618 <UART_SetConfig+0x2d4>)
 8004540:	fba3 2302 	umull	r2, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800454c:	441c      	add	r4, r3
 800454e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004558:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800455c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	1891      	adds	r1, r2, r2
 8004566:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004568:	415b      	adcs	r3, r3
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800456c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004570:	4641      	mov	r1, r8
 8004572:	1851      	adds	r1, r2, r1
 8004574:	6339      	str	r1, [r7, #48]	@ 0x30
 8004576:	4649      	mov	r1, r9
 8004578:	414b      	adcs	r3, r1
 800457a:	637b      	str	r3, [r7, #52]	@ 0x34
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004588:	4659      	mov	r1, fp
 800458a:	00cb      	lsls	r3, r1, #3
 800458c:	4651      	mov	r1, sl
 800458e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004592:	4651      	mov	r1, sl
 8004594:	00ca      	lsls	r2, r1, #3
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	4603      	mov	r3, r0
 800459c:	4642      	mov	r2, r8
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045a4:	464b      	mov	r3, r9
 80045a6:	460a      	mov	r2, r1
 80045a8:	eb42 0303 	adc.w	r3, r2, r3
 80045ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045c4:	460b      	mov	r3, r1
 80045c6:	18db      	adds	r3, r3, r3
 80045c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ca:	4613      	mov	r3, r2
 80045cc:	eb42 0303 	adc.w	r3, r2, r3
 80045d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045da:	f7fc fb35 	bl	8000c48 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004618 <UART_SetConfig+0x2d4>)
 80045e4:	fba3 1302 	umull	r1, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	2164      	movs	r1, #100	@ 0x64
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	3332      	adds	r3, #50	@ 0x32
 80045f6:	4a08      	ldr	r2, [pc, #32]	@ (8004618 <UART_SetConfig+0x2d4>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	f003 0207 	and.w	r2, r3, #7
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4422      	add	r2, r4
 800460a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800460c:	e106      	b.n	800481c <UART_SetConfig+0x4d8>
 800460e:	bf00      	nop
 8004610:	40011000 	.word	0x40011000
 8004614:	40011400 	.word	0x40011400
 8004618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800461c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004620:	2200      	movs	r2, #0
 8004622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004626:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800462a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800462e:	4642      	mov	r2, r8
 8004630:	464b      	mov	r3, r9
 8004632:	1891      	adds	r1, r2, r2
 8004634:	6239      	str	r1, [r7, #32]
 8004636:	415b      	adcs	r3, r3
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
 800463a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463e:	4641      	mov	r1, r8
 8004640:	1854      	adds	r4, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb43 0501 	adc.w	r5, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	00eb      	lsls	r3, r5, #3
 8004652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004656:	00e2      	lsls	r2, r4, #3
 8004658:	4614      	mov	r4, r2
 800465a:	461d      	mov	r5, r3
 800465c:	4643      	mov	r3, r8
 800465e:	18e3      	adds	r3, r4, r3
 8004660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004664:	464b      	mov	r3, r9
 8004666:	eb45 0303 	adc.w	r3, r5, r3
 800466a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800467a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800468a:	4629      	mov	r1, r5
 800468c:	008b      	lsls	r3, r1, #2
 800468e:	4621      	mov	r1, r4
 8004690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004694:	4621      	mov	r1, r4
 8004696:	008a      	lsls	r2, r1, #2
 8004698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800469c:	f7fc fad4 	bl	8000c48 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4b60      	ldr	r3, [pc, #384]	@ (8004828 <UART_SetConfig+0x4e4>)
 80046a6:	fba3 2302 	umull	r2, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	011c      	lsls	r4, r3, #4
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	61b9      	str	r1, [r7, #24]
 80046c8:	415b      	adcs	r3, r3
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d0:	4641      	mov	r1, r8
 80046d2:	1851      	adds	r1, r2, r1
 80046d4:	6139      	str	r1, [r7, #16]
 80046d6:	4649      	mov	r1, r9
 80046d8:	414b      	adcs	r3, r1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e8:	4659      	mov	r1, fp
 80046ea:	00cb      	lsls	r3, r1, #3
 80046ec:	4651      	mov	r1, sl
 80046ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f2:	4651      	mov	r1, sl
 80046f4:	00ca      	lsls	r2, r1, #3
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	4642      	mov	r2, r8
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004704:	464b      	mov	r3, r9
 8004706:	460a      	mov	r2, r1
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	67bb      	str	r3, [r7, #120]	@ 0x78
 800471a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004728:	4649      	mov	r1, r9
 800472a:	008b      	lsls	r3, r1, #2
 800472c:	4641      	mov	r1, r8
 800472e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004732:	4641      	mov	r1, r8
 8004734:	008a      	lsls	r2, r1, #2
 8004736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800473a:	f7fc fa85 	bl	8000c48 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4611      	mov	r1, r2
 8004744:	4b38      	ldr	r3, [pc, #224]	@ (8004828 <UART_SetConfig+0x4e4>)
 8004746:	fba3 2301 	umull	r2, r3, r3, r1
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2264      	movs	r2, #100	@ 0x64
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	1acb      	subs	r3, r1, r3
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	3332      	adds	r3, #50	@ 0x32
 8004758:	4a33      	ldr	r2, [pc, #204]	@ (8004828 <UART_SetConfig+0x4e4>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004764:	441c      	add	r4, r3
 8004766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800476a:	2200      	movs	r2, #0
 800476c:	673b      	str	r3, [r7, #112]	@ 0x70
 800476e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004770:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	1891      	adds	r1, r2, r2
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	415b      	adcs	r3, r3
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004784:	4641      	mov	r1, r8
 8004786:	1851      	adds	r1, r2, r1
 8004788:	6039      	str	r1, [r7, #0]
 800478a:	4649      	mov	r1, r9
 800478c:	414b      	adcs	r3, r1
 800478e:	607b      	str	r3, [r7, #4]
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800479c:	4659      	mov	r1, fp
 800479e:	00cb      	lsls	r3, r1, #3
 80047a0:	4651      	mov	r1, sl
 80047a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a6:	4651      	mov	r1, sl
 80047a8:	00ca      	lsls	r2, r1, #3
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	4642      	mov	r2, r8
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047b6:	464b      	mov	r3, r9
 80047b8:	460a      	mov	r2, r1
 80047ba:	eb42 0303 	adc.w	r3, r2, r3
 80047be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80047ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047d8:	4649      	mov	r1, r9
 80047da:	008b      	lsls	r3, r1, #2
 80047dc:	4641      	mov	r1, r8
 80047de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e2:	4641      	mov	r1, r8
 80047e4:	008a      	lsls	r2, r1, #2
 80047e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047ea:	f7fc fa2d 	bl	8000c48 <__aeabi_uldivmod>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004828 <UART_SetConfig+0x4e4>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2164      	movs	r1, #100	@ 0x64
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	3332      	adds	r3, #50	@ 0x32
 8004806:	4a08      	ldr	r2, [pc, #32]	@ (8004828 <UART_SetConfig+0x4e4>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	f003 020f 	and.w	r2, r3, #15
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4422      	add	r2, r4
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004822:	46bd      	mov	sp, r7
 8004824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004828:	51eb851f 	.word	0x51eb851f

0800482c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004832:	201c      	movs	r0, #28
 8004834:	f003 fce4 	bl	8008200 <pvPortMalloc>
 8004838:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f99b 	bl	8004b86 <vListInitialise>
            else
            {
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4618      	mov	r0, r3
 8004854:	f005 feb4 	bl	800a5c0 <SEGGER_SYSVIEW_ShrinkId>
 8004858:	4603      	mov	r3, r0
 800485a:	4619      	mov	r1, r3
 800485c:	f240 1023 	movw	r0, #291	@ 0x123
 8004860:	f005 fd14 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

            return pxEventBits;
 8004864:	687b      	ldr	r3, [r7, #4]
        }
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 8004870:	b580      	push	{r7, lr}
 8004872:	b090      	sub	sp, #64	@ 0x40
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	637b      	str	r3, [r7, #52]	@ 0x34
        EventBits_t uxReturn, uxControlBits = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	63bb      	str	r3, [r7, #56]	@ 0x38
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8004886:	2300      	movs	r3, #0
 8004888:	633b      	str	r3, [r7, #48]	@ 0x30

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	623b      	str	r3, [r7, #32]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xEventGroupWaitBits+0x34>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048ae:	d30b      	bcc.n	80048c8 <xEventGroupWaitBits+0x58>
    __asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	61fb      	str	r3, [r7, #28]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <xEventGroupWaitBits+0x54>
        configASSERT( uxBitsToWaitFor != 0 );
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <xEventGroupWaitBits+0x76>
    __asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	61bb      	str	r3, [r7, #24]
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	e7fd      	b.n	80048e2 <xEventGroupWaitBits+0x72>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048e6:	f002 f94d 	bl	8006b84 <xTaskGetSchedulerState>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <xEventGroupWaitBits+0x86>
 80048f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <xEventGroupWaitBits+0x8a>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xEventGroupWaitBits+0x8c>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <xEventGroupWaitBits+0xa8>
    __asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	617b      	str	r3, [r7, #20]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xEventGroupWaitBits+0xa4>
        }
        #endif

        vTaskSuspendAll();
 8004918:	f001 fa96 	bl	8005e48 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800491c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004928:	f000 f90b 	bl	8004b42 <prvTestWaitCondition>
 800492c:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( xWaitConditionMet != pdFALSE )
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00e      	beq.n	8004952 <xEventGroupWaitBits+0xe2>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 8004934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
                xTicksToWait = ( TickType_t ) 0;
 8004938:	2300      	movs	r3, #0
 800493a:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d028      	beq.n	8004994 <xEventGroupWaitBits+0x124>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e020      	b.n	8004994 <xEventGroupWaitBits+0x124>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 8004952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <xEventGroupWaitBits+0xf2>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8004958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                xTimeoutOccurred = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004960:	e018      	b.n	8004994 <xEventGroupWaitBits+0x124>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <xEventGroupWaitBits+0x100>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800496e:	63bb      	str	r3, [r7, #56]	@ 0x38
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <xEventGroupWaitBits+0x10e>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004978:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800497c:	63bb      	str	r3, [r7, #56]	@ 0x38
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800497e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004980:	1d18      	adds	r0, r3, #4
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004986:	4313      	orrs	r3, r2
 8004988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800498a:	4619      	mov	r1, r3
 800498c:	f001 fd68 	bl	8006460 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	63fb      	str	r3, [r7, #60]	@ 0x3c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004994:	f001 fa66 	bl	8005e64 <xTaskResumeAll>
 8004998:	6278      	str	r0, [r7, #36]	@ 0x24

        if( xTicksToWait != ( TickType_t ) 0 )
 800499a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800499c:	2b00      	cmp	r3, #0
 800499e:	d031      	beq.n	8004a04 <xEventGroupWaitBits+0x194>
        {
            if( xAlreadyYielded == pdFALSE )
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <xEventGroupWaitBits+0x146>
            {
                taskYIELD_WITHIN_API();
 80049a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a18 <xEventGroupWaitBits+0x1a8>)
 80049a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 80049b6:	f002 fb25 	bl	8007004 <uxTaskResetEventItemValue>
 80049ba:	63f8      	str	r0, [r7, #60]	@ 0x3c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80049bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11a      	bne.n	80049fc <xEventGroupWaitBits+0x18c>
            {
                taskENTER_CRITICAL();
 80049c6:	f003 faed 	bl	8007fa4 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 80049ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80049d6:	f000 f8b4 	bl	8004b42 <prvTestWaitCondition>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <xEventGroupWaitBits+0x184>
                    {
                        if( xClearOnExit != pdFALSE )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <xEventGroupWaitBits+0x184>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80049e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	401a      	ands	r2, r3
 80049f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f2:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 80049f4:	2301      	movs	r3, #1
 80049f6:	633b      	str	r3, [r7, #48]	@ 0x30
                }
                taskEXIT_CRITICAL();
 80049f8:	f003 fb06 	bl	8008008 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80049fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );
 8004a04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a06:	f240 1025 	movw	r0, #293	@ 0x125
 8004a0a:	f005 fc3f 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 8004a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8004a10:	4618      	mov	r0, r3
 8004a12:	3740      	adds	r7, #64	@ 0x40
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08e      	sub	sp, #56	@ 0x38
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004a26:	2300      	movs	r3, #0
 8004a28:	633b      	str	r3, [r7, #48]	@ 0x30
        EventGroup_t * pxEventBits = xEventGroup;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xMatchFound = pdFALSE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	62fb      	str	r3, [r7, #44]	@ 0x2c

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <xEventGroupSetBits+0x34>
    __asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	613b      	str	r3, [r7, #16]
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xEventGroupSetBits+0x30>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a56:	d30b      	bcc.n	8004a70 <xEventGroupSetBits+0x54>
    __asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <xEventGroupSetBits+0x50>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	3304      	adds	r3, #4
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
        pxListEnd = listGET_END_MARKER( pxList );
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	3308      	adds	r3, #8
 8004a7a:	623b      	str	r3, [r7, #32]
        vTaskSuspendAll();
 8004a7c:	f001 f9e4 	bl	8005e48 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a90:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8004a92:	e03c      	b.n	8004b0e <xEventGroupSetBits+0xf2>
            {
                pxNext = listGET_NEXT( pxListItem );
 8004a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	61fb      	str	r3, [r7, #28]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	61bb      	str	r3, [r7, #24]
                xMatchFound = pdFALSE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004aaa:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ab2:	61bb      	str	r3, [r7, #24]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d108      	bne.n	8004ad0 <xEventGroupSetBits+0xb4>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <xEventGroupSetBits+0xc6>
                    {
                        xMatchFound = pdTRUE;
 8004aca:	2301      	movs	r3, #1
 8004acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ace:	e008      	b.n	8004ae2 <xEventGroupSetBits+0xc6>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d101      	bne.n	8004ae2 <xEventGroupSetBits+0xc6>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 8004ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <xEventGroupSetBits+0xee>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <xEventGroupSetBits+0xde>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 8004af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	633b      	str	r3, [r7, #48]	@ 0x30
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	4619      	mov	r1, r3
 8004b04:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004b06:	f001 fe31 	bl	800676c <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	637b      	str	r3, [r7, #52]	@ 0x34
            while( pxListItem != pxListEnd )
 8004b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d1be      	bne.n	8004a94 <xEventGroupSetBits+0x78>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	401a      	ands	r2, r3
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8004b24:	f001 f99e 	bl	8005e64 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );
 8004b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f240 1029 	movw	r0, #297	@ 0x129
 8004b32:	f005 fbab 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxEventBits->uxEventBits;
 8004b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b38:	681b      	ldr	r3, [r3, #0]
    }
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3738      	adds	r7, #56	@ 0x38
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8004b42:	b480      	push	{r7}
 8004b44:	b087      	sub	sp, #28
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d107      	bne.n	8004b68 <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8004b62:	2301      	movs	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	e007      	b.n	8004b78 <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d101      	bne.n	8004b78 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 8004b78:	697b      	ldr	r3, [r7, #20]
    }
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f103 0208 	add.w	r2, r3, #8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b9e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f103 0208 	add.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f103 0208 	add.w	r2, r3, #8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8004bba:	f240 1019 	movw	r0, #281	@ 0x119
 8004bbe:	f005 fb29 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8004bd8:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8004bdc:	f005 fb1a 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bfe:	d103      	bne.n	8004c08 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e00c      	b.n	8004c22 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e002      	b.n	8004c16 <vListInsert+0x2e>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d2f6      	bcs.n	8004c10 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8004c4e:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8004c52:	f005 fadf 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6892      	ldr	r2, [r2, #8]
 8004c74:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6852      	ldr	r2, [r2, #4]
 8004c7e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d103      	bne.n	8004c92 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	1e5a      	subs	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f240 101d 	movw	r0, #285	@ 0x11d
 8004cac:	f005 faee 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <xQueueGenericReset+0x30>
    __asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60fb      	str	r3, [r7, #12]
}
 8004ce6:	bf00      	nop
 8004ce8:	bf00      	nop
 8004cea:	e7fd      	b.n	8004ce8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d05d      	beq.n	8004dae <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d059      	beq.n	8004dae <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d02:	2100      	movs	r1, #0
 8004d04:	fba3 2302 	umull	r2, r3, r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d000      	beq.n	8004d0e <xQueueGenericReset+0x52>
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d14c      	bne.n	8004dae <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8004d14:	f003 f946 	bl	8007fa4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d20:	6939      	ldr	r1, [r7, #16]
 8004d22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	441a      	add	r2, r3
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2200      	movs	r2, #0
 8004d32:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d44:	3b01      	subs	r3, #1
 8004d46:	6939      	ldr	r1, [r7, #16]
 8004d48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	441a      	add	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	22ff      	movs	r2, #255	@ 0xff
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	22ff      	movs	r2, #255	@ 0xff
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d114      	bne.n	8004d94 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01a      	beq.n	8004da8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3310      	adds	r3, #16
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 fc18 	bl	80065ac <xTaskRemoveFromEventList>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d012      	beq.n	8004da8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004d82:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <xQueueGenericReset+0x128>)
 8004d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	e009      	b.n	8004da8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	3310      	adds	r3, #16
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fef4 	bl	8004b86 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	3324      	adds	r3, #36	@ 0x24
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff feef 	bl	8004b86 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004da8:	f003 f92e 	bl	8008008 <vPortExitCritical>
 8004dac:	e001      	b.n	8004db2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10b      	bne.n	8004dd0 <xQueueGenericReset+0x114>
    __asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	60bb      	str	r3, [r7, #8]
}
 8004dca:	bf00      	nop
 8004dcc:	bf00      	nop
 8004dce:	e7fd      	b.n	8004dcc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	2096      	movs	r0, #150	@ 0x96
 8004dd6:	f005 fa59 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8004dda:	697b      	ldr	r3, [r7, #20]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	@ 0x28
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02e      	beq.n	8004e5e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004e00:	2100      	movs	r1, #0
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d000      	beq.n	8004e10 <xQueueGenericCreate+0x28>
 8004e0e:	2101      	movs	r1, #1
 8004e10:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d123      	bne.n	8004e5e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004e1e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8004e22:	d81c      	bhi.n	8004e5e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3350      	adds	r3, #80	@ 0x50
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 f9e4 	bl	8008200 <pvPortMalloc>
 8004e38:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01d      	beq.n	8004e7c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	3350      	adds	r3, #80	@ 0x50
 8004e48:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e4a:	79fa      	ldrb	r2, [r7, #7]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	4613      	mov	r3, r2
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f81e 	bl	8004e98 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004e5c:	e00e      	b.n	8004e7c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <xQueueGenericCreate+0x94>
    __asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	613b      	str	r3, [r7, #16]
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	e7fd      	b.n	8004e78 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 fb9e 	bl	800a5c0 <SEGGER_SYSVIEW_ShrinkId>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4619      	mov	r1, r3
 8004e88:	2098      	movs	r0, #152	@ 0x98
 8004e8a:	f005 f9ff 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
    }
 8004e90:	4618      	mov	r0, r3
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d103      	bne.n	8004eb4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e002      	b.n	8004eba <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	69b8      	ldr	r0, [r7, #24]
 8004eca:	f7ff fef7 	bl	8004cbc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08e      	sub	sp, #56	@ 0x38
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10b      	bne.n	8004f14 <xQueueGenericSend+0x34>
    __asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	e7fd      	b.n	8004f10 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <xQueueGenericSend+0x42>
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <xQueueGenericSend+0x46>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <xQueueGenericSend+0x48>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <xQueueGenericSend+0x64>
    __asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
 8004f42:	e7fd      	b.n	8004f40 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d103      	bne.n	8004f52 <xQueueGenericSend+0x72>
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <xQueueGenericSend+0x76>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <xQueueGenericSend+0x78>
 8004f56:	2300      	movs	r3, #0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10b      	bne.n	8004f74 <xQueueGenericSend+0x94>
    __asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	623b      	str	r3, [r7, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	e7fd      	b.n	8004f70 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f74:	f001 fe06 	bl	8006b84 <xTaskGetSchedulerState>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <xQueueGenericSend+0xa4>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <xQueueGenericSend+0xa8>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <xQueueGenericSend+0xaa>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <xQueueGenericSend+0xc6>
    __asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	61fb      	str	r3, [r7, #28]
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	e7fd      	b.n	8004fa2 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004fa6:	f002 fffd 	bl	8007fa4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d302      	bcc.n	8004fbc <xQueueGenericSend+0xdc>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d12d      	bne.n	8005018 <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fc2:	f000 fb5b 	bl	800567c <prvCopyDataToQueue>
 8004fc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d010      	beq.n	8004ff2 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd2:	3324      	adds	r3, #36	@ 0x24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f001 fae9 	bl	80065ac <xTaskRemoveFromEventList>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d013      	beq.n	8005008 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004fe0:	4b45      	ldr	r3, [pc, #276]	@ (80050f8 <xQueueGenericSend+0x218>)
 8004fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	e00a      	b.n	8005008 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80050f8 <xQueueGenericSend+0x218>)
 8004ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005008:	f002 fffe 	bl	8008008 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 800500c:	2101      	movs	r1, #1
 800500e:	20a1      	movs	r0, #161	@ 0xa1
 8005010:	f005 f93c 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8005014:	2301      	movs	r3, #1
 8005016:	e06b      	b.n	80050f0 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d107      	bne.n	800502e <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800501e:	f002 fff3 	bl	8008008 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8005022:	2100      	movs	r1, #0
 8005024:	20a1      	movs	r0, #161	@ 0xa1
 8005026:	f005 f931 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 800502a:	2300      	movs	r3, #0
 800502c:	e060      	b.n	80050f0 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 800502e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005034:	f107 0314 	add.w	r3, r7, #20
 8005038:	4618      	mov	r0, r3
 800503a:	f001 fc61 	bl	8006900 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800503e:	2301      	movs	r3, #1
 8005040:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005042:	f002 ffe1 	bl	8008008 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005046:	f000 feff 	bl	8005e48 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800504a:	f002 ffab 	bl	8007fa4 <vPortEnterCritical>
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005054:	b25b      	sxtb	r3, r3
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800505a:	d103      	bne.n	8005064 <xQueueGenericSend+0x184>
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800506a:	b25b      	sxtb	r3, r3
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005070:	d103      	bne.n	800507a <xQueueGenericSend+0x19a>
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800507a:	f002 ffc5 	bl	8008008 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800507e:	1d3a      	adds	r2, r7, #4
 8005080:	f107 0314 	add.w	r3, r7, #20
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fc52 	bl	8006930 <xTaskCheckForTimeOut>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d124      	bne.n	80050dc <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005092:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005094:	f000 fbea 	bl	800586c <prvIsQueueFull>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	3310      	adds	r3, #16
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4611      	mov	r1, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f001 f9b2 	bl	8006410 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80050ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050ae:	f000 fb75 	bl	800579c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80050b2:	f000 fed7 	bl	8005e64 <xTaskResumeAll>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f47f af74 	bne.w	8004fa6 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 80050be:	4b0e      	ldr	r3, [pc, #56]	@ (80050f8 <xQueueGenericSend+0x218>)
 80050c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	e76a      	b.n	8004fa6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80050d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050d2:	f000 fb63 	bl	800579c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80050d6:	f000 fec5 	bl	8005e64 <xTaskResumeAll>
 80050da:	e764      	b.n	8004fa6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80050dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050de:	f000 fb5d 	bl	800579c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80050e2:	f000 febf 	bl	8005e64 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 80050e6:	2100      	movs	r1, #0
 80050e8:	20a1      	movs	r0, #161	@ 0xa1
 80050ea:	f005 f8cf 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 80050ee:	2300      	movs	r3, #0
        }
    }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3738      	adds	r7, #56	@ 0x38
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b090      	sub	sp, #64	@ 0x40
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10b      	bne.n	8005128 <xQueueGiveFromISR+0x2c>
    __asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	e7fd      	b.n	8005124 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <xQueueGiveFromISR+0x4c>
    __asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	623b      	str	r3, [r7, #32]
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <xQueueGiveFromISR+0x5c>
 8005150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <xQueueGiveFromISR+0x60>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <xQueueGiveFromISR+0x62>
 800515c:	2300      	movs	r3, #0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <xQueueGiveFromISR+0x7e>
    __asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	61fb      	str	r3, [r7, #28]
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	e7fd      	b.n	8005176 <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800517a:	f002 ffff 	bl	800817c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800517e:	f3ef 8211 	mrs	r2, BASEPRI
 8005182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	61ba      	str	r2, [r7, #24]
 8005194:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005196:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005198:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800519a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80051a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d243      	bcs.n	8005232 <xQueueGiveFromISR+0x136>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ba:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80051bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051c4:	d112      	bne.n	80051ec <xQueueGiveFromISR+0xf0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d02e      	beq.n	800522c <xQueueGiveFromISR+0x130>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d0:	3324      	adds	r3, #36	@ 0x24
 80051d2:	4618      	mov	r0, r3
 80051d4:	f001 f9ea 	bl	80065ac <xTaskRemoveFromEventList>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d026      	beq.n	800522c <xQueueGiveFromISR+0x130>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d023      	beq.n	800522c <xQueueGiveFromISR+0x130>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e01f      	b.n	800522c <xQueueGiveFromISR+0x130>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80051ec:	f000 ff74 	bl	80060d8 <uxTaskGetNumberOfTasks>
 80051f0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80051f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80051f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d917      	bls.n	800522c <xQueueGiveFromISR+0x130>
 80051fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005200:	2b7f      	cmp	r3, #127	@ 0x7f
 8005202:	d10b      	bne.n	800521c <xQueueGiveFromISR+0x120>
    __asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	613b      	str	r3, [r7, #16]
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <xQueueGiveFromISR+0x11c>
 800521c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005220:	3301      	adds	r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	b25a      	sxtb	r2, r3
 8005226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800522c:	2301      	movs	r3, #1
 800522e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005230:	e001      	b.n	8005236 <xQueueGiveFromISR+0x13a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005232:	2300      	movs	r3, #0
 8005234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005238:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005240:	bf00      	nop
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );
 8005242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005244:	4619      	mov	r1, r3
 8005246:	20a3      	movs	r0, #163	@ 0xa3
 8005248:	f005 f820 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800524c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800524e:	4618      	mov	r0, r3
 8005250:	3740      	adds	r7, #64	@ 0x40
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08c      	sub	sp, #48	@ 0x30
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005264:	2300      	movs	r3, #0
 8005266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <xQueueReceive+0x32>
    __asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	623b      	str	r3, [r7, #32]
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	e7fd      	b.n	8005286 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <xQueueReceive+0x40>
 8005290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <xQueueReceive+0x44>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <xQueueReceive+0x46>
 800529c:	2300      	movs	r3, #0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10b      	bne.n	80052ba <xQueueReceive+0x62>
    __asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	61fb      	str	r3, [r7, #28]
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	e7fd      	b.n	80052b6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052ba:	f001 fc63 	bl	8006b84 <xTaskGetSchedulerState>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <xQueueReceive+0x72>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <xQueueReceive+0x76>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <xQueueReceive+0x78>
 80052ce:	2300      	movs	r3, #0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10b      	bne.n	80052ec <xQueueReceive+0x94>
    __asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	61bb      	str	r3, [r7, #24]
}
 80052e6:	bf00      	nop
 80052e8:	bf00      	nop
 80052ea:	e7fd      	b.n	80052e8 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80052ec:	f002 fe5a 	bl	8007fa4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d023      	beq.n	8005344 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005300:	f000 fa26 	bl	8005750 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	1e5a      	subs	r2, r3, #1
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00f      	beq.n	8005334 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	3310      	adds	r3, #16
 8005318:	4618      	mov	r0, r3
 800531a:	f001 f947 	bl	80065ac <xTaskRemoveFromEventList>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005324:	4b42      	ldr	r3, [pc, #264]	@ (8005430 <xQueueReceive+0x1d8>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005334:	f002 fe68 	bl	8008008 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8005338:	2101      	movs	r1, #1
 800533a:	20a4      	movs	r0, #164	@ 0xa4
 800533c:	f004 ffa6 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8005340:	2301      	movs	r3, #1
 8005342:	e071      	b.n	8005428 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d107      	bne.n	800535a <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800534a:	f002 fe5d 	bl	8008008 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800534e:	2100      	movs	r1, #0
 8005350:	20a4      	movs	r0, #164	@ 0xa4
 8005352:	f004 ff9b 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8005356:	2300      	movs	r3, #0
 8005358:	e066      	b.n	8005428 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005360:	f107 0310 	add.w	r3, r7, #16
 8005364:	4618      	mov	r0, r3
 8005366:	f001 facb 	bl	8006900 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800536a:	2301      	movs	r3, #1
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800536e:	f002 fe4b 	bl	8008008 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005372:	f000 fd69 	bl	8005e48 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005376:	f002 fe15 	bl	8007fa4 <vPortEnterCritical>
 800537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005380:	b25b      	sxtb	r3, r3
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005386:	d103      	bne.n	8005390 <xQueueReceive+0x138>
 8005388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005392:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005396:	b25b      	sxtb	r3, r3
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800539c:	d103      	bne.n	80053a6 <xQueueReceive+0x14e>
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053a6:	f002 fe2f 	bl	8008008 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053aa:	1d3a      	adds	r2, r7, #4
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 fabc 	bl	8006930 <xTaskCheckForTimeOut>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d123      	bne.n	8005406 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053c0:	f000 fa3e 	bl	8005840 <prvIsQueueEmpty>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d017      	beq.n	80053fa <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	3324      	adds	r3, #36	@ 0x24
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	4611      	mov	r1, r2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f001 f81c 	bl	8006410 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80053d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053da:	f000 f9df 	bl	800579c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80053de:	f000 fd41 	bl	8005e64 <xTaskResumeAll>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d181      	bne.n	80052ec <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 80053e8:	4b11      	ldr	r3, [pc, #68]	@ (8005430 <xQueueReceive+0x1d8>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	e778      	b.n	80052ec <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80053fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053fc:	f000 f9ce 	bl	800579c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005400:	f000 fd30 	bl	8005e64 <xTaskResumeAll>
 8005404:	e772      	b.n	80052ec <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005408:	f000 f9c8 	bl	800579c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800540c:	f000 fd2a 	bl	8005e64 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005412:	f000 fa15 	bl	8005840 <prvIsQueueEmpty>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	f43f af67 	beq.w	80052ec <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800541e:	2100      	movs	r1, #0
 8005420:	20a4      	movs	r0, #164	@ 0xa4
 8005422:	f004 ff33 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8005426:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3730      	adds	r7, #48	@ 0x30
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08c      	sub	sp, #48	@ 0x30
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800543e:	2300      	movs	r3, #0
 8005440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005446:	2300      	movs	r3, #0
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <xQueueSemaphoreTake+0x34>
    __asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	61bb      	str	r3, [r7, #24]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <xQueueSemaphoreTake+0x54>
    __asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	617b      	str	r3, [r7, #20]
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	e7fd      	b.n	8005484 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005488:	f001 fb7c 	bl	8006b84 <xTaskGetSchedulerState>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <xQueueSemaphoreTake+0x64>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <xQueueSemaphoreTake+0x68>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <xQueueSemaphoreTake+0x6a>
 800549c:	2300      	movs	r3, #0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10b      	bne.n	80054ba <xQueueSemaphoreTake+0x86>
    __asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	613b      	str	r3, [r7, #16]
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
 80054b8:	e7fd      	b.n	80054b6 <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80054ba:	f002 fd73 	bl	8007fa4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c2:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d028      	beq.n	800551c <xQueueSemaphoreTake+0xe8>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	1e5a      	subs	r2, r3, #1
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80054da:	f001 fdad 	bl	8007038 <pvTaskIncrementMutexHeldCount>
 80054de:	4602      	mov	r2, r0
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00f      	beq.n	800550c <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	3310      	adds	r3, #16
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 f85b 	bl	80065ac <xTaskRemoveFromEventList>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80054fc:	4b52      	ldr	r3, [pc, #328]	@ (8005648 <xQueueSemaphoreTake+0x214>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800550c:	f002 fd7c 	bl	8008008 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );
 8005510:	2101      	movs	r1, #1
 8005512:	20a5      	movs	r0, #165	@ 0xa5
 8005514:	f004 feba 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8005518:	2301      	movs	r3, #1
 800551a:	e091      	b.n	8005640 <xQueueSemaphoreTake+0x20c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <xQueueSemaphoreTake+0xfe>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8005522:	f002 fd71 	bl	8008008 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 8005526:	2100      	movs	r1, #0
 8005528:	20a5      	movs	r0, #165	@ 0xa5
 800552a:	f004 feaf 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800552e:	2300      	movs	r3, #0
 8005530:	e086      	b.n	8005640 <xQueueSemaphoreTake+0x20c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <xQueueSemaphoreTake+0x112>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005538:	f107 0308 	add.w	r3, r7, #8
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f9df 	bl	8006900 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005542:	2301      	movs	r3, #1
 8005544:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005546:	f002 fd5f 	bl	8008008 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800554a:	f000 fc7d 	bl	8005e48 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800554e:	f002 fd29 	bl	8007fa4 <vPortEnterCritical>
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005558:	b25b      	sxtb	r3, r3
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800555e:	d103      	bne.n	8005568 <xQueueSemaphoreTake+0x134>
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800556e:	b25b      	sxtb	r3, r3
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005574:	d103      	bne.n	800557e <xQueueSemaphoreTake+0x14a>
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800557e:	f002 fd43 	bl	8008008 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005582:	463a      	mov	r2, r7
 8005584:	f107 0308 	add.w	r3, r7, #8
 8005588:	4611      	mov	r1, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f9d0 	bl	8006930 <xTaskCheckForTimeOut>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d132      	bne.n	80055fc <xQueueSemaphoreTake+0x1c8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005596:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005598:	f000 f952 	bl	8005840 <prvIsQueueEmpty>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d026      	beq.n	80055f0 <xQueueSemaphoreTake+0x1bc>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <xQueueSemaphoreTake+0x18a>
                    {
                        taskENTER_CRITICAL();
 80055aa:	f002 fcfb 	bl	8007fa4 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 fb08 	bl	8006bc8 <xTaskPriorityInherit>
 80055b8:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 80055ba:	f002 fd25 	bl	8008008 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	3324      	adds	r3, #36	@ 0x24
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 ff22 	bl	8006410 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80055cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055ce:	f000 f8e5 	bl	800579c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80055d2:	f000 fc47 	bl	8005e64 <xTaskResumeAll>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f47f af6e 	bne.w	80054ba <xQueueSemaphoreTake+0x86>
                {
                    taskYIELD_WITHIN_API();
 80055de:	4b1a      	ldr	r3, [pc, #104]	@ (8005648 <xQueueSemaphoreTake+0x214>)
 80055e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	e764      	b.n	80054ba <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80055f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055f2:	f000 f8d3 	bl	800579c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80055f6:	f000 fc35 	bl	8005e64 <xTaskResumeAll>
 80055fa:	e75e      	b.n	80054ba <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80055fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055fe:	f000 f8cd 	bl	800579c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005602:	f000 fc2f 	bl	8005e64 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005606:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005608:	f000 f91a 	bl	8005840 <prvIsQueueEmpty>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	f43f af53 	beq.w	80054ba <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8005614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <xQueueSemaphoreTake+0x202>
                    {
                        taskENTER_CRITICAL();
 800561a:	f002 fcc3 	bl	8007fa4 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800561e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005620:	f000 f814 	bl	800564c <prvGetDisinheritPriorityAfterTimeout>
 8005624:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	69f9      	ldr	r1, [r7, #28]
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fc25 	bl	8006e7c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8005632:	f002 fce9 	bl	8008008 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 8005636:	2100      	movs	r1, #0
 8005638:	20a5      	movs	r0, #165	@ 0xa5
 800563a:	f004 fe27 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800563e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3730      	adds	r7, #48	@ 0x30
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d006      	beq.n	800566a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1c3 0305 	rsb	r3, r3, #5
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e001      	b.n	800566e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800566e:	68fb      	ldr	r3, [r7, #12]
    }
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005690:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10d      	bne.n	80056b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d14d      	bne.n	800573e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 fb38 	bl	8006d1c <xTaskPriorityDisinherit>
 80056ac:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	e043      	b.n	800573e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d119      	bne.n	80056f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6858      	ldr	r0, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	461a      	mov	r2, r3
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	f006 f95c 	bl	800b984 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	441a      	add	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d32b      	bcc.n	800573e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	e026      	b.n	800573e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	68d8      	ldr	r0, [r3, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	461a      	mov	r2, r3
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	f006 f942 	bl	800b984 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	425b      	negs	r3, r3
 800570a:	441a      	add	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d207      	bcs.n	800572c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005724:	425b      	negs	r3, r3
 8005726:	441a      	add	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d105      	bne.n	800573e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	3b01      	subs	r3, #1
 800573c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005746:	697b      	ldr	r3, [r7, #20]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d018      	beq.n	8005794 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d303      	bcc.n	8005784 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68d9      	ldr	r1, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	461a      	mov	r2, r3
 800578e:	6838      	ldr	r0, [r7, #0]
 8005790:	f006 f8f8 	bl	800b984 <memcpy>
    }
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80057a4:	f002 fbfe 	bl	8007fa4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057b0:	e011      	b.n	80057d6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d012      	beq.n	80057e0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3324      	adds	r3, #36	@ 0x24
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fef4 	bl	80065ac <xTaskRemoveFromEventList>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80057ca:	f001 f91d 	bl	8006a08 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	dce9      	bgt.n	80057b2 <prvUnlockQueue+0x16>
 80057de:	e000      	b.n	80057e2 <prvUnlockQueue+0x46>
                    break;
 80057e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	22ff      	movs	r2, #255	@ 0xff
 80057e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80057ea:	f002 fc0d 	bl	8008008 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80057ee:	f002 fbd9 	bl	8007fa4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80057fa:	e011      	b.n	8005820 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d012      	beq.n	800582a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3310      	adds	r3, #16
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fecf 	bl	80065ac <xTaskRemoveFromEventList>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005814:	f001 f8f8 	bl	8006a08 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005818:	7bbb      	ldrb	r3, [r7, #14]
 800581a:	3b01      	subs	r3, #1
 800581c:	b2db      	uxtb	r3, r3
 800581e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005824:	2b00      	cmp	r3, #0
 8005826:	dce9      	bgt.n	80057fc <prvUnlockQueue+0x60>
 8005828:	e000      	b.n	800582c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800582a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	22ff      	movs	r2, #255	@ 0xff
 8005830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005834:	f002 fbe8 	bl	8008008 <vPortExitCritical>
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005848:	f002 fbac 	bl	8007fa4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e001      	b.n	800585e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800585e:	f002 fbd3 	bl	8008008 <vPortExitCritical>

    return xReturn;
 8005862:	68fb      	ldr	r3, [r7, #12]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005874:	f002 fb96 	bl	8007fa4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005880:	429a      	cmp	r2, r3
 8005882:	d102      	bne.n	800588a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e001      	b.n	800588e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800588e:	f002 fbbb 	bl	8008008 <vPortExitCritical>

    return xReturn;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	60fb      	str	r3, [r7, #12]
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	e7fd      	b.n	80058c4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d024      	beq.n	8005918 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	e01e      	b.n	8005912 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80058d4:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <vQueueAddToRegistry+0x9c>)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d105      	bne.n	80058f0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <vQueueAddToRegistry+0x9c>)
 80058ea:	4413      	add	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
                    break;
 80058ee:	e013      	b.n	8005918 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <vQueueAddToRegistry+0x70>
 80058f6:	4a10      	ldr	r2, [pc, #64]	@ (8005938 <vQueueAddToRegistry+0x9c>)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4a0c      	ldr	r2, [pc, #48]	@ (8005938 <vQueueAddToRegistry+0x9c>)
 8005908:	4413      	add	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	3301      	adds	r3, #1
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b07      	cmp	r3, #7
 8005916:	d9dd      	bls.n	80058d4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 800592a:	20b6      	movs	r0, #182	@ 0xb6
 800592c:	f004 fc72 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8005930:	bf00      	nop
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000340 	.word	0x20000340

0800593c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800594c:	f002 fb2a 	bl	8007fa4 <vPortEnterCritical>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005956:	b25b      	sxtb	r3, r3
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800595c:	d103      	bne.n	8005966 <vQueueWaitForMessageRestricted+0x2a>
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800596c:	b25b      	sxtb	r3, r3
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005972:	d103      	bne.n	800597c <vQueueWaitForMessageRestricted+0x40>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800597c:	f002 fb44 	bl	8008008 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	3324      	adds	r3, #36	@ 0x24
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fdc1 	bl	8006518 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005996:	6978      	ldr	r0, [r7, #20]
 8005998:	f7ff ff00 	bl	800579c <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 800599c:	20b9      	movs	r0, #185	@ 0xb9
 800599e:	f004 fc39 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80059a2:	bf00      	nop
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b08a      	sub	sp, #40	@ 0x28
 80059ae:	af04      	add	r7, sp, #16
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4618      	mov	r0, r3
 80059be:	f002 fc1f 	bl	8008200 <pvPortMalloc>
 80059c2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d013      	beq.n	80059f2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80059ca:	2058      	movs	r0, #88	@ 0x58
 80059cc:	f002 fc18 	bl	8008200 <pvPortMalloc>
 80059d0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80059d8:	2258      	movs	r2, #88	@ 0x58
 80059da:	2100      	movs	r1, #0
 80059dc:	6978      	ldr	r0, [r7, #20]
 80059de:	f005 ff97 	bl	800b910 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80059e8:	e005      	b.n	80059f6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80059ea:	6938      	ldr	r0, [r7, #16]
 80059ec:	f002 fd3a 	bl	8008464 <vPortFree>
 80059f0:	e001      	b.n	80059f6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00d      	beq.n	8005a18 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059fc:	2300      	movs	r3, #0
 80059fe:	9303      	str	r3, [sp, #12]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	9302      	str	r3, [sp, #8]
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f82d 	bl	8005a72 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8005a18:	697b      	ldr	r3, [r7, #20]
    }
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b088      	sub	sp, #32
 8005a26:	af02      	add	r7, sp, #8
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8005a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff ffb3 	bl	80059aa <prvCreateTask>
 8005a44:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8005a4c:	6938      	ldr	r0, [r7, #16]
 8005a4e:	f000 f8a1 	bl	8005b94 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005a52:	2301      	movs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e002      	b.n	8005a5e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a5c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4619      	mov	r1, r3
 8005a62:	20c2      	movs	r0, #194	@ 0xc2
 8005a64:	f004 fc12 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8005a68:	697b      	ldr	r3, [r7, #20]
    }
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b088      	sub	sp, #32
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	461a      	mov	r2, r3
 8005a8a:	21a5      	movs	r1, #165	@ 0xa5
 8005a8c:	f005 ff40 	bl	800b910 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f023 0307 	bic.w	r3, r3, #7
 8005aa8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <prvInitialiseNewTask+0x5a>
    __asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	617b      	str	r3, [r7, #20]
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01e      	beq.n	8005b10 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	e012      	b.n	8005afe <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	7819      	ldrb	r1, [r3, #0]
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3334      	adds	r3, #52	@ 0x34
 8005ae8:	460a      	mov	r2, r1
 8005aea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d006      	beq.n	8005b06 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3301      	adds	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b09      	cmp	r3, #9
 8005b02:	d9e9      	bls.n	8005ad8 <prvInitialiseNewTask+0x66>
 8005b04:	e000      	b.n	8005b08 <prvInitialiseNewTask+0x96>
            {
                break;
 8005b06:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d90b      	bls.n	8005b2e <prvInitialiseNewTask+0xbc>
    __asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	613b      	str	r3, [r7, #16]
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d901      	bls.n	8005b38 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b34:	2304      	movs	r3, #4
 8005b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b42:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	3304      	adds	r3, #4
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff f83e 	bl	8004bca <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	3318      	adds	r3, #24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff f839 	bl	8004bca <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	f1c3 0205 	rsb	r2, r3, #5
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b6c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	68f9      	ldr	r1, [r7, #12]
 8005b72:	69b8      	ldr	r0, [r7, #24]
 8005b74:	f002 f814 	bl	8007ba0 <pxPortInitialiseStack>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8005b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b88:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b8a:	bf00      	nop
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8005b94:	b5b0      	push	{r4, r5, r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8005b9c:	f002 fa02 	bl	8007fa4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8005ba0:	4b50      	ldr	r3, [pc, #320]	@ (8005ce4 <prvAddNewTaskToReadyList+0x150>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4a4f      	ldr	r2, [pc, #316]	@ (8005ce4 <prvAddNewTaskToReadyList+0x150>)
 8005ba8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8005baa:	4b4f      	ldr	r3, [pc, #316]	@ (8005ce8 <prvAddNewTaskToReadyList+0x154>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d109      	bne.n	8005bc6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8005bb2:	4a4d      	ldr	r2, [pc, #308]	@ (8005ce8 <prvAddNewTaskToReadyList+0x154>)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8005ce4 <prvAddNewTaskToReadyList+0x150>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d110      	bne.n	8005be2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8005bc0:	f000 ff46 	bl	8006a50 <prvInitialiseTaskLists>
 8005bc4:	e00d      	b.n	8005be2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8005bc6:	4b49      	ldr	r3, [pc, #292]	@ (8005cec <prvAddNewTaskToReadyList+0x158>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bce:	4b46      	ldr	r3, [pc, #280]	@ (8005ce8 <prvAddNewTaskToReadyList+0x154>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d802      	bhi.n	8005be2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8005bdc:	4a42      	ldr	r2, [pc, #264]	@ (8005ce8 <prvAddNewTaskToReadyList+0x154>)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8005be2:	4b43      	ldr	r3, [pc, #268]	@ (8005cf0 <prvAddNewTaskToReadyList+0x15c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	4a41      	ldr	r2, [pc, #260]	@ (8005cf0 <prvAddNewTaskToReadyList+0x15c>)
 8005bea:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bec:	4b40      	ldr	r3, [pc, #256]	@ (8005cf0 <prvAddNewTaskToReadyList+0x15c>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d016      	beq.n	8005c28 <prvAddNewTaskToReadyList+0x94>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f004 fbb9 	bl	800a374 <SEGGER_SYSVIEW_OnTaskCreate>
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c12:	461d      	mov	r5, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461c      	mov	r4, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	1ae3      	subs	r3, r4, r3
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	462b      	mov	r3, r5
 8005c24:	f002 fe18 	bl	8008858 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 fc26 	bl	800a47c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	2201      	movs	r2, #1
 8005c36:	409a      	lsls	r2, r3
 8005c38:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf4 <prvAddNewTaskToReadyList+0x160>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf4 <prvAddNewTaskToReadyList+0x160>)
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c46:	492c      	ldr	r1, [pc, #176]	@ (8005cf8 <prvAddNewTaskToReadyList+0x164>)
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	3304      	adds	r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	609a      	str	r2, [r3, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	60da      	str	r2, [r3, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	3204      	adds	r2, #4
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	1d1a      	adds	r2, r3, #4
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	609a      	str	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf8 <prvAddNewTaskToReadyList+0x164>)
 8005c86:	441a      	add	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	615a      	str	r2, [r3, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c90:	4919      	ldr	r1, [pc, #100]	@ (8005cf8 <prvAddNewTaskToReadyList+0x164>)
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ca2:	1c59      	adds	r1, r3, #1
 8005ca4:	4814      	ldr	r0, [pc, #80]	@ (8005cf8 <prvAddNewTaskToReadyList+0x164>)
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4403      	add	r3, r0
 8005cb0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8005cb2:	f002 f9a9 	bl	8008008 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cec <prvAddNewTaskToReadyList+0x158>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00e      	beq.n	8005cdc <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce8 <prvAddNewTaskToReadyList+0x154>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d207      	bcs.n	8005cdc <prvAddNewTaskToReadyList+0x148>
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <prvAddNewTaskToReadyList+0x168>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ce4:	20000458 	.word	0x20000458
 8005ce8:	20000380 	.word	0x20000380
 8005cec:	20000464 	.word	0x20000464
 8005cf0:	20000474 	.word	0x20000474
 8005cf4:	20000460 	.word	0x20000460
 8005cf8:	20000384 	.word	0x20000384
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	@ 0x28
 8005d04:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8005d06:	2301      	movs	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	e011      	b.n	8005d38 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8005d14:	4a1c      	ldr	r2, [pc, #112]	@ (8005d88 <prvCreateIdleTasks+0x88>)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	7819      	ldrb	r1, [r3, #0]
 8005d1c:	1d3a      	adds	r2, r7, #4
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4413      	add	r3, r2
 8005d22:	460a      	mov	r2, r1
 8005d24:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8005d26:	1d3a      	adds	r2, r7, #4
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d006      	beq.n	8005d40 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	3301      	adds	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	ddea      	ble.n	8005d14 <prvCreateIdleTasks+0x14>
 8005d3e:	e000      	b.n	8005d42 <prvCreateIdleTasks+0x42>
        {
            break;
 8005d40:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8005d42:	2300      	movs	r3, #0
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	e015      	b.n	8005d74 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8005d48:	4b10      	ldr	r3, [pc, #64]	@ (8005d8c <prvCreateIdleTasks+0x8c>)
 8005d4a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a0f      	ldr	r2, [pc, #60]	@ (8005d90 <prvCreateIdleTasks+0x90>)
 8005d52:	4413      	add	r3, r2
 8005d54:	1d39      	adds	r1, r7, #4
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2282      	movs	r2, #130	@ 0x82
 8005d60:	6938      	ldr	r0, [r7, #16]
 8005d62:	f7ff fe5e 	bl	8005a22 <xTaskCreate>
 8005d66:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d006      	beq.n	8005d7c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	3301      	adds	r3, #1
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dde6      	ble.n	8005d48 <prvCreateIdleTasks+0x48>
 8005d7a:	e000      	b.n	8005d7e <prvCreateIdleTasks+0x7e>
        {
            break;
 8005d7c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	0800dd30 	.word	0x0800dd30
 8005d8c:	08006a21 	.word	0x08006a21
 8005d90:	2000047c 	.word	0x2000047c

08005d94 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8005d9a:	f7ff ffb1 	bl	8005d00 <prvCreateIdleTasks>
 8005d9e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d102      	bne.n	8005dac <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8005da6:	f001 fba5 	bl	80074f4 <xTimerCreateTimerTask>
 8005daa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d124      	bne.n	8005dfc <vTaskStartScheduler+0x68>
    __asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	60bb      	str	r3, [r7, #8]
}
 8005dc4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <vTaskStartScheduler+0x9c>)
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dcc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005dce:	4b19      	ldr	r3, [pc, #100]	@ (8005e34 <vTaskStartScheduler+0xa0>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dd4:	4b18      	ldr	r3, [pc, #96]	@ (8005e38 <vTaskStartScheduler+0xa4>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005dda:	4b18      	ldr	r3, [pc, #96]	@ (8005e3c <vTaskStartScheduler+0xa8>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b18      	ldr	r3, [pc, #96]	@ (8005e40 <vTaskStartScheduler+0xac>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d102      	bne.n	8005dec <vTaskStartScheduler+0x58>
 8005de6:	f004 faa9 	bl	800a33c <SEGGER_SYSVIEW_OnIdle>
 8005dea:	e004      	b.n	8005df6 <vTaskStartScheduler+0x62>
 8005dec:	4b14      	ldr	r3, [pc, #80]	@ (8005e40 <vTaskStartScheduler+0xac>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f004 fb01 	bl	800a3f8 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8005df6:	f001 ff65 	bl	8007cc4 <xPortStartScheduler>
 8005dfa:	e00f      	b.n	8005e1c <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e02:	d10b      	bne.n	8005e1c <vTaskStartScheduler+0x88>
    __asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	607b      	str	r3, [r7, #4]
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005e1c:	4b09      	ldr	r3, [pc, #36]	@ (8005e44 <vTaskStartScheduler+0xb0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8005e20:	20cd      	movs	r0, #205	@ 0xcd
 8005e22:	f004 f9f7 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 8005e26:	bf00      	nop
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000478 	.word	0x20000478
 8005e34:	20000464 	.word	0x20000464
 8005e38:	2000045c 	.word	0x2000045c
 8005e3c:	2000047c 	.word	0x2000047c
 8005e40:	20000380 	.word	0x20000380
 8005e44:	0800dfe0 	.word	0x0800dfe0

08005e48 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8005e4c:	4b04      	ldr	r3, [pc, #16]	@ (8005e60 <vTaskSuspendAll+0x18>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	4a03      	ldr	r2, [pc, #12]	@ (8005e60 <vTaskSuspendAll+0x18>)
 8005e54:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8005e56:	20cf      	movs	r0, #207	@ 0xcf
 8005e58:	f004 f9dc 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 8005e5c:	bf00      	nop
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000480 	.word	0x20000480

08005e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8005e72:	f002 f897 	bl	8007fa4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8005e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8006064 <xTaskResumeAll+0x200>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <xTaskResumeAll+0x36>
    __asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	603b      	str	r3, [r7, #0]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8005e9a:	4b72      	ldr	r3, [pc, #456]	@ (8006064 <xTaskResumeAll+0x200>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	4a70      	ldr	r2, [pc, #448]	@ (8006064 <xTaskResumeAll+0x200>)
 8005ea2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8006064 <xTaskResumeAll+0x200>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f040 80ce 	bne.w	800604a <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eae:	4b6e      	ldr	r3, [pc, #440]	@ (8006068 <xTaskResumeAll+0x204>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 80c9 	beq.w	800604a <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb8:	e092      	b.n	8005fe0 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005eba:	4b6c      	ldr	r3, [pc, #432]	@ (800606c <xTaskResumeAll+0x208>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	6a12      	ldr	r2, [r2, #32]
 8005ed0:	609a      	str	r2, [r3, #8]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	69d2      	ldr	r2, [r2, #28]
 8005eda:	605a      	str	r2, [r3, #4]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	3318      	adds	r3, #24
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d103      	bne.n	8005ef0 <xTaskResumeAll+0x8c>
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	6a1a      	ldr	r2, [r3, #32]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	1e5a      	subs	r2, r3, #1
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	68d2      	ldr	r2, [r2, #12]
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	6892      	ldr	r2, [r2, #8]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	3304      	adds	r3, #4
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d103      	bne.n	8005f2e <xTaskResumeAll+0xca>
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	2200      	movs	r2, #0
 8005f32:	615a      	str	r2, [r3, #20]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	1e5a      	subs	r2, r3, #1
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f004 fa9b 	bl	800a47c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	4b48      	ldr	r3, [pc, #288]	@ (8006070 <xTaskResumeAll+0x20c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	4a46      	ldr	r2, [pc, #280]	@ (8006070 <xTaskResumeAll+0x20c>)
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5c:	4945      	ldr	r1, [pc, #276]	@ (8006074 <xTaskResumeAll+0x210>)
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	3304      	adds	r3, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	607b      	str	r3, [r7, #4]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	60da      	str	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	3204      	adds	r2, #4
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	1d1a      	adds	r2, r3, #4
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	609a      	str	r2, [r3, #8]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4a36      	ldr	r2, [pc, #216]	@ (8006074 <xTaskResumeAll+0x210>)
 8005f9c:	441a      	add	r2, r3
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	615a      	str	r2, [r3, #20]
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa6:	4933      	ldr	r1, [pc, #204]	@ (8006074 <xTaskResumeAll+0x210>)
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005fb8:	1c59      	adds	r1, r3, #1
 8005fba:	482e      	ldr	r0, [pc, #184]	@ (8006074 <xTaskResumeAll+0x210>)
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4403      	add	r3, r0
 8005fc6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8006078 <xTaskResumeAll+0x214>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d904      	bls.n	8005fe0 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8005fd6:	4a29      	ldr	r2, [pc, #164]	@ (800607c <xTaskResumeAll+0x218>)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2101      	movs	r1, #1
 8005fdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fe0:	4b22      	ldr	r3, [pc, #136]	@ (800606c <xTaskResumeAll+0x208>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f af68 	bne.w	8005eba <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8005ff0:	f000 fdac 	bl	8006b4c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ff4:	4b22      	ldr	r3, [pc, #136]	@ (8006080 <xTaskResumeAll+0x21c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8006000:	f000 f878 	bl	80060f4 <xTaskIncrementTick>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800600a:	4a1c      	ldr	r2, [pc, #112]	@ (800607c <xTaskResumeAll+0x218>)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2101      	movs	r1, #1
 8006010:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	3b01      	subs	r3, #1
 8006018:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ef      	bne.n	8006000 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8006020:	4b17      	ldr	r3, [pc, #92]	@ (8006080 <xTaskResumeAll+0x21c>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8006026:	4a15      	ldr	r2, [pc, #84]	@ (800607c <xTaskResumeAll+0x218>)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006032:	2301      	movs	r3, #1
 8006034:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8006036:	4b10      	ldr	r3, [pc, #64]	@ (8006078 <xTaskResumeAll+0x214>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4b12      	ldr	r3, [pc, #72]	@ (8006084 <xTaskResumeAll+0x220>)
 800603c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800604a:	f001 ffdd 	bl	8008008 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	4619      	mov	r1, r3
 8006052:	20d0      	movs	r0, #208	@ 0xd0
 8006054:	f004 f91a 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8006058:	69bb      	ldr	r3, [r7, #24]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000480 	.word	0x20000480
 8006068:	20000458 	.word	0x20000458
 800606c:	20000418 	.word	0x20000418
 8006070:	20000460 	.word	0x20000460
 8006074:	20000384 	.word	0x20000384
 8006078:	20000380 	.word	0x20000380
 800607c:	2000046c 	.word	0x2000046c
 8006080:	20000468 	.word	0x20000468
 8006084:	e000ed04 	.word	0xe000ed04

08006088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800608e:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <xTaskGetTickCount+0x20>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	20d1      	movs	r0, #209	@ 0xd1
 8006098:	f004 f8f8 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 800609c:	687b      	ldr	r3, [r7, #4]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	2000045c 	.word	0x2000045c

080060ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060b2:	f002 f863 	bl	800817c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80060ba:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <xTaskGetTickCountFromISR+0x28>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	20d2      	movs	r0, #210	@ 0xd2
 80060c4:	f004 f8e2 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80060c8:	683b      	ldr	r3, [r7, #0]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	2000045c 	.word	0x2000045c

080060d8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 80060dc:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <uxTaskGetNumberOfTasks+0x18>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4619      	mov	r1, r3
 80060e2:	20d3      	movs	r0, #211	@ 0xd3
 80060e4:	f004 f8d2 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 80060e8:	4b01      	ldr	r3, [pc, #4]	@ (80060f0 <uxTaskGetNumberOfTasks+0x18>)
 80060ea:	681b      	ldr	r3, [r3, #0]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20000458 	.word	0x20000458

080060f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	@ 0x28
 80060f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80060fe:	4b83      	ldr	r3, [pc, #524]	@ (800630c <xTaskIncrementTick+0x218>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f040 80f3 	bne.w	80062ee <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006108:	4b81      	ldr	r3, [pc, #516]	@ (8006310 <xTaskIncrementTick+0x21c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3301      	adds	r3, #1
 800610e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006110:	4a7f      	ldr	r2, [pc, #508]	@ (8006310 <xTaskIncrementTick+0x21c>)
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d121      	bne.n	8006160 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800611c:	4b7d      	ldr	r3, [pc, #500]	@ (8006314 <xTaskIncrementTick+0x220>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <xTaskIncrementTick+0x4a>
    __asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	607b      	str	r3, [r7, #4]
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	e7fd      	b.n	800613a <xTaskIncrementTick+0x46>
 800613e:	4b75      	ldr	r3, [pc, #468]	@ (8006314 <xTaskIncrementTick+0x220>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	4b74      	ldr	r3, [pc, #464]	@ (8006318 <xTaskIncrementTick+0x224>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a72      	ldr	r2, [pc, #456]	@ (8006314 <xTaskIncrementTick+0x220>)
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	4a72      	ldr	r2, [pc, #456]	@ (8006318 <xTaskIncrementTick+0x224>)
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	4b72      	ldr	r3, [pc, #456]	@ (800631c <xTaskIncrementTick+0x228>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3301      	adds	r3, #1
 8006158:	4a70      	ldr	r2, [pc, #448]	@ (800631c <xTaskIncrementTick+0x228>)
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	f000 fcf6 	bl	8006b4c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006160:	4b6f      	ldr	r3, [pc, #444]	@ (8006320 <xTaskIncrementTick+0x22c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	429a      	cmp	r2, r3
 8006168:	f0c0 80ac 	bcc.w	80062c4 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800616c:	4b69      	ldr	r3, [pc, #420]	@ (8006314 <xTaskIncrementTick+0x220>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d104      	bne.n	8006180 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8006176:	4b6a      	ldr	r3, [pc, #424]	@ (8006320 <xTaskIncrementTick+0x22c>)
 8006178:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800617c:	601a      	str	r2, [r3, #0]
                    break;
 800617e:	e0a1      	b.n	80062c4 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006180:	4b64      	ldr	r3, [pc, #400]	@ (8006314 <xTaskIncrementTick+0x220>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006190:	6a3a      	ldr	r2, [r7, #32]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	429a      	cmp	r2, r3
 8006196:	d203      	bcs.n	80061a0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006198:	4a61      	ldr	r2, [pc, #388]	@ (8006320 <xTaskIncrementTick+0x22c>)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	6013      	str	r3, [r2, #0]
                        break;
 800619e:	e091      	b.n	80062c4 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	68d2      	ldr	r2, [r2, #12]
 80061ae:	609a      	str	r2, [r3, #8]
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	6892      	ldr	r2, [r2, #8]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	3304      	adds	r3, #4
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d103      	bne.n	80061ce <xTaskIncrementTick+0xda>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2200      	movs	r2, #0
 80061d2:	615a      	str	r2, [r3, #20]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	1e5a      	subs	r2, r3, #1
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01e      	beq.n	8006224 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	6a12      	ldr	r2, [r2, #32]
 80061f4:	609a      	str	r2, [r3, #8]
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	69d2      	ldr	r2, [r2, #28]
 80061fe:	605a      	str	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	3318      	adds	r3, #24
 8006208:	429a      	cmp	r2, r3
 800620a:	d103      	bne.n	8006214 <xTaskIncrementTick+0x120>
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	6a1a      	ldr	r2, [r3, #32]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2200      	movs	r2, #0
 8006218:	629a      	str	r2, [r3, #40]	@ 0x28
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	1e5a      	subs	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	4618      	mov	r0, r3
 8006228:	f004 f928 	bl	800a47c <SEGGER_SYSVIEW_OnTaskStartReady>
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	2201      	movs	r2, #1
 8006232:	409a      	lsls	r2, r3
 8006234:	4b3b      	ldr	r3, [pc, #236]	@ (8006324 <xTaskIncrementTick+0x230>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4313      	orrs	r3, r2
 800623a:	4a3a      	ldr	r2, [pc, #232]	@ (8006324 <xTaskIncrementTick+0x230>)
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006242:	4939      	ldr	r1, [pc, #228]	@ (8006328 <xTaskIncrementTick+0x234>)
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	3304      	adds	r3, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60bb      	str	r3, [r7, #8]
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	609a      	str	r2, [r3, #8]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	60da      	str	r2, [r3, #12]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	3204      	adds	r2, #4
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	1d1a      	adds	r2, r3, #4
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	609a      	str	r2, [r3, #8]
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4a29      	ldr	r2, [pc, #164]	@ (8006328 <xTaskIncrementTick+0x234>)
 8006282:	441a      	add	r2, r3
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	615a      	str	r2, [r3, #20]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628c:	4926      	ldr	r1, [pc, #152]	@ (8006328 <xTaskIncrementTick+0x234>)
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800629e:	1c59      	adds	r1, r3, #1
 80062a0:	4821      	ldr	r0, [pc, #132]	@ (8006328 <xTaskIncrementTick+0x234>)
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4403      	add	r3, r0
 80062ac:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b2:	4b1e      	ldr	r3, [pc, #120]	@ (800632c <xTaskIncrementTick+0x238>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b8:	429a      	cmp	r2, r3
 80062ba:	f67f af57 	bls.w	800616c <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80062be:	2301      	movs	r3, #1
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c2:	e753      	b.n	800616c <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80062c4:	4b19      	ldr	r3, [pc, #100]	@ (800632c <xTaskIncrementTick+0x238>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ca:	4917      	ldr	r1, [pc, #92]	@ (8006328 <xTaskIncrementTick+0x234>)
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d901      	bls.n	80062e0 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80062dc:	2301      	movs	r3, #1
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80062e0:	4b13      	ldr	r3, [pc, #76]	@ (8006330 <xTaskIncrementTick+0x23c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ec:	e004      	b.n	80062f8 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80062ee:	4b11      	ldr	r3, [pc, #68]	@ (8006334 <xTaskIncrementTick+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3301      	adds	r3, #1
 80062f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006334 <xTaskIncrementTick+0x240>)
 80062f6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	4619      	mov	r1, r3
 80062fc:	20db      	movs	r0, #219	@ 0xdb
 80062fe:	f003 ffc5 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006304:	4618      	mov	r0, r3
 8006306:	3728      	adds	r7, #40	@ 0x28
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20000480 	.word	0x20000480
 8006310:	2000045c 	.word	0x2000045c
 8006314:	20000410 	.word	0x20000410
 8006318:	20000414 	.word	0x20000414
 800631c:	20000470 	.word	0x20000470
 8006320:	20000478 	.word	0x20000478
 8006324:	20000460 	.word	0x20000460
 8006328:	20000384 	.word	0x20000384
 800632c:	20000380 	.word	0x20000380
 8006330:	2000046c 	.word	0x2000046c
 8006334:	20000468 	.word	0x20000468

08006338 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800633e:	4b2e      	ldr	r3, [pc, #184]	@ (80063f8 <vTaskSwitchContext+0xc0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8006346:	4b2d      	ldr	r3, [pc, #180]	@ (80063fc <vTaskSwitchContext+0xc4>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800634c:	e04f      	b.n	80063ee <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 800634e:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <vTaskSwitchContext+0xc4>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8006354:	4b2a      	ldr	r3, [pc, #168]	@ (8006400 <vTaskSwitchContext+0xc8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	fab3 f383 	clz	r3, r3
 8006360:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8006362:	7afb      	ldrb	r3, [r7, #11]
 8006364:	f1c3 031f 	rsb	r3, r3, #31
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	4926      	ldr	r1, [pc, #152]	@ (8006404 <vTaskSwitchContext+0xcc>)
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <vTaskSwitchContext+0x5e>
    __asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	607b      	str	r3, [r7, #4]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <vTaskSwitchContext+0x5a>
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4a18      	ldr	r2, [pc, #96]	@ (8006404 <vTaskSwitchContext+0xcc>)
 80063a2:	4413      	add	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	605a      	str	r2, [r3, #4]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	3308      	adds	r3, #8
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d103      	bne.n	80063c4 <vTaskSwitchContext+0x8c>
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	4a0f      	ldr	r2, [pc, #60]	@ (8006408 <vTaskSwitchContext+0xd0>)
 80063cc:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80063ce:	4b0f      	ldr	r3, [pc, #60]	@ (800640c <vTaskSwitchContext+0xd4>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <vTaskSwitchContext+0xd0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d102      	bne.n	80063e0 <vTaskSwitchContext+0xa8>
 80063da:	f003 ffaf 	bl	800a33c <SEGGER_SYSVIEW_OnIdle>
 80063de:	e004      	b.n	80063ea <vTaskSwitchContext+0xb2>
 80063e0:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <vTaskSwitchContext+0xd0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f004 f807 	bl	800a3f8 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80063ea:	4b07      	ldr	r3, [pc, #28]	@ (8006408 <vTaskSwitchContext+0xd0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
    }
 80063ee:	bf00      	nop
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000480 	.word	0x20000480
 80063fc:	2000046c 	.word	0x2000046c
 8006400:	20000460 	.word	0x20000460
 8006404:	20000384 	.word	0x20000384
 8006408:	20000380 	.word	0x20000380
 800640c:	2000047c 	.word	0x2000047c

08006410 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006438:	4b08      	ldr	r3, [pc, #32]	@ (800645c <vTaskPlaceOnEventList+0x4c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3318      	adds	r3, #24
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fe fbd1 	bl	8004be8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006446:	2101      	movs	r1, #1
 8006448:	6838      	ldr	r0, [r7, #0]
 800644a:	f000 ffc5 	bl	80073d8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800644e:	20e1      	movs	r0, #225	@ 0xe1
 8006450:	f003 fee0 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000380 	.word	0x20000380

08006460 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <vTaskPlaceOnUnorderedEventList+0x2a>
    __asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	61bb      	str	r3, [r7, #24]
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	e7fd      	b.n	8006486 <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800648a:	4b21      	ldr	r3, [pc, #132]	@ (8006510 <vTaskPlaceOnUnorderedEventList+0xb0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10b      	bne.n	80064aa <vTaskPlaceOnUnorderedEventList+0x4a>
    __asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	617b      	str	r3, [r7, #20]
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	e7fd      	b.n	80064a6 <vTaskPlaceOnUnorderedEventList+0x46>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80064aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006514 <vTaskPlaceOnUnorderedEventList+0xb4>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80064b4:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	4b15      	ldr	r3, [pc, #84]	@ (8006514 <vTaskPlaceOnUnorderedEventList+0xb4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	61da      	str	r2, [r3, #28]
 80064c4:	4b13      	ldr	r3, [pc, #76]	@ (8006514 <vTaskPlaceOnUnorderedEventList+0xb4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	6892      	ldr	r2, [r2, #8]
 80064cc:	621a      	str	r2, [r3, #32]
 80064ce:	4b11      	ldr	r3, [pc, #68]	@ (8006514 <vTaskPlaceOnUnorderedEventList+0xb4>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	3218      	adds	r2, #24
 80064d8:	605a      	str	r2, [r3, #4]
 80064da:	4b0e      	ldr	r3, [pc, #56]	@ (8006514 <vTaskPlaceOnUnorderedEventList+0xb4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f103 0218 	add.w	r2, r3, #24
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006514 <vTaskPlaceOnUnorderedEventList+0xb4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064f8:	2101      	movs	r1, #1
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 ff6c 	bl	80073d8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
 8006500:	20e2      	movs	r0, #226	@ 0xe2
 8006502:	f003 fe87 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 8006506:	bf00      	nop
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000480 	.word	0x20000480
 8006514:	20000380 	.word	0x20000380

08006518 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10b      	bne.n	8006542 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	613b      	str	r3, [r7, #16]
}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	e7fd      	b.n	800653e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	4b17      	ldr	r3, [pc, #92]	@ (80065a8 <vTaskPlaceOnEventListRestricted+0x90>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	61da      	str	r2, [r3, #28]
 8006550:	4b15      	ldr	r3, [pc, #84]	@ (80065a8 <vTaskPlaceOnEventListRestricted+0x90>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	6892      	ldr	r2, [r2, #8]
 8006558:	621a      	str	r2, [r3, #32]
 800655a:	4b13      	ldr	r3, [pc, #76]	@ (80065a8 <vTaskPlaceOnEventListRestricted+0x90>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	3218      	adds	r2, #24
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	4b10      	ldr	r3, [pc, #64]	@ (80065a8 <vTaskPlaceOnEventListRestricted+0x90>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f103 0218 	add.w	r2, r3, #24
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	609a      	str	r2, [r3, #8]
 8006572:	4b0d      	ldr	r3, [pc, #52]	@ (80065a8 <vTaskPlaceOnEventListRestricted+0x90>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	629a      	str	r2, [r3, #40]	@ 0x28
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800658a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800658e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	68b8      	ldr	r0, [r7, #8]
 8006594:	f000 ff20 	bl	80073d8 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8006598:	20e3      	movs	r0, #227	@ 0xe3
 800659a:	f003 fe3b 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000380 	.word	0x20000380

080065ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	@ 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60fb      	str	r3, [r7, #12]
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	e7fd      	b.n	80065d6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	6a12      	ldr	r2, [r2, #32]
 80065e8:	609a      	str	r2, [r3, #8]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	6a3a      	ldr	r2, [r7, #32]
 80065f0:	69d2      	ldr	r2, [r2, #28]
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	3318      	adds	r3, #24
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d103      	bne.n	8006608 <xTaskRemoveFromEventList+0x5c>
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	605a      	str	r2, [r3, #4]
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	2200      	movs	r2, #0
 800660c:	629a      	str	r2, [r3, #40]	@ 0x28
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	1e5a      	subs	r2, r3, #1
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006618:	4b4e      	ldr	r3, [pc, #312]	@ (8006754 <xTaskRemoveFromEventList+0x1a8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d164      	bne.n	80066ea <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	68d2      	ldr	r2, [r2, #12]
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	6a3a      	ldr	r2, [r7, #32]
 8006636:	6892      	ldr	r2, [r2, #8]
 8006638:	605a      	str	r2, [r3, #4]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	3304      	adds	r3, #4
 8006642:	429a      	cmp	r2, r3
 8006644:	d103      	bne.n	800664e <xTaskRemoveFromEventList+0xa2>
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	2200      	movs	r2, #0
 8006652:	615a      	str	r2, [r3, #20]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	1e5a      	subs	r2, r3, #1
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	4618      	mov	r0, r3
 8006662:	f003 ff0b 	bl	800a47c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666a:	2201      	movs	r2, #1
 800666c:	409a      	lsls	r2, r3
 800666e:	4b3a      	ldr	r3, [pc, #232]	@ (8006758 <xTaskRemoveFromEventList+0x1ac>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	4a38      	ldr	r2, [pc, #224]	@ (8006758 <xTaskRemoveFromEventList+0x1ac>)
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667c:	4937      	ldr	r1, [pc, #220]	@ (800675c <xTaskRemoveFromEventList+0x1b0>)
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	3304      	adds	r3, #4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	609a      	str	r2, [r3, #8]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	60da      	str	r2, [r3, #12]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	6a3a      	ldr	r2, [r7, #32]
 80066a2:	3204      	adds	r2, #4
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	1d1a      	adds	r2, r3, #4
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	609a      	str	r2, [r3, #8]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4a28      	ldr	r2, [pc, #160]	@ (800675c <xTaskRemoveFromEventList+0x1b0>)
 80066bc:	441a      	add	r2, r3
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	615a      	str	r2, [r3, #20]
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c6:	4925      	ldr	r1, [pc, #148]	@ (800675c <xTaskRemoveFromEventList+0x1b0>)
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6a3a      	ldr	r2, [r7, #32]
 80066d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80066d8:	1c59      	adds	r1, r3, #1
 80066da:	4820      	ldr	r0, [pc, #128]	@ (800675c <xTaskRemoveFromEventList+0x1b0>)
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4403      	add	r3, r0
 80066e6:	6019      	str	r1, [r3, #0]
 80066e8:	e01b      	b.n	8006722 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006760 <xTaskRemoveFromEventList+0x1b4>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	61bb      	str	r3, [r7, #24]
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	61da      	str	r2, [r3, #28]
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	621a      	str	r2, [r3, #32]
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	3218      	adds	r2, #24
 8006706:	605a      	str	r2, [r3, #4]
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	f103 0218 	add.w	r2, r3, #24
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	609a      	str	r2, [r3, #8]
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	4a12      	ldr	r2, [pc, #72]	@ (8006760 <xTaskRemoveFromEventList+0x1b4>)
 8006716:	629a      	str	r2, [r3, #40]	@ 0x28
 8006718:	4b11      	ldr	r3, [pc, #68]	@ (8006760 <xTaskRemoveFromEventList+0x1b4>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	4a10      	ldr	r2, [pc, #64]	@ (8006760 <xTaskRemoveFromEventList+0x1b4>)
 8006720:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006726:	4b0f      	ldr	r3, [pc, #60]	@ (8006764 <xTaskRemoveFromEventList+0x1b8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672c:	429a      	cmp	r2, r3
 800672e:	d905      	bls.n	800673c <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8006730:	2301      	movs	r3, #1
 8006732:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8006734:	4b0c      	ldr	r3, [pc, #48]	@ (8006768 <xTaskRemoveFromEventList+0x1bc>)
 8006736:	2201      	movs	r2, #1
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e001      	b.n	8006740 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 800673c:	2300      	movs	r3, #0
 800673e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	4619      	mov	r1, r3
 8006744:	20e4      	movs	r0, #228	@ 0xe4
 8006746:	f003 fda1 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800674c:	4618      	mov	r0, r3
 800674e:	3728      	adds	r7, #40	@ 0x28
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000480 	.word	0x20000480
 8006758:	20000460 	.word	0x20000460
 800675c:	20000384 	.word	0x20000384
 8006760:	20000418 	.word	0x20000418
 8006764:	20000380 	.word	0x20000380
 8006768:	2000046c 	.word	0x2000046c

0800676c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8006776:	4b5d      	ldr	r3, [pc, #372]	@ (80068ec <vTaskRemoveFromUnorderedEventList+0x180>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <vTaskRemoveFromUnorderedEventList+0x2a>
    __asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	60fb      	str	r3, [r7, #12]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <vTaskRemoveFromUnorderedEventList+0x58>
    __asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	60bb      	str	r3, [r7, #8]
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <vTaskRemoveFromUnorderedEventList+0x54>
    listREMOVE_ITEM( pxEventListItem );
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6892      	ldr	r2, [r2, #8]
 80067d2:	609a      	str	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6852      	ldr	r2, [r2, #4]
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d103      	bne.n	80067f0 <vTaskRemoveFromUnorderedEventList+0x84>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	611a      	str	r2, [r3, #16]
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	1e5a      	subs	r2, r3, #1
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	68d2      	ldr	r2, [r2, #12]
 800680e:	609a      	str	r2, [r3, #8]
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	6892      	ldr	r2, [r2, #8]
 8006818:	605a      	str	r2, [r3, #4]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	3304      	adds	r3, #4
 8006822:	429a      	cmp	r2, r3
 8006824:	d103      	bne.n	800682e <vTaskRemoveFromUnorderedEventList+0xc2>
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	2200      	movs	r2, #0
 8006832:	615a      	str	r2, [r3, #20]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	1e5a      	subs	r2, r3, #1
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	4618      	mov	r0, r3
 8006842:	f003 fe1b 	bl	800a47c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684a:	2201      	movs	r2, #1
 800684c:	409a      	lsls	r2, r3
 800684e:	4b28      	ldr	r3, [pc, #160]	@ (80068f0 <vTaskRemoveFromUnorderedEventList+0x184>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4313      	orrs	r3, r2
 8006854:	4a26      	ldr	r2, [pc, #152]	@ (80068f0 <vTaskRemoveFromUnorderedEventList+0x184>)
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800685c:	4925      	ldr	r1, [pc, #148]	@ (80068f4 <vTaskRemoveFromUnorderedEventList+0x188>)
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	3304      	adds	r3, #4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	613b      	str	r3, [r7, #16]
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	609a      	str	r2, [r3, #8]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	69fa      	ldr	r2, [r7, #28]
 8006882:	3204      	adds	r2, #4
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	1d1a      	adds	r2, r3, #4
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	609a      	str	r2, [r3, #8]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4a16      	ldr	r2, [pc, #88]	@ (80068f4 <vTaskRemoveFromUnorderedEventList+0x188>)
 800689c:	441a      	add	r2, r3
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	615a      	str	r2, [r3, #20]
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a6:	4913      	ldr	r1, [pc, #76]	@ (80068f4 <vTaskRemoveFromUnorderedEventList+0x188>)
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80068b8:	1c59      	adds	r1, r3, #1
 80068ba:	480e      	ldr	r0, [pc, #56]	@ (80068f4 <vTaskRemoveFromUnorderedEventList+0x188>)
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4403      	add	r3, r0
 80068c6:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068cc:	4b0a      	ldr	r3, [pc, #40]	@ (80068f8 <vTaskRemoveFromUnorderedEventList+0x18c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d902      	bls.n	80068dc <vTaskRemoveFromUnorderedEventList+0x170>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 80068d6:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <vTaskRemoveFromUnorderedEventList+0x190>)
 80068d8:	2201      	movs	r2, #1
 80068da:	601a      	str	r2, [r3, #0]
        }
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
 80068dc:	20e5      	movs	r0, #229	@ 0xe5
 80068de:	f003 fc99 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 80068e2:	bf00      	nop
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000480 	.word	0x20000480
 80068f0:	20000460 	.word	0x20000460
 80068f4:	20000384 	.word	0x20000384
 80068f8:	20000380 	.word	0x20000380
 80068fc:	2000046c 	.word	0x2000046c

08006900 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006908:	4b07      	ldr	r3, [pc, #28]	@ (8006928 <vTaskInternalSetTimeOutState+0x28>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006910:	4b06      	ldr	r3, [pc, #24]	@ (800692c <vTaskInternalSetTimeOutState+0x2c>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8006918:	20e7      	movs	r0, #231	@ 0xe7
 800691a:	f003 fc7b 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000470 	.word	0x20000470
 800692c:	2000045c 	.word	0x2000045c

08006930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	613b      	str	r3, [r7, #16]
}
 8006952:	bf00      	nop
 8006954:	bf00      	nop
 8006956:	e7fd      	b.n	8006954 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	60fb      	str	r3, [r7, #12]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006976:	f001 fb15 	bl	8007fa4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800697a:	4b21      	ldr	r3, [pc, #132]	@ (8006a00 <xTaskCheckForTimeOut+0xd0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006992:	d102      	bne.n	800699a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	e026      	b.n	80069e8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4b19      	ldr	r3, [pc, #100]	@ (8006a04 <xTaskCheckForTimeOut+0xd4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d00a      	beq.n	80069bc <xTaskCheckForTimeOut+0x8c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d305      	bcc.n	80069bc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80069b0:	2301      	movs	r3, #1
 80069b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	e015      	b.n	80069e8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d20b      	bcs.n	80069de <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	1ad2      	subs	r2, r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ff94 	bl	8006900 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	e004      	b.n	80069e8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80069e8:	f001 fb0e 	bl	8008008 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	4619      	mov	r1, r3
 80069f0:	20e8      	movs	r0, #232	@ 0xe8
 80069f2:	f003 fc4b 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80069f6:	69fb      	ldr	r3, [r7, #28]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3720      	adds	r7, #32
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	2000045c 	.word	0x2000045c
 8006a04:	20000470 	.word	0x20000470

08006a08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8006a0c:	4b03      	ldr	r3, [pc, #12]	@ (8006a1c <vTaskMissedYield+0x14>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8006a12:	20e9      	movs	r0, #233	@ 0xe9
 8006a14:	f003 fbfe 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
}
 8006a18:	bf00      	nop
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	2000046c 	.word	0x2000046c

08006a20 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006a28:	f000 f852 	bl	8006ad0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8006a2c:	4b06      	ldr	r3, [pc, #24]	@ (8006a48 <prvIdleTask+0x28>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d9f9      	bls.n	8006a28 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006a34:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <prvIdleTask+0x2c>)
 8006a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006a44:	e7f0      	b.n	8006a28 <prvIdleTask+0x8>
 8006a46:	bf00      	nop
 8006a48:	20000384 	.word	0x20000384
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a56:	2300      	movs	r3, #0
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	e00c      	b.n	8006a76 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4a12      	ldr	r2, [pc, #72]	@ (8006ab0 <prvInitialiseTaskLists+0x60>)
 8006a68:	4413      	add	r3, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe f88b 	bl	8004b86 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3301      	adds	r3, #1
 8006a74:	607b      	str	r3, [r7, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d9ef      	bls.n	8006a5c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006a7c:	480d      	ldr	r0, [pc, #52]	@ (8006ab4 <prvInitialiseTaskLists+0x64>)
 8006a7e:	f7fe f882 	bl	8004b86 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006a82:	480d      	ldr	r0, [pc, #52]	@ (8006ab8 <prvInitialiseTaskLists+0x68>)
 8006a84:	f7fe f87f 	bl	8004b86 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006a88:	480c      	ldr	r0, [pc, #48]	@ (8006abc <prvInitialiseTaskLists+0x6c>)
 8006a8a:	f7fe f87c 	bl	8004b86 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006a8e:	480c      	ldr	r0, [pc, #48]	@ (8006ac0 <prvInitialiseTaskLists+0x70>)
 8006a90:	f7fe f879 	bl	8004b86 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006a94:	480b      	ldr	r0, [pc, #44]	@ (8006ac4 <prvInitialiseTaskLists+0x74>)
 8006a96:	f7fe f876 	bl	8004b86 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <prvInitialiseTaskLists+0x78>)
 8006a9c:	4a05      	ldr	r2, [pc, #20]	@ (8006ab4 <prvInitialiseTaskLists+0x64>)
 8006a9e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <prvInitialiseTaskLists+0x7c>)
 8006aa2:	4a05      	ldr	r2, [pc, #20]	@ (8006ab8 <prvInitialiseTaskLists+0x68>)
 8006aa4:	601a      	str	r2, [r3, #0]
}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000384 	.word	0x20000384
 8006ab4:	200003e8 	.word	0x200003e8
 8006ab8:	200003fc 	.word	0x200003fc
 8006abc:	20000418 	.word	0x20000418
 8006ac0:	2000042c 	.word	0x2000042c
 8006ac4:	20000444 	.word	0x20000444
 8006ac8:	20000410 	.word	0x20000410
 8006acc:	20000414 	.word	0x20000414

08006ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad6:	e019      	b.n	8006b0c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8006ad8:	f001 fa64 	bl	8007fa4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006adc:	4b10      	ldr	r3, [pc, #64]	@ (8006b20 <prvCheckTasksWaitingTermination+0x50>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe f8b8 	bl	8004c5e <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8006aee:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <prvCheckTasksWaitingTermination+0x54>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	4a0b      	ldr	r2, [pc, #44]	@ (8006b24 <prvCheckTasksWaitingTermination+0x54>)
 8006af6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8006af8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b28 <prvCheckTasksWaitingTermination+0x58>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	4a0a      	ldr	r2, [pc, #40]	@ (8006b28 <prvCheckTasksWaitingTermination+0x58>)
 8006b00:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8006b02:	f001 fa81 	bl	8008008 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f810 	bl	8006b2c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b0c:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <prvCheckTasksWaitingTermination+0x58>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e1      	bne.n	8006ad8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	2000042c 	.word	0x2000042c
 8006b24:	20000458 	.word	0x20000458
 8006b28:	20000440 	.word	0x20000440

08006b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f001 fc93 	bl	8008464 <vPortFree>
            vPortFree( pxTCB );
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fc90 	bl	8008464 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b50:	4b0a      	ldr	r3, [pc, #40]	@ (8006b7c <prvResetNextTaskUnblockTime+0x30>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006b5a:	4b09      	ldr	r3, [pc, #36]	@ (8006b80 <prvResetNextTaskUnblockTime+0x34>)
 8006b5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b60:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006b62:	e005      	b.n	8006b70 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b64:	4b05      	ldr	r3, [pc, #20]	@ (8006b7c <prvResetNextTaskUnblockTime+0x30>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a04      	ldr	r2, [pc, #16]	@ (8006b80 <prvResetNextTaskUnblockTime+0x34>)
 8006b6e:	6013      	str	r3, [r2, #0]
}
 8006b70:	bf00      	nop
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000410 	.word	0x20000410
 8006b80:	20000478 	.word	0x20000478

08006b84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8006b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc0 <xTaskGetSchedulerState+0x3c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d102      	bne.n	8006b98 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006b92:	2301      	movs	r3, #1
 8006b94:	607b      	str	r3, [r7, #4]
 8006b96:	e008      	b.n	8006baa <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006b98:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc4 <xTaskGetSchedulerState+0x40>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	607b      	str	r3, [r7, #4]
 8006ba4:	e001      	b.n	8006baa <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4619      	mov	r1, r3
 8006bae:	20f5      	movs	r0, #245	@ 0xf5
 8006bb0:	f003 fb6c 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006bb4:	687b      	ldr	r3, [r7, #4]
    }
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20000464 	.word	0x20000464
 8006bc4:	20000480 	.word	0x20000480

08006bc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 808d 	beq.w	8006cfa <xTaskPriorityInherit+0x132>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be4:	4b4a      	ldr	r3, [pc, #296]	@ (8006d10 <xTaskPriorityInherit+0x148>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d27c      	bcs.n	8006ce8 <xTaskPriorityInherit+0x120>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	db06      	blt.n	8006c04 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8006bf6:	4b46      	ldr	r3, [pc, #280]	@ (8006d10 <xTaskPriorityInherit+0x148>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfc:	f1c3 0205 	rsb	r2, r3, #5
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	6959      	ldr	r1, [r3, #20]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4a3f      	ldr	r2, [pc, #252]	@ (8006d14 <xTaskPriorityInherit+0x14c>)
 8006c16:	4413      	add	r3, r2
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	d15d      	bne.n	8006cd8 <xTaskPriorityInherit+0x110>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe f81c 	bl	8004c5e <uxListRemove>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	2201      	movs	r2, #1
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	43da      	mvns	r2, r3
 8006c38:	4b37      	ldr	r3, [pc, #220]	@ (8006d18 <xTaskPriorityInherit+0x150>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	4a36      	ldr	r2, [pc, #216]	@ (8006d18 <xTaskPriorityInherit+0x150>)
 8006c40:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c42:	4b33      	ldr	r3, [pc, #204]	@ (8006d10 <xTaskPriorityInherit+0x148>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f003 fc14 	bl	800a47c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	2201      	movs	r2, #1
 8006c5a:	409a      	lsls	r2, r3
 8006c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006d18 <xTaskPriorityInherit+0x150>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	4a2d      	ldr	r2, [pc, #180]	@ (8006d18 <xTaskPriorityInherit+0x150>)
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6a:	492a      	ldr	r1, [pc, #168]	@ (8006d14 <xTaskPriorityInherit+0x14c>)
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	3304      	adds	r3, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	609a      	str	r2, [r3, #8]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	3204      	adds	r2, #4
 8006c92:	605a      	str	r2, [r3, #4]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1d1a      	adds	r2, r3, #4
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8006d14 <xTaskPriorityInherit+0x14c>)
 8006caa:	441a      	add	r2, r3
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	615a      	str	r2, [r3, #20]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb4:	4917      	ldr	r1, [pc, #92]	@ (8006d14 <xTaskPriorityInherit+0x14c>)
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	4812      	ldr	r0, [pc, #72]	@ (8006d14 <xTaskPriorityInherit+0x14c>)
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4403      	add	r3, r0
 8006cd4:	6019      	str	r1, [r3, #0]
 8006cd6:	e004      	b.n	8006ce2 <xTaskPriorityInherit+0x11a>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <xTaskPriorityInherit+0x148>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e008      	b.n	8006cfa <xTaskPriorityInherit+0x132>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cec:	4b08      	ldr	r3, [pc, #32]	@ (8006d10 <xTaskPriorityInherit+0x148>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d201      	bcs.n	8006cfa <xTaskPriorityInherit+0x132>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	20f6      	movs	r0, #246	@ 0xf6
 8006d00:	f003 fac4 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006d04:	697b      	ldr	r3, [r7, #20]
    }
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000380 	.word	0x20000380
 8006d14:	20000384 	.word	0x20000384
 8006d18:	20000460 	.word	0x20000460

08006d1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8094 	beq.w	8006e5c <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006d34:	4b4e      	ldr	r3, [pc, #312]	@ (8006e70 <xTaskPriorityDisinherit+0x154>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d00b      	beq.n	8006d56 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	613b      	str	r3, [r7, #16]
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10b      	bne.n	8006d76 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60fb      	str	r3, [r7, #12]
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	e7fd      	b.n	8006d72 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d7a:	1e5a      	subs	r2, r3, #1
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d067      	beq.n	8006e5c <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d163      	bne.n	8006e5c <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fd ff60 	bl	8004c5e <uxListRemove>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da8:	2201      	movs	r2, #1
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	43da      	mvns	r2, r3
 8006db0:	4b30      	ldr	r3, [pc, #192]	@ (8006e74 <xTaskPriorityDisinherit+0x158>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4013      	ands	r3, r2
 8006db6:	4a2f      	ldr	r2, [pc, #188]	@ (8006e74 <xTaskPriorityDisinherit+0x158>)
 8006db8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc6:	f1c3 0205 	rsb	r2, r3, #5
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f003 fb53 	bl	800a47c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	2201      	movs	r2, #1
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	4b25      	ldr	r3, [pc, #148]	@ (8006e74 <xTaskPriorityDisinherit+0x158>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	4a23      	ldr	r2, [pc, #140]	@ (8006e74 <xTaskPriorityDisinherit+0x158>)
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dec:	4922      	ldr	r1, [pc, #136]	@ (8006e78 <xTaskPriorityDisinherit+0x15c>)
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	3304      	adds	r3, #4
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	60da      	str	r2, [r3, #12]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	3204      	adds	r2, #4
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	1d1a      	adds	r2, r3, #4
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	609a      	str	r2, [r3, #8]
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4a13      	ldr	r2, [pc, #76]	@ (8006e78 <xTaskPriorityDisinherit+0x15c>)
 8006e2c:	441a      	add	r2, r3
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	615a      	str	r2, [r3, #20]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e36:	4910      	ldr	r1, [pc, #64]	@ (8006e78 <xTaskPriorityDisinherit+0x15c>)
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	480b      	ldr	r0, [pc, #44]	@ (8006e78 <xTaskPriorityDisinherit+0x15c>)
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4403      	add	r3, r0
 8006e56:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	20f7      	movs	r0, #247	@ 0xf7
 8006e62:	f003 fa13 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006e66:	69fb      	ldr	r3, [r7, #28]
    }
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000380 	.word	0x20000380
 8006e74:	20000460 	.word	0x20000460
 8006e78:	20000384 	.word	0x20000384

08006e7c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	@ 0x28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80aa 	beq.w	8006fea <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10b      	bne.n	8006eb6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	613b      	str	r3, [r7, #16]
}
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
 8006eb4:	e7fd      	b.n	8006eb2 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d902      	bls.n	8006ec6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec4:	e002      	b.n	8006ecc <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eca:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	f000 8089 	beq.w	8006fea <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	f040 8083 	bne.w	8006fea <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8006ee4:	4b44      	ldr	r3, [pc, #272]	@ (8006ff8 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6a3a      	ldr	r2, [r7, #32]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d10b      	bne.n	8006f06 <vTaskPriorityDisinheritAfterTimeout+0x8a>
    __asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	60fb      	str	r3, [r7, #12]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <vTaskPriorityDisinheritAfterTimeout+0x86>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f10:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	db04      	blt.n	8006f24 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	f1c3 0205 	rsb	r2, r3, #5
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	6959      	ldr	r1, [r3, #20]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4a32      	ldr	r2, [pc, #200]	@ (8006ffc <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8006f34:	4413      	add	r3, r2
 8006f36:	4299      	cmp	r1, r3
 8006f38:	d157      	bne.n	8006fea <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fd fe8d 	bl	8004c5e <uxListRemove>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <vTaskPriorityDisinheritAfterTimeout+0xe4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	2201      	movs	r2, #1
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	43da      	mvns	r2, r3
 8006f56:	4b2a      	ldr	r3, [pc, #168]	@ (8007000 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	4a28      	ldr	r2, [pc, #160]	@ (8007000 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8006f5e:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f003 fa8a 	bl	800a47c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	409a      	lsls	r2, r3
 8006f70:	4b23      	ldr	r3, [pc, #140]	@ (8007000 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	4a22      	ldr	r2, [pc, #136]	@ (8007000 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f7e:	491f      	ldr	r1, [pc, #124]	@ (8006ffc <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8006f80:	4613      	mov	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	609a      	str	r2, [r3, #8]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	6a3a      	ldr	r2, [r7, #32]
 8006fa4:	3204      	adds	r2, #4
 8006fa6:	605a      	str	r2, [r3, #4]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	1d1a      	adds	r2, r3, #4
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	609a      	str	r2, [r3, #8]
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8006ffc <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8006fbe:	441a      	add	r2, r3
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	615a      	str	r2, [r3, #20]
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc8:	490c      	ldr	r1, [pc, #48]	@ (8006ffc <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6a3a      	ldr	r2, [r7, #32]
 8006fd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006fda:	1c59      	adds	r1, r3, #1
 8006fdc:	4807      	ldr	r0, [pc, #28]	@ (8006ffc <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4403      	add	r3, r0
 8006fe8:	6019      	str	r1, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
 8006fea:	20f8      	movs	r0, #248	@ 0xf8
 8006fec:	f003 f912 	bl	800a214 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8006ff0:	bf00      	nop
 8006ff2:	3728      	adds	r7, #40	@ 0x28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000380 	.word	0x20000380
 8006ffc:	20000384 	.word	0x20000384
 8007000:	20000460 	.word	0x20000460

08007004 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800700a:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <uxTaskResetEventItemValue+0x30>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8007012:	4b08      	ldr	r3, [pc, #32]	@ (8007034 <uxTaskResetEventItemValue+0x30>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007018:	4b06      	ldr	r3, [pc, #24]	@ (8007034 <uxTaskResetEventItemValue+0x30>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f1c2 0205 	rsb	r2, r2, #5
 8007020:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	20fd      	movs	r0, #253	@ 0xfd
 8007026:	f003 f931 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxReturn;
 800702a:	687b      	ldr	r3, [r7, #4]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20000380 	.word	0x20000380

08007038 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800703e:	4b0c      	ldr	r3, [pc, #48]	@ (8007070 <pvTaskIncrementMutexHeldCount+0x38>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4618      	mov	r0, r3
 8007058:	f003 fab2 	bl	800a5c0 <SEGGER_SYSVIEW_ShrinkId>
 800705c:	4603      	mov	r3, r0
 800705e:	4619      	mov	r1, r3
 8007060:	20fe      	movs	r0, #254	@ 0xfe
 8007062:	f003 f913 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxTCB;
 8007066:	687b      	ldr	r3, [r7, #4]
    }
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000380 	.word	0x20000380

08007074 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <ulTaskGenericNotifyTake+0x2e>
    __asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	613b      	str	r3, [r7, #16]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <ulTaskGenericNotifyTake+0x2a>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80070a2:	f7fe fed1 	bl	8005e48 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 80070a6:	f000 ff7d 	bl	8007fa4 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 80070aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007168 <ulTaskGenericNotifyTake+0xf4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	3214      	adds	r2, #20
 80070b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <ulTaskGenericNotifyTake+0x5e>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80070ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007168 <ulTaskGenericNotifyTake+0xf4>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	3354      	adds	r3, #84	@ 0x54
 80070c4:	2201      	movs	r2, #1
 80070c6:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <ulTaskGenericNotifyTake+0x5e>
                    {
                        xShouldBlock = pdTRUE;
 80070ce:	2301      	movs	r3, #1
 80070d0:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80070d2:	f000 ff99 	bl	8008008 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d103      	bne.n	80070e4 <ulTaskGenericNotifyTake+0x70>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070dc:	2101      	movs	r1, #1
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f97a 	bl	80073d8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80070e4:	f7fe febe 	bl	8005e64 <xTaskResumeAll>
 80070e8:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d10a      	bne.n	8007106 <ulTaskGenericNotifyTake+0x92>
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d107      	bne.n	8007106 <ulTaskGenericNotifyTake+0x92>
        {
            taskYIELD_WITHIN_API();
 80070f6:	4b1d      	ldr	r3, [pc, #116]	@ (800716c <ulTaskGenericNotifyTake+0xf8>)
 80070f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8007106:	f000 ff4d 	bl	8007fa4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800710a:	4b17      	ldr	r3, [pc, #92]	@ (8007168 <ulTaskGenericNotifyTake+0xf4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	3214      	adds	r2, #20
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d012      	beq.n	8007144 <ulTaskGenericNotifyTake+0xd0>
            {
                if( xClearCountOnExit != pdFALSE )
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d007      	beq.n	8007134 <ulTaskGenericNotifyTake+0xc0>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8007124:	4b10      	ldr	r3, [pc, #64]	@ (8007168 <ulTaskGenericNotifyTake+0xf4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	3214      	adds	r2, #20
 800712c:	2100      	movs	r1, #0
 800712e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007132:	e007      	b.n	8007144 <ulTaskGenericNotifyTake+0xd0>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8007134:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <ulTaskGenericNotifyTake+0xf4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	1e51      	subs	r1, r2, #1
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	3214      	adds	r2, #20
 8007140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8007144:	4b08      	ldr	r3, [pc, #32]	@ (8007168 <ulTaskGenericNotifyTake+0xf4>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	3354      	adds	r3, #84	@ 0x54
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8007152:	f000 ff59 	bl	8008008 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );
 8007156:	6979      	ldr	r1, [r7, #20]
 8007158:	20ff      	movs	r0, #255	@ 0xff
 800715a:	f003 f897 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return ulReturn;
 800715e:	697b      	ldr	r3, [r7, #20]
    }
 8007160:	4618      	mov	r0, r3
 8007162:	3720      	adds	r7, #32
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000380 	.word	0x20000380
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8007170:	b580      	push	{r7, lr}
 8007172:	b08e      	sub	sp, #56	@ 0x38
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800717e:	2301      	movs	r3, #1
 8007180:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <xTaskGenericNotify+0x30>
    __asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	623b      	str	r3, [r7, #32]
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	e7fd      	b.n	800719c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <xTaskGenericNotify+0x4e>
    __asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	61fb      	str	r3, [r7, #28]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80071c2:	f000 feef 	bl	8007fa4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80071c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d006      	beq.n	80071da <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	3214      	adds	r2, #20
 80071d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80071da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4413      	add	r3, r2
 80071e0:	3354      	adds	r3, #84	@ 0x54
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80071e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4413      	add	r3, r2
 80071ee:	3354      	adds	r3, #84	@ 0x54
 80071f0:	2202      	movs	r2, #2
 80071f2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d83b      	bhi.n	8007272 <xTaskGenericNotify+0x102>
 80071fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007200 <xTaskGenericNotify+0x90>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007293 	.word	0x08007293
 8007204:	08007215 	.word	0x08007215
 8007208:	08007231 	.word	0x08007231
 800720c:	08007249 	.word	0x08007249
 8007210:	08007257 	.word	0x08007257
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	3214      	adds	r2, #20
 800721a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	ea42 0103 	orr.w	r1, r2, r3
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	3214      	adds	r2, #20
 800722a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800722e:	e033      	b.n	8007298 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	3214      	adds	r2, #20
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	3214      	adds	r2, #20
 8007242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007246:	e027      	b.n	8007298 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	3214      	adds	r2, #20
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007254:	e020      	b.n	8007298 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007256:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800725a:	2b02      	cmp	r3, #2
 800725c:	d006      	beq.n	800726c <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	3214      	adds	r2, #20
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800726a:	e015      	b.n	8007298 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800726c:	2300      	movs	r3, #0
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8007270:	e012      	b.n	8007298 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007272:	4b54      	ldr	r3, [pc, #336]	@ (80073c4 <xTaskGenericNotify+0x254>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00d      	beq.n	8007296 <xTaskGenericNotify+0x126>
    __asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	61bb      	str	r3, [r7, #24]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <xTaskGenericNotify+0x11e>
                    break;
 8007292:	bf00      	nop
 8007294:	e000      	b.n	8007298 <xTaskGenericNotify+0x128>

                    break;
 8007296:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800729c:	2b01      	cmp	r3, #1
 800729e:	f040 8083 	bne.w	80073a8 <xTaskGenericNotify+0x238>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ae:	68d2      	ldr	r2, [r2, #12]
 80072b0:	609a      	str	r2, [r3, #8]
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b8:	6892      	ldr	r2, [r2, #8]
 80072ba:	605a      	str	r2, [r3, #4]
 80072bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	3304      	adds	r3, #4
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d103      	bne.n	80072d0 <xTaskGenericNotify+0x160>
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	605a      	str	r2, [r3, #4]
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	2200      	movs	r2, #0
 80072d4:	615a      	str	r2, [r3, #20]
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	1e5a      	subs	r2, r3, #1
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	4618      	mov	r0, r3
 80072e4:	f003 f8ca 	bl	800a47c <SEGGER_SYSVIEW_OnTaskStartReady>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ec:	2201      	movs	r2, #1
 80072ee:	409a      	lsls	r2, r3
 80072f0:	4b35      	ldr	r3, [pc, #212]	@ (80073c8 <xTaskGenericNotify+0x258>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	4a34      	ldr	r2, [pc, #208]	@ (80073c8 <xTaskGenericNotify+0x258>)
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fe:	4933      	ldr	r1, [pc, #204]	@ (80073cc <xTaskGenericNotify+0x25c>)
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	3304      	adds	r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007314:	609a      	str	r2, [r3, #8]
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	60da      	str	r2, [r3, #12]
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007324:	3204      	adds	r2, #4
 8007326:	605a      	str	r2, [r3, #4]
 8007328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	609a      	str	r2, [r3, #8]
 8007330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4a23      	ldr	r2, [pc, #140]	@ (80073cc <xTaskGenericNotify+0x25c>)
 800733e:	441a      	add	r2, r3
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	615a      	str	r2, [r3, #20]
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007348:	4920      	ldr	r1, [pc, #128]	@ (80073cc <xTaskGenericNotify+0x25c>)
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007358:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800735a:	1c59      	adds	r1, r3, #1
 800735c:	481b      	ldr	r0, [pc, #108]	@ (80073cc <xTaskGenericNotify+0x25c>)
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4403      	add	r3, r0
 8007368:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00b      	beq.n	800738a <xTaskGenericNotify+0x21a>
    __asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	617b      	str	r3, [r7, #20]
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	e7fd      	b.n	8007386 <xTaskGenericNotify+0x216>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 800738a:	4b11      	ldr	r3, [pc, #68]	@ (80073d0 <xTaskGenericNotify+0x260>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	429a      	cmp	r2, r3
 8007396:	d207      	bcs.n	80073a8 <xTaskGenericNotify+0x238>
 8007398:	4b0e      	ldr	r3, [pc, #56]	@ (80073d4 <xTaskGenericNotify+0x264>)
 800739a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80073a8:	f000 fe2e 	bl	8008008 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 80073ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ae:	4619      	mov	r1, r3
 80073b0:	f240 1001 	movw	r0, #257	@ 0x101
 80073b4:	f002 ff6a 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80073b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80073ba:	4618      	mov	r0, r3
 80073bc:	3738      	adds	r7, #56	@ 0x38
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	2000045c 	.word	0x2000045c
 80073c8:	20000460 	.word	0x20000460
 80073cc:	20000384 	.word	0x20000384
 80073d0:	20000380 	.word	0x20000380
 80073d4:	e000ed04 	.word	0xe000ed04

080073d8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80073e2:	4b3d      	ldr	r3, [pc, #244]	@ (80074d8 <prvAddCurrentTaskToDelayedList+0x100>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80073e8:	4b3c      	ldr	r3, [pc, #240]	@ (80074dc <prvAddCurrentTaskToDelayedList+0x104>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80073ee:	4b3c      	ldr	r3, [pc, #240]	@ (80074e0 <prvAddCurrentTaskToDelayedList+0x108>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f4:	4b3b      	ldr	r3, [pc, #236]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd fc2f 	bl	8004c5e <uxListRemove>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10b      	bne.n	800741e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007406:	4b37      	ldr	r3, [pc, #220]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	2201      	movs	r2, #1
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43da      	mvns	r2, r3
 8007414:	4b34      	ldr	r3, [pc, #208]	@ (80074e8 <prvAddCurrentTaskToDelayedList+0x110>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4013      	ands	r3, r2
 800741a:	4a33      	ldr	r2, [pc, #204]	@ (80074e8 <prvAddCurrentTaskToDelayedList+0x110>)
 800741c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007424:	d124      	bne.n	8007470 <prvAddCurrentTaskToDelayedList+0x98>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d021      	beq.n	8007470 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742c:	4b2f      	ldr	r3, [pc, #188]	@ (80074ec <prvAddCurrentTaskToDelayedList+0x114>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	4b2c      	ldr	r3, [pc, #176]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	609a      	str	r2, [r3, #8]
 800743a:	4b2a      	ldr	r3, [pc, #168]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	6892      	ldr	r2, [r2, #8]
 8007442:	60da      	str	r2, [r3, #12]
 8007444:	4b27      	ldr	r3, [pc, #156]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	3204      	adds	r2, #4
 800744e:	605a      	str	r2, [r3, #4]
 8007450:	4b24      	ldr	r3, [pc, #144]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	1d1a      	adds	r2, r3, #4
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	609a      	str	r2, [r3, #8]
 800745a:	4b22      	ldr	r3, [pc, #136]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a23      	ldr	r2, [pc, #140]	@ (80074ec <prvAddCurrentTaskToDelayedList+0x114>)
 8007460:	615a      	str	r2, [r3, #20]
 8007462:	4b22      	ldr	r3, [pc, #136]	@ (80074ec <prvAddCurrentTaskToDelayedList+0x114>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3301      	adds	r3, #1
 8007468:	4a20      	ldr	r2, [pc, #128]	@ (80074ec <prvAddCurrentTaskToDelayedList+0x114>)
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800746e:	e02e      	b.n	80074ce <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4413      	add	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007478:	4b1a      	ldr	r3, [pc, #104]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	429a      	cmp	r2, r3
 8007486:	d20d      	bcs.n	80074a4 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8007488:	4b16      	ldr	r3, [pc, #88]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2104      	movs	r1, #4
 800748e:	4618      	mov	r0, r3
 8007490:	f003 f836 	bl	800a500 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8007494:	4b13      	ldr	r3, [pc, #76]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3304      	adds	r3, #4
 800749a:	4619      	mov	r1, r3
 800749c:	6978      	ldr	r0, [r7, #20]
 800749e:	f7fd fba3 	bl	8004be8 <vListInsert>
}
 80074a2:	e014      	b.n	80074ce <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80074a4:	4b0f      	ldr	r3, [pc, #60]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2104      	movs	r1, #4
 80074aa:	4618      	mov	r0, r3
 80074ac:	f003 f828 	bl	800a500 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80074b0:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	69b8      	ldr	r0, [r7, #24]
 80074ba:	f7fd fb95 	bl	8004be8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80074be:	4b0c      	ldr	r3, [pc, #48]	@ (80074f0 <prvAddCurrentTaskToDelayedList+0x118>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d202      	bcs.n	80074ce <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 80074c8:	4a09      	ldr	r2, [pc, #36]	@ (80074f0 <prvAddCurrentTaskToDelayedList+0x118>)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6013      	str	r3, [r2, #0]
}
 80074ce:	bf00      	nop
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	2000045c 	.word	0x2000045c
 80074dc:	20000410 	.word	0x20000410
 80074e0:	20000414 	.word	0x20000414
 80074e4:	20000380 	.word	0x20000380
 80074e8:	20000460 	.word	0x20000460
 80074ec:	20000444 	.word	0x20000444
 80074f0:	20000478 	.word	0x20000478

080074f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80074fe:	f000 fb19 	bl	8007b34 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007502:	4b15      	ldr	r3, [pc, #84]	@ (8007558 <xTimerCreateTimerTask+0x64>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800750a:	4b14      	ldr	r3, [pc, #80]	@ (800755c <xTimerCreateTimerTask+0x68>)
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	2302      	movs	r3, #2
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	2300      	movs	r3, #0
 8007514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007518:	4911      	ldr	r1, [pc, #68]	@ (8007560 <xTimerCreateTimerTask+0x6c>)
 800751a:	4812      	ldr	r0, [pc, #72]	@ (8007564 <xTimerCreateTimerTask+0x70>)
 800751c:	f7fe fa81 	bl	8005a22 <xTaskCreate>
 8007520:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10b      	bne.n	8007540 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	603b      	str	r3, [r7, #0]
}
 800753a:	bf00      	nop
 800753c:	bf00      	nop
 800753e:	e7fd      	b.n	800753c <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4619      	mov	r1, r3
 8007544:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8007548:	f002 fea0 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800754c:	687b      	ldr	r3, [r7, #4]
    }
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	200004b4 	.word	0x200004b4
 800755c:	200004b8 	.word	0x200004b8
 8007560:	0800dd38 	.word	0x0800dd38
 8007564:	08007789 	.word	0x08007789

08007568 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007576:	202c      	movs	r0, #44	@ 0x2c
 8007578:	f000 fe42 	bl	8008200 <pvPortMalloc>
 800757c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00d      	beq.n	80075a0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 f80f 	bl	80075be <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f003 f80c 	bl	800a5c0 <SEGGER_SYSVIEW_ShrinkId>
 80075a8:	4603      	mov	r3, r0
 80075aa:	4619      	mov	r1, r3
 80075ac:	f240 1009 	movw	r0, #265	@ 0x109
 80075b0:	f002 fe6c 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

            return pxNewTimer;
 80075b4:	697b      	ldr	r3, [r7, #20]
        }
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10b      	bne.n	80075ea <prvInitialiseNewTimer+0x2c>
    __asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	617b      	str	r3, [r7, #20]
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	e7fd      	b.n	80075e6 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80075ea:	f000 faa3 	bl	8007b34 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	6a3a      	ldr	r2, [r7, #32]
 8007604:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	3304      	adds	r3, #4
 800760a:	4618      	mov	r0, r3
 800760c:	f7fd fadd 	bl	8004bca <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800761c:	f043 0304 	orr.w	r3, r3, #4
 8007620:	b2da      	uxtb	r2, r3
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8007628:	bf00      	nop
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	@ 0x28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800763e:	2300      	movs	r3, #0
 8007640:	627b      	str	r3, [r7, #36]	@ 0x24

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <xTimerGenericCommandFromTask+0x30>
    __asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	623b      	str	r3, [r7, #32]
}
 800765a:	bf00      	nop
 800765c:	bf00      	nop
 800765e:	e7fd      	b.n	800765c <xTimerGenericCommandFromTask+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007660:	4b1f      	ldr	r3, [pc, #124]	@ (80076e0 <xTimerGenericCommandFromTask+0xb0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d02f      	beq.n	80076c8 <xTimerGenericCommandFromTask+0x98>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	61bb      	str	r3, [r7, #24]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b05      	cmp	r3, #5
 8007678:	dd0b      	ble.n	8007692 <xTimerGenericCommandFromTask+0x62>
    __asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	61fb      	str	r3, [r7, #28]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <xTimerGenericCommandFromTask+0x5e>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b05      	cmp	r3, #5
 8007696:	dc17      	bgt.n	80076c8 <xTimerGenericCommandFromTask+0x98>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007698:	f7ff fa74 	bl	8006b84 <xTaskGetSchedulerState>
 800769c:	4603      	mov	r3, r0
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d109      	bne.n	80076b6 <xTimerGenericCommandFromTask+0x86>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076a2:	4b0f      	ldr	r3, [pc, #60]	@ (80076e0 <xTimerGenericCommandFromTask+0xb0>)
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	f107 0110 	add.w	r1, r7, #16
 80076aa:	2300      	movs	r3, #0
 80076ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ae:	f7fd fc17 	bl	8004ee0 <xQueueGenericSend>
 80076b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80076b4:	e008      	b.n	80076c8 <xTimerGenericCommandFromTask+0x98>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076b6:	4b0a      	ldr	r3, [pc, #40]	@ (80076e0 <xTimerGenericCommandFromTask+0xb0>)
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f107 0110 	add.w	r1, r7, #16
 80076be:	2300      	movs	r3, #0
 80076c0:	2200      	movs	r2, #0
 80076c2:	f7fd fc0d 	bl	8004ee0 <xQueueGenericSend>
 80076c6:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	4619      	mov	r1, r3
 80076cc:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 80076d0:	f002 fddc 	bl	800a28c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80076d6:	4618      	mov	r0, r3
 80076d8:	3728      	adds	r7, #40	@ 0x28
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	200004b4 	.word	0x200004b4

080076e4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80076f0:	e008      	b.n	8007704 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	4413      	add	r3, r2
 80076fa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	699a      	ldr	r2, [r3, #24]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	18d1      	adds	r1, r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f8df 	bl	80078d4 <prvInsertTimerInActiveList>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1ea      	bne.n	80076f2 <prvReloadTimer+0xe>
        }
    }
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007732:	4b14      	ldr	r3, [pc, #80]	@ (8007784 <prvProcessExpiredTimer+0x5c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3304      	adds	r3, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f7fd fa8c 	bl	8004c5e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff ffc3 	bl	80076e4 <prvReloadTimer>
 800775e:	e008      	b.n	8007772 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007766:	f023 0301 	bic.w	r3, r3, #1
 800776a:	b2da      	uxtb	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	4798      	blx	r3
    }
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	200004ac 	.word	0x200004ac

08007788 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007790:	f107 0308 	add.w	r3, r7, #8
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f859 	bl	800784c <prvGetNextExpireTime>
 800779a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f805 	bl	80077b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80077a6:	f000 f8d7 	bl	8007958 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077aa:	bf00      	nop
 80077ac:	e7f0      	b.n	8007790 <prvTimerTask+0x8>
	...

080077b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80077ba:	f7fe fb45 	bl	8005e48 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077be:	f107 0308 	add.w	r3, r7, #8
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 f866 	bl	8007894 <prvSampleTimeNow>
 80077c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d130      	bne.n	8007832 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10a      	bne.n	80077ec <prvProcessTimerOrBlockTask+0x3c>
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d806      	bhi.n	80077ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80077de:	f7fe fb41 	bl	8005e64 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077e2:	68f9      	ldr	r1, [r7, #12]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff ff9f 	bl	8007728 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80077ea:	e024      	b.n	8007836 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d008      	beq.n	8007804 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80077f2:	4b13      	ldr	r3, [pc, #76]	@ (8007840 <prvProcessTimerOrBlockTask+0x90>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <prvProcessTimerOrBlockTask+0x50>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <prvProcessTimerOrBlockTask+0x52>
 8007800:	2300      	movs	r3, #0
 8007802:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007804:	4b0f      	ldr	r3, [pc, #60]	@ (8007844 <prvProcessTimerOrBlockTask+0x94>)
 8007806:	6818      	ldr	r0, [r3, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	4619      	mov	r1, r3
 8007812:	f7fe f893 	bl	800593c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007816:	f7fe fb25 	bl	8005e64 <xTaskResumeAll>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10a      	bne.n	8007836 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8007820:	4b09      	ldr	r3, [pc, #36]	@ (8007848 <prvProcessTimerOrBlockTask+0x98>)
 8007822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	f3bf 8f6f 	isb	sy
    }
 8007830:	e001      	b.n	8007836 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007832:	f7fe fb17 	bl	8005e64 <xTaskResumeAll>
    }
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200004b0 	.word	0x200004b0
 8007844:	200004b4 	.word	0x200004b4
 8007848:	e000ed04 	.word	0xe000ed04

0800784c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007854:	4b0e      	ldr	r3, [pc, #56]	@ (8007890 <prvGetNextExpireTime+0x44>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <prvGetNextExpireTime+0x16>
 800785e:	2201      	movs	r2, #1
 8007860:	e000      	b.n	8007864 <prvGetNextExpireTime+0x18>
 8007862:	2200      	movs	r2, #0
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007870:	4b07      	ldr	r3, [pc, #28]	@ (8007890 <prvGetNextExpireTime+0x44>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e001      	b.n	8007880 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007880:	68fb      	ldr	r3, [r7, #12]
    }
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	200004ac 	.word	0x200004ac

08007894 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800789c:	f7fe fbf4 	bl	8006088 <xTaskGetTickCount>
 80078a0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80078a2:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <prvSampleTimeNow+0x3c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d205      	bcs.n	80078b8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80078ac:	f000 f91c 	bl	8007ae8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	e002      	b.n	80078be <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80078be:	4a04      	ldr	r2, [pc, #16]	@ (80078d0 <prvSampleTimeNow+0x3c>)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80078c4:	68fb      	ldr	r3, [r7, #12]
    }
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	200004bc 	.word	0x200004bc

080078d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d812      	bhi.n	8007920 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	1ad2      	subs	r2, r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	429a      	cmp	r2, r3
 8007906:	d302      	bcc.n	800790e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007908:	2301      	movs	r3, #1
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	e01b      	b.n	8007946 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800790e:	4b10      	ldr	r3, [pc, #64]	@ (8007950 <prvInsertTimerInActiveList+0x7c>)
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3304      	adds	r3, #4
 8007916:	4619      	mov	r1, r3
 8007918:	4610      	mov	r0, r2
 800791a:	f7fd f965 	bl	8004be8 <vListInsert>
 800791e:	e012      	b.n	8007946 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d206      	bcs.n	8007936 <prvInsertTimerInActiveList+0x62>
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	429a      	cmp	r2, r3
 800792e:	d302      	bcc.n	8007936 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e007      	b.n	8007946 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007936:	4b07      	ldr	r3, [pc, #28]	@ (8007954 <prvInsertTimerInActiveList+0x80>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7fd f951 	bl	8004be8 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007946:	697b      	ldr	r3, [r7, #20]
    }
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	200004b0 	.word	0x200004b0
 8007954:	200004ac 	.word	0x200004ac

08007958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800795e:	f107 0308 	add.w	r3, r7, #8
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	605a      	str	r2, [r3, #4]
 8007968:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800796a:	e0a9      	b.n	8007ac0 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f2c0 80a6 	blt.w	8007ac0 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d004      	beq.n	800798a <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7fd f96a 	bl	8004c5e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800798a:	1d3b      	adds	r3, r7, #4
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff ff81 	bl	8007894 <prvSampleTimeNow>
 8007992:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	3b01      	subs	r3, #1
 8007998:	2b08      	cmp	r3, #8
 800799a:	f200 808e 	bhi.w	8007aba <prvProcessReceivedCommands+0x162>
 800799e:	a201      	add	r2, pc, #4	@ (adr r2, 80079a4 <prvProcessReceivedCommands+0x4c>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079c9 	.word	0x080079c9
 80079a8:	080079c9 	.word	0x080079c9
 80079ac:	08007a31 	.word	0x08007a31
 80079b0:	08007a45 	.word	0x08007a45
 80079b4:	08007a91 	.word	0x08007a91
 80079b8:	080079c9 	.word	0x080079c9
 80079bc:	080079c9 	.word	0x080079c9
 80079c0:	08007a31 	.word	0x08007a31
 80079c4:	08007a45 	.word	0x08007a45
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079ce:	f043 0301 	orr.w	r3, r3, #1
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	18d1      	adds	r1, r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	69f8      	ldr	r0, [r7, #28]
 80079e8:	f7ff ff74 	bl	80078d4 <prvInsertTimerInActiveList>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d065      	beq.n	8007abe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	4413      	add	r3, r2
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	69f8      	ldr	r0, [r7, #28]
 8007a0e:	f7ff fe69 	bl	80076e4 <prvReloadTimer>
 8007a12:	e008      	b.n	8007a26 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	69f8      	ldr	r0, [r7, #28]
 8007a2c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007a2e:	e046      	b.n	8007abe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a36:	f023 0301 	bic.w	r3, r3, #1
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007a42:	e03d      	b.n	8007ac0 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <prvProcessReceivedCommands+0x124>
    __asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	617b      	str	r3, [r7, #20]
}
 8007a76:	bf00      	nop
 8007a78:	bf00      	nop
 8007a7a:	e7fd      	b.n	8007a78 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	18d1      	adds	r1, r2, r3
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	69f8      	ldr	r0, [r7, #28]
 8007a8a:	f7ff ff23 	bl	80078d4 <prvInsertTimerInActiveList>
                        break;
 8007a8e:	e017      	b.n	8007ac0 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8007a9e:	69f8      	ldr	r0, [r7, #28]
 8007aa0:	f000 fce0 	bl	8008464 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007aa4:	e00c      	b.n	8007ac0 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aac:	f023 0301 	bic.w	r3, r3, #1
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007ab8:	e002      	b.n	8007ac0 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007aba:	bf00      	nop
 8007abc:	e000      	b.n	8007ac0 <prvProcessReceivedCommands+0x168>
                        break;
 8007abe:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8007ac0:	4b08      	ldr	r3, [pc, #32]	@ (8007ae4 <prvProcessReceivedCommands+0x18c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f107 0108 	add.w	r1, r7, #8
 8007ac8:	2200      	movs	r2, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fd fbc4 	bl	8005258 <xQueueReceive>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f47f af4a 	bne.w	800796c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200004b4 	.word	0x200004b4

08007ae8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007aee:	e009      	b.n	8007b04 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007af0:	4b0e      	ldr	r3, [pc, #56]	@ (8007b2c <prvSwitchTimerLists+0x44>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007afa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007afe:	6838      	ldr	r0, [r7, #0]
 8007b00:	f7ff fe12 	bl	8007728 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b04:	4b09      	ldr	r3, [pc, #36]	@ (8007b2c <prvSwitchTimerLists+0x44>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f0      	bne.n	8007af0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007b0e:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <prvSwitchTimerLists+0x44>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007b14:	4b06      	ldr	r3, [pc, #24]	@ (8007b30 <prvSwitchTimerLists+0x48>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a04      	ldr	r2, [pc, #16]	@ (8007b2c <prvSwitchTimerLists+0x44>)
 8007b1a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007b1c:	4a04      	ldr	r2, [pc, #16]	@ (8007b30 <prvSwitchTimerLists+0x48>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6013      	str	r3, [r2, #0]
    }
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	200004ac 	.word	0x200004ac
 8007b30:	200004b0 	.word	0x200004b0

08007b34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007b38:	f000 fa34 	bl	8007fa4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007b3c:	4b12      	ldr	r3, [pc, #72]	@ (8007b88 <prvCheckForValidListAndQueue+0x54>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d11d      	bne.n	8007b80 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007b44:	4811      	ldr	r0, [pc, #68]	@ (8007b8c <prvCheckForValidListAndQueue+0x58>)
 8007b46:	f7fd f81e 	bl	8004b86 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007b4a:	4811      	ldr	r0, [pc, #68]	@ (8007b90 <prvCheckForValidListAndQueue+0x5c>)
 8007b4c:	f7fd f81b 	bl	8004b86 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007b50:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <prvCheckForValidListAndQueue+0x60>)
 8007b52:	4a0e      	ldr	r2, [pc, #56]	@ (8007b8c <prvCheckForValidListAndQueue+0x58>)
 8007b54:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007b56:	4b10      	ldr	r3, [pc, #64]	@ (8007b98 <prvCheckForValidListAndQueue+0x64>)
 8007b58:	4a0d      	ldr	r2, [pc, #52]	@ (8007b90 <prvCheckForValidListAndQueue+0x5c>)
 8007b5a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	210c      	movs	r1, #12
 8007b60:	200a      	movs	r0, #10
 8007b62:	f7fd f941 	bl	8004de8 <xQueueGenericCreate>
 8007b66:	4603      	mov	r3, r0
 8007b68:	4a07      	ldr	r2, [pc, #28]	@ (8007b88 <prvCheckForValidListAndQueue+0x54>)
 8007b6a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007b6c:	4b06      	ldr	r3, [pc, #24]	@ (8007b88 <prvCheckForValidListAndQueue+0x54>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b74:	4b04      	ldr	r3, [pc, #16]	@ (8007b88 <prvCheckForValidListAndQueue+0x54>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4908      	ldr	r1, [pc, #32]	@ (8007b9c <prvCheckForValidListAndQueue+0x68>)
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fd fe8e 	bl	800589c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007b80:	f000 fa42 	bl	8008008 <vPortExitCritical>
    }
 8007b84:	bf00      	nop
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	200004b4 	.word	0x200004b4
 8007b8c:	20000484 	.word	0x20000484
 8007b90:	20000498 	.word	0x20000498
 8007b94:	200004ac 	.word	0x200004ac
 8007b98:	200004b0 	.word	0x200004b0
 8007b9c:	0800dd40 	.word	0x0800dd40

08007ba0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3b04      	subs	r3, #4
 8007bb0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007bb8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3b04      	subs	r3, #4
 8007bbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3b04      	subs	r3, #4
 8007bce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8007c04 <pxPortInitialiseStack+0x64>)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3b14      	subs	r3, #20
 8007bda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3b04      	subs	r3, #4
 8007be6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f06f 0202 	mvn.w	r2, #2
 8007bee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3b20      	subs	r3, #32
 8007bf4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	08007c09 	.word	0x08007c09

08007c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007c12:	4b13      	ldr	r3, [pc, #76]	@ (8007c60 <prvTaskExitError+0x58>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c1a:	d00b      	beq.n	8007c34 <prvTaskExitError+0x2c>
    __asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	60fb      	str	r3, [r7, #12]
}
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <prvTaskExitError+0x28>
    __asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	60bb      	str	r3, [r7, #8]
}
 8007c46:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007c48:	bf00      	nop
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0fc      	beq.n	8007c4a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	2000000c 	.word	0x2000000c
	...

08007c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007c70:	4b07      	ldr	r3, [pc, #28]	@ (8007c90 <pxCurrentTCBConst2>)
 8007c72:	6819      	ldr	r1, [r3, #0]
 8007c74:	6808      	ldr	r0, [r1, #0]
 8007c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7a:	f380 8809 	msr	PSP, r0
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f04f 0000 	mov.w	r0, #0
 8007c86:	f380 8811 	msr	BASEPRI, r0
 8007c8a:	4770      	bx	lr
 8007c8c:	f3af 8000 	nop.w

08007c90 <pxCurrentTCBConst2>:
 8007c90:	20000380 	.word	0x20000380
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop

08007c98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007c98:	4808      	ldr	r0, [pc, #32]	@ (8007cbc <prvPortStartFirstTask+0x24>)
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	6800      	ldr	r0, [r0, #0]
 8007c9e:	f380 8808 	msr	MSP, r0
 8007ca2:	f04f 0000 	mov.w	r0, #0
 8007ca6:	f380 8814 	msr	CONTROL, r0
 8007caa:	b662      	cpsie	i
 8007cac:	b661      	cpsie	f
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	df00      	svc	0
 8007cb8:	bf00      	nop
 8007cba:	0000      	.short	0x0000
 8007cbc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop

08007cc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08c      	sub	sp, #48	@ 0x30
 8007cc8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cca:	4b69      	ldr	r3, [pc, #420]	@ (8007e70 <xPortStartScheduler+0x1ac>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a69      	ldr	r2, [pc, #420]	@ (8007e74 <xPortStartScheduler+0x1b0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d10b      	bne.n	8007cec <xPortStartScheduler+0x28>
    __asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	623b      	str	r3, [r7, #32]
}
 8007ce6:	bf00      	nop
 8007ce8:	bf00      	nop
 8007cea:	e7fd      	b.n	8007ce8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cec:	4b60      	ldr	r3, [pc, #384]	@ (8007e70 <xPortStartScheduler+0x1ac>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a61      	ldr	r2, [pc, #388]	@ (8007e78 <xPortStartScheduler+0x1b4>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d10b      	bne.n	8007d0e <xPortStartScheduler+0x4a>
    __asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	e7fd      	b.n	8007d0a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8007d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8007e7c <xPortStartScheduler+0x1b8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8007d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d16:	332c      	adds	r3, #44	@ 0x2c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a59      	ldr	r2, [pc, #356]	@ (8007e80 <xPortStartScheduler+0x1bc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00b      	beq.n	8007d38 <xPortStartScheduler+0x74>
    __asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	61fb      	str	r3, [r7, #28]
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8007d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d3a:	3338      	adds	r3, #56	@ 0x38
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a51      	ldr	r2, [pc, #324]	@ (8007e84 <xPortStartScheduler+0x1c0>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <xPortStartScheduler+0x98>
    __asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	61bb      	str	r3, [r7, #24]
}
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
 8007d5a:	e7fd      	b.n	8007d58 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d60:	4b49      	ldr	r3, [pc, #292]	@ (8007e88 <xPortStartScheduler+0x1c4>)
 8007d62:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8007d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6e:	22ff      	movs	r2, #255	@ 0xff
 8007d70:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	4b41      	ldr	r3, [pc, #260]	@ (8007e8c <xPortStartScheduler+0x1c8>)
 8007d86:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8007d88:	4b40      	ldr	r3, [pc, #256]	@ (8007e8c <xPortStartScheduler+0x1c8>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10b      	bne.n	8007da8 <xPortStartScheduler+0xe4>
    __asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	617b      	str	r3, [r7, #20]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	43db      	mvns	r3, r3
 8007dae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d013      	beq.n	8007dde <xPortStartScheduler+0x11a>
    __asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	613b      	str	r3, [r7, #16]
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de6:	2b80      	cmp	r3, #128	@ 0x80
 8007de8:	d0f1      	beq.n	8007dce <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d103      	bne.n	8007df8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8007df0:	4b27      	ldr	r3, [pc, #156]	@ (8007e90 <xPortStartScheduler+0x1cc>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e004      	b.n	8007e02 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f1c3 0307 	rsb	r3, r3, #7
 8007dfe:	4a24      	ldr	r2, [pc, #144]	@ (8007e90 <xPortStartScheduler+0x1cc>)
 8007e00:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e02:	4b23      	ldr	r3, [pc, #140]	@ (8007e90 <xPortStartScheduler+0x1cc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	4a21      	ldr	r2, [pc, #132]	@ (8007e90 <xPortStartScheduler+0x1cc>)
 8007e0a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e0c:	4b20      	ldr	r3, [pc, #128]	@ (8007e90 <xPortStartScheduler+0x1cc>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e14:	4a1e      	ldr	r2, [pc, #120]	@ (8007e90 <xPortStartScheduler+0x1cc>)
 8007e16:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007e20:	4b1c      	ldr	r3, [pc, #112]	@ (8007e94 <xPortStartScheduler+0x1d0>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1b      	ldr	r2, [pc, #108]	@ (8007e94 <xPortStartScheduler+0x1d0>)
 8007e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e2a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007e2c:	4b19      	ldr	r3, [pc, #100]	@ (8007e94 <xPortStartScheduler+0x1d0>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a18      	ldr	r2, [pc, #96]	@ (8007e94 <xPortStartScheduler+0x1d0>)
 8007e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e36:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8007e38:	4b17      	ldr	r3, [pc, #92]	@ (8007e98 <xPortStartScheduler+0x1d4>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007e3e:	f000 f96d 	bl	800811c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007e42:	4b16      	ldr	r3, [pc, #88]	@ (8007e9c <xPortStartScheduler+0x1d8>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007e48:	f000 f98c 	bl	8008164 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e4c:	4b14      	ldr	r3, [pc, #80]	@ (8007ea0 <xPortStartScheduler+0x1dc>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a13      	ldr	r2, [pc, #76]	@ (8007ea0 <xPortStartScheduler+0x1dc>)
 8007e52:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007e56:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007e58:	f7ff ff1e 	bl	8007c98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007e5c:	f7fe fa6c 	bl	8006338 <vTaskSwitchContext>
    prvTaskExitError();
 8007e60:	f7ff fed2 	bl	8007c08 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3730      	adds	r7, #48	@ 0x30
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	e000ed00 	.word	0xe000ed00
 8007e74:	410fc271 	.word	0x410fc271
 8007e78:	410fc270 	.word	0x410fc270
 8007e7c:	e000ed08 	.word	0xe000ed08
 8007e80:	08007c71 	.word	0x08007c71
 8007e84:	08008061 	.word	0x08008061
 8007e88:	e000e400 	.word	0xe000e400
 8007e8c:	200004c0 	.word	0x200004c0
 8007e90:	200004c4 	.word	0x200004c4
 8007e94:	e000ed20 	.word	0xe000ed20
 8007e98:	e000ed1c 	.word	0xe000ed1c
 8007e9c:	2000000c 	.word	0x2000000c
 8007ea0:	e000ef34 	.word	0xe000ef34

08007ea4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007eaa:	4b38      	ldr	r3, [pc, #224]	@ (8007f8c <vInitPrioGroupValue+0xe8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a38      	ldr	r2, [pc, #224]	@ (8007f90 <vInitPrioGroupValue+0xec>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d10b      	bne.n	8007ecc <vInitPrioGroupValue+0x28>
    __asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	60fb      	str	r3, [r7, #12]
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8007f8c <vInitPrioGroupValue+0xe8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a30      	ldr	r2, [pc, #192]	@ (8007f94 <vInitPrioGroupValue+0xf0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d10b      	bne.n	8007eee <vInitPrioGroupValue+0x4a>
    __asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	613b      	str	r3, [r7, #16]
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	e7fd      	b.n	8007eea <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eee:	4b2a      	ldr	r3, [pc, #168]	@ (8007f98 <vInitPrioGroupValue+0xf4>)
 8007ef0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	22ff      	movs	r2, #255	@ 0xff
 8007efe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	4b22      	ldr	r3, [pc, #136]	@ (8007f9c <vInitPrioGroupValue+0xf8>)
 8007f14:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f16:	4b22      	ldr	r3, [pc, #136]	@ (8007fa0 <vInitPrioGroupValue+0xfc>)
 8007f18:	2207      	movs	r2, #7
 8007f1a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f1c:	e009      	b.n	8007f32 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8007f1e:	4b20      	ldr	r3, [pc, #128]	@ (8007fa0 <vInitPrioGroupValue+0xfc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	4a1e      	ldr	r2, [pc, #120]	@ (8007fa0 <vInitPrioGroupValue+0xfc>)
 8007f26:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f3a:	2b80      	cmp	r3, #128	@ 0x80
 8007f3c:	d0ef      	beq.n	8007f1e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f3e:	4b18      	ldr	r3, [pc, #96]	@ (8007fa0 <vInitPrioGroupValue+0xfc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f1c3 0307 	rsb	r3, r3, #7
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d00b      	beq.n	8007f62 <vInitPrioGroupValue+0xbe>
    __asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	60bb      	str	r3, [r7, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	e7fd      	b.n	8007f5e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f62:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa0 <vInitPrioGroupValue+0xfc>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa0 <vInitPrioGroupValue+0xfc>)
 8007f6a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa0 <vInitPrioGroupValue+0xfc>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f74:	4a0a      	ldr	r2, [pc, #40]	@ (8007fa0 <vInitPrioGroupValue+0xfc>)
 8007f76:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8007f80:	bf00      	nop
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	e000ed00 	.word	0xe000ed00
 8007f90:	410fc271 	.word	0x410fc271
 8007f94:	410fc270 	.word	0x410fc270
 8007f98:	e000e400 	.word	0xe000e400
 8007f9c:	200004c0 	.word	0x200004c0
 8007fa0:	200004c4 	.word	0x200004c4

08007fa4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
    __asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	607b      	str	r3, [r7, #4]
}
 8007fbc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007fbe:	4b10      	ldr	r3, [pc, #64]	@ (8008000 <vPortEnterCritical+0x5c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8008000 <vPortEnterCritical+0x5c>)
 8007fc6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <vPortEnterCritical+0x5c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d110      	bne.n	8007ff2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008004 <vPortEnterCritical+0x60>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <vPortEnterCritical+0x4e>
    __asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	603b      	str	r3, [r7, #0]
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	e7fd      	b.n	8007fee <vPortEnterCritical+0x4a>
    }
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	2000000c 	.word	0x2000000c
 8008004:	e000ed04 	.word	0xe000ed04

08008008 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800800e:	4b12      	ldr	r3, [pc, #72]	@ (8008058 <vPortExitCritical+0x50>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10b      	bne.n	800802e <vPortExitCritical+0x26>
    __asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	607b      	str	r3, [r7, #4]
}
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	e7fd      	b.n	800802a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800802e:	4b0a      	ldr	r3, [pc, #40]	@ (8008058 <vPortExitCritical+0x50>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3b01      	subs	r3, #1
 8008034:	4a08      	ldr	r2, [pc, #32]	@ (8008058 <vPortExitCritical+0x50>)
 8008036:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008038:	4b07      	ldr	r3, [pc, #28]	@ (8008058 <vPortExitCritical+0x50>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d105      	bne.n	800804c <vPortExitCritical+0x44>
 8008040:	2300      	movs	r3, #0
 8008042:	603b      	str	r3, [r7, #0]
    __asm volatile
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f383 8811 	msr	BASEPRI, r3
}
 800804a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	2000000c 	.word	0x2000000c
 800805c:	00000000 	.word	0x00000000

08008060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008060:	f3ef 8009 	mrs	r0, PSP
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	4b15      	ldr	r3, [pc, #84]	@ (80080c0 <pxCurrentTCBConst>)
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	f01e 0f10 	tst.w	lr, #16
 8008070:	bf08      	it	eq
 8008072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807a:	6010      	str	r0, [r2, #0]
 800807c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008084:	f380 8811 	msr	BASEPRI, r0
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f7fe f952 	bl	8006338 <vTaskSwitchContext>
 8008094:	f04f 0000 	mov.w	r0, #0
 8008098:	f380 8811 	msr	BASEPRI, r0
 800809c:	bc09      	pop	{r0, r3}
 800809e:	6819      	ldr	r1, [r3, #0]
 80080a0:	6808      	ldr	r0, [r1, #0]
 80080a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a6:	f01e 0f10 	tst.w	lr, #16
 80080aa:	bf08      	it	eq
 80080ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080b0:	f380 8809 	msr	PSP, r0
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	f3af 8000 	nop.w

080080c0 <pxCurrentTCBConst>:
 80080c0:	20000380 	.word	0x20000380
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
    __asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
}
 80080e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80080e2:	f002 f81d 	bl	800a120 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80080e6:	f7fe f805 	bl	80060f4 <xTaskIncrementTick>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d006      	beq.n	80080fe <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80080f0:	f002 f874 	bl	800a1dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080f4:	4b08      	ldr	r3, [pc, #32]	@ (8008118 <SysTick_Handler+0x50>)
 80080f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	e001      	b.n	8008102 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80080fe:	f002 f851 	bl	800a1a4 <SEGGER_SYSVIEW_RecordExitISR>
 8008102:	2300      	movs	r3, #0
 8008104:	603b      	str	r3, [r7, #0]
    __asm volatile
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	f383 8811 	msr	BASEPRI, r3
}
 800810c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008120:	4b0b      	ldr	r3, [pc, #44]	@ (8008150 <vPortSetupTimerInterrupt+0x34>)
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008126:	4b0b      	ldr	r3, [pc, #44]	@ (8008154 <vPortSetupTimerInterrupt+0x38>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800812c:	4b0a      	ldr	r3, [pc, #40]	@ (8008158 <vPortSetupTimerInterrupt+0x3c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a0a      	ldr	r2, [pc, #40]	@ (800815c <vPortSetupTimerInterrupt+0x40>)
 8008132:	fba2 2303 	umull	r2, r3, r2, r3
 8008136:	099b      	lsrs	r3, r3, #6
 8008138:	4a09      	ldr	r2, [pc, #36]	@ (8008160 <vPortSetupTimerInterrupt+0x44>)
 800813a:	3b01      	subs	r3, #1
 800813c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800813e:	4b04      	ldr	r3, [pc, #16]	@ (8008150 <vPortSetupTimerInterrupt+0x34>)
 8008140:	2207      	movs	r2, #7
 8008142:	601a      	str	r2, [r3, #0]
}
 8008144:	bf00      	nop
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	e000e010 	.word	0xe000e010
 8008154:	e000e018 	.word	0xe000e018
 8008158:	20000000 	.word	0x20000000
 800815c:	10624dd3 	.word	0x10624dd3
 8008160:	e000e014 	.word	0xe000e014

08008164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008164:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008174 <vPortEnableVFP+0x10>
 8008168:	6801      	ldr	r1, [r0, #0]
 800816a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800816e:	6001      	str	r1, [r0, #0]
 8008170:	4770      	bx	lr
 8008172:	0000      	.short	0x0000
 8008174:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop

0800817c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008182:	f3ef 8305 	mrs	r3, IPSR
 8008186:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b0f      	cmp	r3, #15
 800818c:	d915      	bls.n	80081ba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800818e:	4a18      	ldr	r2, [pc, #96]	@ (80081f0 <vPortValidateInterruptPriority+0x74>)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008198:	4b16      	ldr	r3, [pc, #88]	@ (80081f4 <vPortValidateInterruptPriority+0x78>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	7afa      	ldrb	r2, [r7, #11]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d20b      	bcs.n	80081ba <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	607b      	str	r3, [r7, #4]
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop
 80081b8:	e7fd      	b.n	80081b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081ba:	4b0f      	ldr	r3, [pc, #60]	@ (80081f8 <vPortValidateInterruptPriority+0x7c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081c2:	4b0e      	ldr	r3, [pc, #56]	@ (80081fc <vPortValidateInterruptPriority+0x80>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d90b      	bls.n	80081e2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	603b      	str	r3, [r7, #0]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <vPortValidateInterruptPriority+0x62>
    }
 80081e2:	bf00      	nop
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	e000e3f0 	.word	0xe000e3f0
 80081f4:	200004c0 	.word	0x200004c0
 80081f8:	e000ed0c 	.word	0xe000ed0c
 80081fc:	200004c4 	.word	0x200004c4

08008200 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08e      	sub	sp, #56	@ 0x38
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008208:	2300      	movs	r3, #0
 800820a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d022      	beq.n	8008258 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8008212:	2308      	movs	r3, #8
 8008214:	43db      	mvns	r3, r3
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	429a      	cmp	r2, r3
 800821a:	d81b      	bhi.n	8008254 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800821c:	2208      	movs	r2, #8
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4413      	add	r3, r2
 8008222:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	2b00      	cmp	r3, #0
 800822c:	d014      	beq.n	8008258 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	f1c3 0308 	rsb	r3, r3, #8
 8008238:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	43db      	mvns	r3, r3
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d804      	bhi.n	800824e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	4413      	add	r3, r2
 800824a:	607b      	str	r3, [r7, #4]
 800824c:	e004      	b.n	8008258 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	607b      	str	r3, [r7, #4]
 8008252:	e001      	b.n	8008258 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8008258:	f7fd fdf6 	bl	8005e48 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800825c:	4b7a      	ldr	r3, [pc, #488]	@ (8008448 <pvPortMalloc+0x248>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8008264:	f000 f974 	bl	8008550 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f2c0 80d3 	blt.w	8008416 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 80cf 	beq.w	8008416 <pvPortMalloc+0x216>
 8008278:	4b74      	ldr	r3, [pc, #464]	@ (800844c <pvPortMalloc+0x24c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	f200 80c9 	bhi.w	8008416 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008284:	4b72      	ldr	r3, [pc, #456]	@ (8008450 <pvPortMalloc+0x250>)
 8008286:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8008288:	4b71      	ldr	r3, [pc, #452]	@ (8008450 <pvPortMalloc+0x250>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800828e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008290:	4a70      	ldr	r2, [pc, #448]	@ (8008454 <pvPortMalloc+0x254>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d305      	bcc.n	80082a2 <pvPortMalloc+0xa2>
 8008296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008298:	4a6f      	ldr	r2, [pc, #444]	@ (8008458 <pvPortMalloc+0x258>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d801      	bhi.n	80082a2 <pvPortMalloc+0xa2>
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <pvPortMalloc+0xa4>
 80082a2:	2300      	movs	r3, #0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d129      	bne.n	80082fc <pvPortMalloc+0xfc>
    __asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	623b      	str	r3, [r7, #32]
}
 80082ba:	bf00      	nop
 80082bc:	bf00      	nop
 80082be:	e7fd      	b.n	80082bc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80082c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80082c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80082ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082cc:	4a61      	ldr	r2, [pc, #388]	@ (8008454 <pvPortMalloc+0x254>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d305      	bcc.n	80082de <pvPortMalloc+0xde>
 80082d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d4:	4a60      	ldr	r2, [pc, #384]	@ (8008458 <pvPortMalloc+0x258>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d801      	bhi.n	80082de <pvPortMalloc+0xde>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <pvPortMalloc+0xe0>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10b      	bne.n	80082fc <pvPortMalloc+0xfc>
    __asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	61fb      	str	r3, [r7, #28]
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	e7fd      	b.n	80082f8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80082fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d903      	bls.n	800830e <pvPortMalloc+0x10e>
 8008306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1d8      	bne.n	80082c0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800830e:	4b4e      	ldr	r3, [pc, #312]	@ (8008448 <pvPortMalloc+0x248>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008314:	429a      	cmp	r2, r3
 8008316:	d07e      	beq.n	8008416 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2208      	movs	r2, #8
 800831e:	4413      	add	r3, r2
 8008320:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8008322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008324:	4a4b      	ldr	r2, [pc, #300]	@ (8008454 <pvPortMalloc+0x254>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d305      	bcc.n	8008336 <pvPortMalloc+0x136>
 800832a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832c:	4a4a      	ldr	r2, [pc, #296]	@ (8008458 <pvPortMalloc+0x258>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d801      	bhi.n	8008336 <pvPortMalloc+0x136>
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <pvPortMalloc+0x138>
 8008336:	2300      	movs	r3, #0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <pvPortMalloc+0x154>
    __asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	61bb      	str	r3, [r7, #24]
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800835c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	429a      	cmp	r2, r3
 8008364:	d90b      	bls.n	800837e <pvPortMalloc+0x17e>
    __asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	617b      	str	r3, [r7, #20]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800837e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	1ad2      	subs	r2, r2, r3
 8008386:	2308      	movs	r3, #8
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	429a      	cmp	r2, r3
 800838c:	d924      	bls.n	80083d8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800838e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4413      	add	r3, r2
 8008394:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <pvPortMalloc+0x1b8>
    __asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	613b      	str	r3, [r7, #16]
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	e7fd      	b.n	80083b4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80083c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083d6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083d8:	4b1c      	ldr	r3, [pc, #112]	@ (800844c <pvPortMalloc+0x24c>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	4a1a      	ldr	r2, [pc, #104]	@ (800844c <pvPortMalloc+0x24c>)
 80083e4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083e6:	4b19      	ldr	r3, [pc, #100]	@ (800844c <pvPortMalloc+0x24c>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	4b1c      	ldr	r3, [pc, #112]	@ (800845c <pvPortMalloc+0x25c>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d203      	bcs.n	80083fa <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083f2:	4b16      	ldr	r3, [pc, #88]	@ (800844c <pvPortMalloc+0x24c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a19      	ldr	r2, [pc, #100]	@ (800845c <pvPortMalloc+0x25c>)
 80083f8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80083fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008404:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800840c:	4b14      	ldr	r3, [pc, #80]	@ (8008460 <pvPortMalloc+0x260>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3301      	adds	r3, #1
 8008412:	4a13      	ldr	r2, [pc, #76]	@ (8008460 <pvPortMalloc+0x260>)
 8008414:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008416:	f7fd fd25 	bl	8005e64 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800841a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841c:	f003 0307 	and.w	r3, r3, #7
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <pvPortMalloc+0x23c>
    __asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	60fb      	str	r3, [r7, #12]
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <pvPortMalloc+0x238>
    return pvReturn;
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800843e:	4618      	mov	r0, r3
 8008440:	3738      	adds	r7, #56	@ 0x38
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	200130d0 	.word	0x200130d0
 800844c:	200130d4 	.word	0x200130d4
 8008450:	200130c8 	.word	0x200130c8
 8008454:	200004c8 	.word	0x200004c8
 8008458:	200130c7 	.word	0x200130c7
 800845c:	200130d8 	.word	0x200130d8
 8008460:	200130dc 	.word	0x200130dc

08008464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d060      	beq.n	8008538 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008476:	2308      	movs	r3, #8
 8008478:	425b      	negs	r3, r3
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	4413      	add	r3, r2
 800847e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	4a2e      	ldr	r2, [pc, #184]	@ (8008540 <vPortFree+0xdc>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d305      	bcc.n	8008498 <vPortFree+0x34>
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	4a2d      	ldr	r2, [pc, #180]	@ (8008544 <vPortFree+0xe0>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d801      	bhi.n	8008498 <vPortFree+0x34>
 8008494:	2301      	movs	r3, #1
 8008496:	e000      	b.n	800849a <vPortFree+0x36>
 8008498:	2300      	movs	r3, #0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <vPortFree+0x52>
    __asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	617b      	str	r3, [r7, #20]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	db0b      	blt.n	80084d6 <vPortFree+0x72>
    __asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	613b      	str	r3, [r7, #16]
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	e7fd      	b.n	80084d2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00b      	beq.n	80084f6 <vPortFree+0x92>
    __asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60fb      	str	r3, [r7, #12]
}
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
 80084f4:	e7fd      	b.n	80084f2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	da1c      	bge.n	8008538 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d118      	bne.n	8008538 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8008512:	f7fd fc99 	bl	8005e48 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	4b0b      	ldr	r3, [pc, #44]	@ (8008548 <vPortFree+0xe4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4413      	add	r3, r2
 8008520:	4a09      	ldr	r2, [pc, #36]	@ (8008548 <vPortFree+0xe4>)
 8008522:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008524:	69b8      	ldr	r0, [r7, #24]
 8008526:	f000 f86d 	bl	8008604 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800852a:	4b08      	ldr	r3, [pc, #32]	@ (800854c <vPortFree+0xe8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	4a06      	ldr	r2, [pc, #24]	@ (800854c <vPortFree+0xe8>)
 8008532:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008534:	f7fd fc96 	bl	8005e64 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008538:	bf00      	nop
 800853a:	3720      	adds	r7, #32
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	200004c8 	.word	0x200004c8
 8008544:	200130c7 	.word	0x200130c7
 8008548:	200130d4 	.word	0x200130d4
 800854c:	200130e0 	.word	0x200130e0

08008550 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008556:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800855a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800855c:	4b24      	ldr	r3, [pc, #144]	@ (80085f0 <prvHeapInit+0xa0>)
 800855e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00c      	beq.n	8008584 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3307      	adds	r3, #7
 800856e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0307 	bic.w	r3, r3, #7
 8008576:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	4a1c      	ldr	r2, [pc, #112]	@ (80085f0 <prvHeapInit+0xa0>)
 8008580:	4413      	add	r3, r2
 8008582:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4a1b      	ldr	r2, [pc, #108]	@ (80085f4 <prvHeapInit+0xa4>)
 8008588:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800858a:	4b1a      	ldr	r3, [pc, #104]	@ (80085f4 <prvHeapInit+0xa4>)
 800858c:	2200      	movs	r2, #0
 800858e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4413      	add	r3, r2
 8008596:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8008598:	2208      	movs	r2, #8
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a13      	ldr	r2, [pc, #76]	@ (80085f8 <prvHeapInit+0xa8>)
 80085ac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80085ae:	4b12      	ldr	r3, [pc, #72]	@ (80085f8 <prvHeapInit+0xa8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2200      	movs	r2, #0
 80085b4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80085b6:	4b10      	ldr	r3, [pc, #64]	@ (80085f8 <prvHeapInit+0xa8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80085cc:	4b0a      	ldr	r3, [pc, #40]	@ (80085f8 <prvHeapInit+0xa8>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	4a08      	ldr	r2, [pc, #32]	@ (80085fc <prvHeapInit+0xac>)
 80085da:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	4a07      	ldr	r2, [pc, #28]	@ (8008600 <prvHeapInit+0xb0>)
 80085e2:	6013      	str	r3, [r2, #0]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	200004c8 	.word	0x200004c8
 80085f4:	200130c8 	.word	0x200130c8
 80085f8:	200130d0 	.word	0x200130d0
 80085fc:	200130d8 	.word	0x200130d8
 8008600:	200130d4 	.word	0x200130d4

08008604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800860c:	4b36      	ldr	r3, [pc, #216]	@ (80086e8 <prvInsertBlockIntoFreeList+0xe4>)
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e002      	b.n	8008618 <prvInsertBlockIntoFreeList+0x14>
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d8f7      	bhi.n	8008612 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	4a30      	ldr	r2, [pc, #192]	@ (80086e8 <prvInsertBlockIntoFreeList+0xe4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d018      	beq.n	800865c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	4a2f      	ldr	r2, [pc, #188]	@ (80086ec <prvInsertBlockIntoFreeList+0xe8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d305      	bcc.n	800863e <prvInsertBlockIntoFreeList+0x3a>
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	4a2e      	ldr	r2, [pc, #184]	@ (80086f0 <prvInsertBlockIntoFreeList+0xec>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d801      	bhi.n	800863e <prvInsertBlockIntoFreeList+0x3a>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <prvInsertBlockIntoFreeList+0x3c>
 800863e:	2300      	movs	r3, #0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10b      	bne.n	800865c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	60fb      	str	r3, [r7, #12]
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4413      	add	r3, r2
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	429a      	cmp	r2, r3
 800866c:	d108      	bne.n	8008680 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	441a      	add	r2, r3
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	441a      	add	r2, r3
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d118      	bne.n	80086c6 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	4b16      	ldr	r3, [pc, #88]	@ (80086f4 <prvInsertBlockIntoFreeList+0xf0>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d00d      	beq.n	80086bc <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	441a      	add	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	e008      	b.n	80086ce <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80086bc:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <prvInsertBlockIntoFreeList+0xf0>)
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	e003      	b.n	80086ce <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d002      	beq.n	80086dc <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	200130c8 	.word	0x200130c8
 80086ec:	200004c8 	.word	0x200004c8
 80086f0:	200130c7 	.word	0x200130c7
 80086f4:	200130d0 	.word	0x200130d0

080086f8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80086fc:	4803      	ldr	r0, [pc, #12]	@ (800870c <_cbSendSystemDesc+0x14>)
 80086fe:	f001 fcb9 	bl	800a074 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008702:	4803      	ldr	r0, [pc, #12]	@ (8008710 <_cbSendSystemDesc+0x18>)
 8008704:	f001 fcb6 	bl	800a074 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008708:	bf00      	nop
 800870a:	bd80      	pop	{r7, pc}
 800870c:	0800dd48 	.word	0x0800dd48
 8008710:	0800dd80 	.word	0x0800dd80

08008714 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008718:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <SEGGER_SYSVIEW_Conf+0x20>)
 800871a:	6818      	ldr	r0, [r3, #0]
 800871c:	4b05      	ldr	r3, [pc, #20]	@ (8008734 <SEGGER_SYSVIEW_Conf+0x20>)
 800871e:	6819      	ldr	r1, [r3, #0]
 8008720:	4b05      	ldr	r3, [pc, #20]	@ (8008738 <SEGGER_SYSVIEW_Conf+0x24>)
 8008722:	4a06      	ldr	r2, [pc, #24]	@ (800873c <SEGGER_SYSVIEW_Conf+0x28>)
 8008724:	f001 f92a 	bl	800997c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008728:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800872c:	f001 f96a 	bl	8009a04 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008730:	bf00      	nop
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000000 	.word	0x20000000
 8008738:	080086f9 	.word	0x080086f9
 800873c:	0800dfe4 	.word	0x0800dfe4

08008740 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008742:	b085      	sub	sp, #20
 8008744:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008746:	2300      	movs	r3, #0
 8008748:	607b      	str	r3, [r7, #4]
 800874a:	e033      	b.n	80087b4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800874c:	491e      	ldr	r1, [pc, #120]	@ (80087c8 <_cbSendTaskList+0x88>)
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	491a      	ldr	r1, [pc, #104]	@ (80087c8 <_cbSendTaskList+0x88>)
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	440b      	add	r3, r1
 800876a:	3304      	adds	r3, #4
 800876c:	6819      	ldr	r1, [r3, #0]
 800876e:	4c16      	ldr	r4, [pc, #88]	@ (80087c8 <_cbSendTaskList+0x88>)
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4423      	add	r3, r4
 800877c:	3308      	adds	r3, #8
 800877e:	681c      	ldr	r4, [r3, #0]
 8008780:	4d11      	ldr	r5, [pc, #68]	@ (80087c8 <_cbSendTaskList+0x88>)
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	442b      	add	r3, r5
 800878e:	330c      	adds	r3, #12
 8008790:	681d      	ldr	r5, [r3, #0]
 8008792:	4e0d      	ldr	r6, [pc, #52]	@ (80087c8 <_cbSendTaskList+0x88>)
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4433      	add	r3, r6
 80087a0:	3310      	adds	r3, #16
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	462b      	mov	r3, r5
 80087a8:	4622      	mov	r2, r4
 80087aa:	f000 f8bd 	bl	8008928 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3301      	adds	r3, #1
 80087b2:	607b      	str	r3, [r7, #4]
 80087b4:	4b05      	ldr	r3, [pc, #20]	@ (80087cc <_cbSendTaskList+0x8c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d3c6      	bcc.n	800874c <_cbSendTaskList+0xc>
  }
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c8:	200130e4 	.word	0x200130e4
 80087cc:	20013184 	.word	0x20013184

080087d0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80087d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80087d8:	f7fd fc68 	bl	80060ac <xTaskGetTickCountFromISR>
 80087dc:	4603      	mov	r3, r0
 80087de:	2200      	movs	r2, #0
 80087e0:	469a      	mov	sl, r3
 80087e2:	4693      	mov	fp, r2
 80087e4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80087e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	f04f 0a00 	mov.w	sl, #0
 80087f4:	f04f 0b00 	mov.w	fp, #0
 80087f8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80087fc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008800:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008804:	4652      	mov	r2, sl
 8008806:	465b      	mov	r3, fp
 8008808:	1a14      	subs	r4, r2, r0
 800880a:	eb63 0501 	sbc.w	r5, r3, r1
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	00ab      	lsls	r3, r5, #2
 8008818:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800881c:	00a2      	lsls	r2, r4, #2
 800881e:	4614      	mov	r4, r2
 8008820:	461d      	mov	r5, r3
 8008822:	eb14 0800 	adds.w	r8, r4, r0
 8008826:	eb45 0901 	adc.w	r9, r5, r1
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	f04f 0300 	mov.w	r3, #0
 8008832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800883a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800883e:	4690      	mov	r8, r2
 8008840:	4699      	mov	r9, r3
 8008842:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008846:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800884a:	4610      	mov	r0, r2
 800884c:	4619      	mov	r1, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008858 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af02      	add	r7, sp, #8
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008866:	2205      	movs	r2, #5
 8008868:	492b      	ldr	r1, [pc, #172]	@ (8008918 <SYSVIEW_AddTask+0xc0>)
 800886a:	68b8      	ldr	r0, [r7, #8]
 800886c:	f003 f840 	bl	800b8f0 <memcmp>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d04b      	beq.n	800890e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008876:	4b29      	ldr	r3, [pc, #164]	@ (800891c <SYSVIEW_AddTask+0xc4>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b07      	cmp	r3, #7
 800887c:	d903      	bls.n	8008886 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800887e:	4828      	ldr	r0, [pc, #160]	@ (8008920 <SYSVIEW_AddTask+0xc8>)
 8008880:	f001 ff94 	bl	800a7ac <SEGGER_SYSVIEW_Warn>
    return;
 8008884:	e044      	b.n	8008910 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008886:	4b25      	ldr	r3, [pc, #148]	@ (800891c <SYSVIEW_AddTask+0xc4>)
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	4926      	ldr	r1, [pc, #152]	@ (8008924 <SYSVIEW_AddTask+0xcc>)
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800889a:	4b20      	ldr	r3, [pc, #128]	@ (800891c <SYSVIEW_AddTask+0xc4>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	4921      	ldr	r1, [pc, #132]	@ (8008924 <SYSVIEW_AddTask+0xcc>)
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	3304      	adds	r3, #4
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80088b0:	4b1a      	ldr	r3, [pc, #104]	@ (800891c <SYSVIEW_AddTask+0xc4>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	491b      	ldr	r1, [pc, #108]	@ (8008924 <SYSVIEW_AddTask+0xcc>)
 80088b6:	4613      	mov	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	3308      	adds	r3, #8
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80088c6:	4b15      	ldr	r3, [pc, #84]	@ (800891c <SYSVIEW_AddTask+0xc4>)
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4916      	ldr	r1, [pc, #88]	@ (8008924 <SYSVIEW_AddTask+0xcc>)
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	330c      	adds	r3, #12
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80088dc:	4b0f      	ldr	r3, [pc, #60]	@ (800891c <SYSVIEW_AddTask+0xc4>)
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	4910      	ldr	r1, [pc, #64]	@ (8008924 <SYSVIEW_AddTask+0xcc>)
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	440b      	add	r3, r1
 80088ec:	3310      	adds	r3, #16
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80088f2:	4b0a      	ldr	r3, [pc, #40]	@ (800891c <SYSVIEW_AddTask+0xc4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3301      	adds	r3, #1
 80088f8:	4a08      	ldr	r2, [pc, #32]	@ (800891c <SYSVIEW_AddTask+0xc4>)
 80088fa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 f80e 	bl	8008928 <SYSVIEW_SendTaskInfo>
 800890c:	e000      	b.n	8008910 <SYSVIEW_AddTask+0xb8>
    return;
 800890e:	bf00      	nop

}
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	0800dd90 	.word	0x0800dd90
 800891c:	20013184 	.word	0x20013184
 8008920:	0800dd98 	.word	0x0800dd98
 8008924:	200130e4 	.word	0x200130e4

08008928 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b08a      	sub	sp, #40	@ 0x28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008936:	f107 0310 	add.w	r3, r7, #16
 800893a:	2218      	movs	r2, #24
 800893c:	2100      	movs	r1, #0
 800893e:	4618      	mov	r0, r3
 8008940:	f002 ffe6 	bl	800b910 <memset>
  TaskInfo.TaskID     = TaskID;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008958:	f107 0310 	add.w	r3, r7, #16
 800895c:	4618      	mov	r0, r3
 800895e:	f001 fa91 	bl	8009e84 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008962:	bf00      	nop
 8008964:	3728      	adds	r7, #40	@ 0x28
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <__NVIC_EnableIRQ>:
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800897a:	2b00      	cmp	r3, #0
 800897c:	db0b      	blt.n	8008996 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	f003 021f 	and.w	r2, r3, #31
 8008984:	4907      	ldr	r1, [pc, #28]	@ (80089a4 <__NVIC_EnableIRQ+0x38>)
 8008986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800898a:	095b      	lsrs	r3, r3, #5
 800898c:	2001      	movs	r0, #1
 800898e:	fa00 f202 	lsl.w	r2, r0, r2
 8008992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	e000e100 	.word	0xe000e100

080089a8 <__NVIC_SetPriority>:
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	4603      	mov	r3, r0
 80089b0:	6039      	str	r1, [r7, #0]
 80089b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	db0a      	blt.n	80089d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	490c      	ldr	r1, [pc, #48]	@ (80089f4 <__NVIC_SetPriority+0x4c>)
 80089c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089c6:	0112      	lsls	r2, r2, #4
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	440b      	add	r3, r1
 80089cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80089d0:	e00a      	b.n	80089e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	4908      	ldr	r1, [pc, #32]	@ (80089f8 <__NVIC_SetPriority+0x50>)
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	3b04      	subs	r3, #4
 80089e0:	0112      	lsls	r2, r2, #4
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	440b      	add	r3, r1
 80089e6:	761a      	strb	r2, [r3, #24]
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	e000e100 	.word	0xe000e100
 80089f8:	e000ed00 	.word	0xe000ed00

080089fc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8008a02:	f001 ff2f 	bl	800a864 <SEGGER_SYSVIEW_IsStarted>
 8008a06:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8008a0e:	f001 f8bd 	bl	8009b8c <SEGGER_SYSVIEW_Start>
  }
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8008a26:	4b0c      	ldr	r3, [pc, #48]	@ (8008a58 <_cbOnUARTRx+0x3c>)
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d806      	bhi.n	8008a3c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8008a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a58 <_cbOnUARTRx+0x3c>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	3301      	adds	r3, #1
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	4b08      	ldr	r3, [pc, #32]	@ (8008a58 <_cbOnUARTRx+0x3c>)
 8008a38:	701a      	strb	r2, [r3, #0]
    goto Done;
 8008a3a:	e009      	b.n	8008a50 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8008a3c:	f7ff ffde 	bl	80089fc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8008a40:	4b05      	ldr	r3, [pc, #20]	@ (8008a58 <_cbOnUARTRx+0x3c>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	4618      	mov	r0, r3
 8008a46:	1dfb      	adds	r3, r7, #7
 8008a48:	2201      	movs	r2, #1
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	f000 fbec 	bl	8009228 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8008a50:	bf00      	nop
}
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20000010 	.word	0x20000010

08008a5c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8008a64:	4b14      	ldr	r3, [pc, #80]	@ (8008ab8 <_cbOnUARTTx+0x5c>)
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d80f      	bhi.n	8008a8c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8008a6c:	4b12      	ldr	r3, [pc, #72]	@ (8008ab8 <_cbOnUARTTx+0x5c>)
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	461a      	mov	r2, r3
 8008a72:	4b12      	ldr	r3, [pc, #72]	@ (8008abc <_cbOnUARTTx+0x60>)
 8008a74:	5c9a      	ldrb	r2, [r3, r2]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab8 <_cbOnUARTTx+0x5c>)
 8008a7c:	785b      	ldrb	r3, [r3, #1]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <_cbOnUARTTx+0x5c>)
 8008a84:	705a      	strb	r2, [r3, #1]
    r = 1;
 8008a86:	2301      	movs	r3, #1
 8008a88:	60fb      	str	r3, [r7, #12]
    goto Done;
 8008a8a:	e00f      	b.n	8008aac <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab8 <_cbOnUARTTx+0x5c>)
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fa1b 	bl	8008ed0 <SEGGER_RTT_ReadUpBufferNoLock>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	da02      	bge.n	8008aaa <_cbOnUARTTx+0x4e>
    r = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	e000      	b.n	8008aac <_cbOnUARTTx+0x50>
  }
Done:
 8008aaa:	bf00      	nop
  return r;
 8008aac:	68fb      	ldr	r3, [r7, #12]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000010 	.word	0x20000010
 8008abc:	0800dfec 	.word	0x0800dfec

08008ac0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8008ac8:	4a04      	ldr	r2, [pc, #16]	@ (8008adc <SEGGER_UART_init+0x1c>)
 8008aca:	4905      	ldr	r1, [pc, #20]	@ (8008ae0 <SEGGER_UART_init+0x20>)
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f863 	bl	8008b98 <HIF_UART_Init>
}
 8008ad2:	bf00      	nop
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	08008a1d 	.word	0x08008a1d
 8008ae0:	08008a5d 	.word	0x08008a5d

08008ae4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8008aea:	4b1e      	ldr	r3, [pc, #120]	@ (8008b64 <USART2_IRQHandler+0x80>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f003 0320 	and.w	r3, r3, #32
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d011      	beq.n	8008b1e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8008afa:	4b1b      	ldr	r3, [pc, #108]	@ (8008b68 <USART2_IRQHandler+0x84>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f003 030b 	and.w	r3, r3, #11
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d108      	bne.n	8008b1e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8008b0c:	4b17      	ldr	r3, [pc, #92]	@ (8008b6c <USART2_IRQHandler+0x88>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8008b14:	4b15      	ldr	r3, [pc, #84]	@ (8008b6c <USART2_IRQHandler+0x88>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	79fa      	ldrb	r2, [r7, #7]
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d01a      	beq.n	8008b5e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8008b28:	4b11      	ldr	r3, [pc, #68]	@ (8008b70 <USART2_IRQHandler+0x8c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d015      	beq.n	8008b5c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8008b30:	4b0f      	ldr	r3, [pc, #60]	@ (8008b70 <USART2_IRQHandler+0x8c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	1dfa      	adds	r2, r7, #7
 8008b36:	4610      	mov	r0, r2
 8008b38:	4798      	blx	r3
 8008b3a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d106      	bne.n	8008b50 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8008b42:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <USART2_IRQHandler+0x90>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a0b      	ldr	r2, [pc, #44]	@ (8008b74 <USART2_IRQHandler+0x90>)
 8008b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	e006      	b.n	8008b5e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8008b50:	4b04      	ldr	r3, [pc, #16]	@ (8008b64 <USART2_IRQHandler+0x80>)
 8008b52:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8008b54:	79fa      	ldrb	r2, [r7, #7]
 8008b56:	4b04      	ldr	r3, [pc, #16]	@ (8008b68 <USART2_IRQHandler+0x84>)
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	e000      	b.n	8008b5e <USART2_IRQHandler+0x7a>
      return;
 8008b5c:	bf00      	nop
    }
  }
}
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	40004400 	.word	0x40004400
 8008b68:	40004404 	.word	0x40004404
 8008b6c:	20013188 	.word	0x20013188
 8008b70:	2001318c 	.word	0x2001318c
 8008b74:	4000440c 	.word	0x4000440c

08008b78 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8008b78:	b480      	push	{r7}
 8008b7a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8008b7c:	4b05      	ldr	r3, [pc, #20]	@ (8008b94 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a04      	ldr	r2, [pc, #16]	@ (8008b94 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8008b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b86:	6013      	str	r3, [r2, #0]
}
 8008b88:	bf00      	nop
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	4000440c 	.word	0x4000440c

08008b98 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8008ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8008c60 <HIF_UART_Init+0xc8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8008c60 <HIF_UART_Init+0xc8>)
 8008baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bae:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8008bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8008c64 <HIF_UART_Init+0xcc>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c64 <HIF_UART_Init+0xcc>)
 8008bb6:	f043 0301 	orr.w	r3, r3, #1
 8008bba:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8008bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8008c68 <HIF_UART_Init+0xd0>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bc8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8008bd0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8008bd2:	4a25      	ldr	r2, [pc, #148]	@ (8008c68 <HIF_UART_Init+0xd0>)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8008bd8:	4b24      	ldr	r3, [pc, #144]	@ (8008c6c <HIF_UART_Init+0xd4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008be4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8008bec:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8008bee:	4a1f      	ldr	r2, [pc, #124]	@ (8008c6c <HIF_UART_Init+0xd4>)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8008bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8008c70 <HIF_UART_Init+0xd8>)
 8008bf6:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8008bfa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8008bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c74 <HIF_UART_Init+0xdc>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8008c02:	4b1d      	ldr	r3, [pc, #116]	@ (8008c78 <HIF_UART_Init+0xe0>)
 8008c04:	2280      	movs	r2, #128	@ 0x80
 8008c06:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8008c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8008c7c <HIF_UART_Init+0xe4>)
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c16:	3301      	adds	r3, #1
 8008c18:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	085b      	lsrs	r3, r3, #1
 8008c1e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c26:	d302      	bcc.n	8008c2e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8008c28:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8008c2c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d004      	beq.n	8008c3e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	4a11      	ldr	r2, [pc, #68]	@ (8008c80 <HIF_UART_Init+0xe8>)
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8008c3e:	4a11      	ldr	r2, [pc, #68]	@ (8008c84 <HIF_UART_Init+0xec>)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8008c44:	4a10      	ldr	r2, [pc, #64]	@ (8008c88 <HIF_UART_Init+0xf0>)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8008c4a:	2106      	movs	r1, #6
 8008c4c:	2026      	movs	r0, #38	@ 0x26
 8008c4e:	f7ff feab 	bl	80089a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8008c52:	2026      	movs	r0, #38	@ 0x26
 8008c54:	f7ff fe8a 	bl	800896c <__NVIC_EnableIRQ>
}
 8008c58:	bf00      	nop
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	40023840 	.word	0x40023840
 8008c64:	40023830 	.word	0x40023830
 8008c68:	40020020 	.word	0x40020020
 8008c6c:	40020000 	.word	0x40020000
 8008c70:	4000440c 	.word	0x4000440c
 8008c74:	40004410 	.word	0x40004410
 8008c78:	40004414 	.word	0x40004414
 8008c7c:	0501bd00 	.word	0x0501bd00
 8008c80:	40004408 	.word	0x40004408
 8008c84:	20013188 	.word	0x20013188
 8008c88:	2001318c 	.word	0x2001318c

08008c8c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008c92:	4b26      	ldr	r3, [pc, #152]	@ (8008d2c <_DoInit+0xa0>)
 8008c94:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8008c96:	22a8      	movs	r2, #168	@ 0xa8
 8008c98:	2100      	movs	r1, #0
 8008c9a:	6838      	ldr	r0, [r7, #0]
 8008c9c:	f002 fe38 	bl	800b910 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2203      	movs	r2, #3
 8008ca4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2203      	movs	r2, #3
 8008caa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	4a20      	ldr	r2, [pc, #128]	@ (8008d30 <_DoInit+0xa4>)
 8008cb0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8008d34 <_DoInit+0xa8>)
 8008cb6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008cbe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	4a16      	ldr	r2, [pc, #88]	@ (8008d30 <_DoInit+0xa4>)
 8008cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	4a17      	ldr	r2, [pc, #92]	@ (8008d38 <_DoInit+0xac>)
 8008cdc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2240      	movs	r2, #64	@ 0x40
 8008ce2:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2200      	movs	r2, #0
 8008cee:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008cf6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	607b      	str	r3, [r7, #4]
 8008cfe:	e00c      	b.n	8008d1a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f1c3 030f 	rsb	r3, r3, #15
 8008d06:	4a0d      	ldr	r2, [pc, #52]	@ (8008d3c <_DoInit+0xb0>)
 8008d08:	5cd1      	ldrb	r1, [r2, r3]
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4413      	add	r3, r2
 8008d10:	460a      	mov	r2, r1
 8008d12:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3301      	adds	r3, #1
 8008d18:	607b      	str	r3, [r7, #4]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b0f      	cmp	r3, #15
 8008d1e:	d9ef      	bls.n	8008d00 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008d20:	f3bf 8f5f 	dmb	sy
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20013190 	.word	0x20013190
 8008d30:	0800dde8 	.word	0x0800dde8
 8008d34:	20013238 	.word	0x20013238
 8008d38:	20015238 	.word	0x20015238
 8008d3c:	0800dff0 	.word	0x0800dff0

08008d40 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08a      	sub	sp, #40	@ 0x28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d905      	bls.n	8008d70 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d6e:	e007      	b.n	8008d80 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	69b9      	ldr	r1, [r7, #24]
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	1acb      	subs	r3, r1, r3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	bf28      	it	cs
 8008d8e:	4613      	movcs	r3, r2
 8008d90:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8008d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4293      	cmp	r3, r2
 8008d98:	bf28      	it	cs
 8008d9a:	4613      	movcs	r3, r2
 8008d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008daa:	68b9      	ldr	r1, [r7, #8]
 8008dac:	6978      	ldr	r0, [r7, #20]
 8008dae:	f002 fde9 	bl	800b984 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8008db2:	6a3a      	ldr	r2, [r7, #32]
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	4413      	add	r3, r2
 8008db8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbe:	4413      	add	r3, r2
 8008dc0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dce:	4413      	add	r3, r2
 8008dd0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d101      	bne.n	8008de0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008de0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1b2      	bne.n	8008d56 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8008df0:	6a3b      	ldr	r3, [r7, #32]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3728      	adds	r7, #40	@ 0x28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b088      	sub	sp, #32
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d911      	bls.n	8008e42 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	6938      	ldr	r0, [r7, #16]
 8008e2e:	f002 fda9 	bl	800b984 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008e32:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	441a      	add	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8008e40:	e01f      	b.n	8008e82 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	6938      	ldr	r0, [r7, #16]
 8008e56:	f002 fd95 	bl	800b984 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6938      	ldr	r0, [r7, #16]
 8008e74:	f002 fd86 	bl	800b984 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008e78:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	60da      	str	r2, [r3, #12]
}
 8008e82:	bf00      	nop
 8008e84:	3720      	adds	r7, #32
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8008e8a:	b480      	push	{r7}
 8008e8c:	b087      	sub	sp, #28
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d808      	bhi.n	8008eb8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	689a      	ldr	r2, [r3, #8]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	1ad2      	subs	r2, r2, r3
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	e004      	b.n	8008ec2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8008ec2:	697b      	ldr	r3, [r7, #20]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	371c      	adds	r7, #28
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08c      	sub	sp, #48	@ 0x30
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8008edc:	4b3e      	ldr	r3, [pc, #248]	@ (8008fd8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8008ede:	623b      	str	r3, [r7, #32]
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b53      	cmp	r3, #83	@ 0x53
 8008ee8:	d001      	beq.n	8008eee <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8008eea:	f7ff fecf 	bl	8008c8c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	4413      	add	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	4a37      	ldr	r2, [pc, #220]	@ (8008fd8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8008efc:	4413      	add	r3, r2
 8008efe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008f10:	2300      	movs	r3, #0
 8008f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008f14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d92b      	bls.n	8008f74 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	bf28      	it	cs
 8008f2e:	4613      	movcs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f38:	4413      	add	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	6939      	ldr	r1, [r7, #16]
 8008f40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f42:	f002 fd1f 	bl	800b984 <memcpy>
    NumBytesRead += NumBytesRem;
 8008f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8008f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	4413      	add	r3, r2
 8008f54:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	4413      	add	r3, r2
 8008f64:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d101      	bne.n	8008f74 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8008f70:	2300      	movs	r3, #0
 8008f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008f74:	69ba      	ldr	r2, [r7, #24]
 8008f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4293      	cmp	r3, r2
 8008f82:	bf28      	it	cs
 8008f84:	4613      	movcs	r3, r2
 8008f86:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d019      	beq.n	8008fc2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f94:	4413      	add	r3, r2
 8008f96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	6939      	ldr	r1, [r7, #16]
 8008f9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f9e:	f002 fcf1 	bl	800b984 <memcpy>
    NumBytesRead += NumBytesRem;
 8008fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8008faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	4413      	add	r3, r2
 8008fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008fba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8008fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fcc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3730      	adds	r7, #48	@ 0x30
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	20013190 	.word	0x20013190

08008fdc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08c      	sub	sp, #48	@ 0x30
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80090e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8008fea:	623b      	str	r3, [r7, #32]
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b53      	cmp	r3, #83	@ 0x53
 8008ff4:	d001      	beq.n	8008ffa <SEGGER_RTT_ReadNoLock+0x1e>
 8008ff6:	f7ff fe49 	bl	8008c8c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	4413      	add	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	3360      	adds	r3, #96	@ 0x60
 8009006:	4a37      	ldr	r2, [pc, #220]	@ (80090e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8009008:	4413      	add	r3, r2
 800900a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800901c:	2300      	movs	r3, #0
 800901e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8009020:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	429a      	cmp	r2, r3
 8009026:	d92b      	bls.n	8009080 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4293      	cmp	r3, r2
 8009038:	bf28      	it	cs
 800903a:	4613      	movcs	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	4413      	add	r3, r2
 8009046:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	6939      	ldr	r1, [r7, #16]
 800904c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800904e:	f002 fc99 	bl	800b984 <memcpy>
    NumBytesRead += NumBytesRem;
 8009052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	4413      	add	r3, r2
 8009058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800905a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	4413      	add	r3, r2
 8009060:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800906a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	4413      	add	r3, r2
 8009070:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009078:	429a      	cmp	r2, r3
 800907a:	d101      	bne.n	8009080 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800907c:	2300      	movs	r3, #0
 800907e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4293      	cmp	r3, r2
 800908e:	bf28      	it	cs
 8009090:	4613      	movcs	r3, r2
 8009092:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d019      	beq.n	80090ce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a0:	4413      	add	r3, r2
 80090a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	6939      	ldr	r1, [r7, #16]
 80090a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80090aa:	f002 fc6b 	bl	800b984 <memcpy>
    NumBytesRead += NumBytesRem;
 80090ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	4413      	add	r3, r2
 80090b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80090b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	4413      	add	r3, r2
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80090c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	4413      	add	r3, r2
 80090cc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80090ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3730      	adds	r7, #48	@ 0x30
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20013190 	.word	0x20013190

080090e8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	4613      	mov	r3, r2
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	4413      	add	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	3360      	adds	r3, #96	@ 0x60
 8009104:	4a1f      	ldr	r2, [pc, #124]	@ (8009184 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8009106:	4413      	add	r3, r2
 8009108:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d029      	beq.n	8009166 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8009112:	2b02      	cmp	r3, #2
 8009114:	d82e      	bhi.n	8009174 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800911a:	2b01      	cmp	r3, #1
 800911c:	d013      	beq.n	8009146 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800911e:	e029      	b.n	8009174 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009120:	6978      	ldr	r0, [r7, #20]
 8009122:	f7ff feb2 	bl	8008e8a <_GetAvailWriteSpace>
 8009126:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	429a      	cmp	r2, r3
 800912e:	d202      	bcs.n	8009136 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8009130:	2300      	movs	r3, #0
 8009132:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8009134:	e021      	b.n	800917a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	69b9      	ldr	r1, [r7, #24]
 800913e:	6978      	ldr	r0, [r7, #20]
 8009140:	f7ff fe5b 	bl	8008dfa <_WriteNoCheck>
    break;
 8009144:	e019      	b.n	800917a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009146:	6978      	ldr	r0, [r7, #20]
 8009148:	f7ff fe9f 	bl	8008e8a <_GetAvailWriteSpace>
 800914c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	4293      	cmp	r3, r2
 8009154:	bf28      	it	cs
 8009156:	4613      	movcs	r3, r2
 8009158:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800915a:	69fa      	ldr	r2, [r7, #28]
 800915c:	69b9      	ldr	r1, [r7, #24]
 800915e:	6978      	ldr	r0, [r7, #20]
 8009160:	f7ff fe4b 	bl	8008dfa <_WriteNoCheck>
    break;
 8009164:	e009      	b.n	800917a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	69b9      	ldr	r1, [r7, #24]
 800916a:	6978      	ldr	r0, [r7, #20]
 800916c:	f7ff fde8 	bl	8008d40 <_WriteBlocking>
 8009170:	61f8      	str	r0, [r7, #28]
    break;
 8009172:	e002      	b.n	800917a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
    break;
 8009178:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800917a:	69fb      	ldr	r3, [r7, #28]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3720      	adds	r7, #32
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20013190 	.word	0x20013190

08009188 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	4613      	mov	r3, r2
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	4413      	add	r3, r2
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009224 <SEGGER_RTT_WriteNoLock+0x9c>)
 80091a6:	4413      	add	r3, r2
 80091a8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d029      	beq.n	8009206 <SEGGER_RTT_WriteNoLock+0x7e>
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d82e      	bhi.n	8009214 <SEGGER_RTT_WriteNoLock+0x8c>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <SEGGER_RTT_WriteNoLock+0x38>
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d013      	beq.n	80091e6 <SEGGER_RTT_WriteNoLock+0x5e>
 80091be:	e029      	b.n	8009214 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80091c0:	6978      	ldr	r0, [r7, #20]
 80091c2:	f7ff fe62 	bl	8008e8a <_GetAvailWriteSpace>
 80091c6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d202      	bcs.n	80091d6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80091d4:	e021      	b.n	800921a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	69b9      	ldr	r1, [r7, #24]
 80091de:	6978      	ldr	r0, [r7, #20]
 80091e0:	f7ff fe0b 	bl	8008dfa <_WriteNoCheck>
    break;
 80091e4:	e019      	b.n	800921a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80091e6:	6978      	ldr	r0, [r7, #20]
 80091e8:	f7ff fe4f 	bl	8008e8a <_GetAvailWriteSpace>
 80091ec:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	4293      	cmp	r3, r2
 80091f4:	bf28      	it	cs
 80091f6:	4613      	movcs	r3, r2
 80091f8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	69b9      	ldr	r1, [r7, #24]
 80091fe:	6978      	ldr	r0, [r7, #20]
 8009200:	f7ff fdfb 	bl	8008dfa <_WriteNoCheck>
    break;
 8009204:	e009      	b.n	800921a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	69b9      	ldr	r1, [r7, #24]
 800920a:	6978      	ldr	r0, [r7, #20]
 800920c:	f7ff fd98 	bl	8008d40 <_WriteBlocking>
 8009210:	61f8      	str	r0, [r7, #28]
    break;
 8009212:	e002      	b.n	800921a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009214:	2300      	movs	r3, #0
 8009216:	61fb      	str	r3, [r7, #28]
    break;
 8009218:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800921a:	69fb      	ldr	r3, [r7, #28]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3720      	adds	r7, #32
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20013190 	.word	0x20013190

08009228 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009234:	4b0e      	ldr	r3, [pc, #56]	@ (8009270 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8009236:	61fb      	str	r3, [r7, #28]
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b53      	cmp	r3, #83	@ 0x53
 8009240:	d001      	beq.n	8009246 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8009242:	f7ff fd23 	bl	8008c8c <_DoInit>
  SEGGER_RTT_LOCK();
 8009246:	f3ef 8311 	mrs	r3, BASEPRI
 800924a:	f04f 0120 	mov.w	r1, #32
 800924e:	f381 8811 	msr	BASEPRI, r1
 8009252:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f7ff ff45 	bl	80090e8 <SEGGER_RTT_WriteDownBufferNoLock>
 800925e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8009266:	697b      	ldr	r3, [r7, #20]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3720      	adds	r7, #32
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	20013190 	.word	0x20013190

08009274 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009280:	4b0e      	ldr	r3, [pc, #56]	@ (80092bc <SEGGER_RTT_Write+0x48>)
 8009282:	61fb      	str	r3, [r7, #28]
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b53      	cmp	r3, #83	@ 0x53
 800928c:	d001      	beq.n	8009292 <SEGGER_RTT_Write+0x1e>
 800928e:	f7ff fcfd 	bl	8008c8c <_DoInit>
  SEGGER_RTT_LOCK();
 8009292:	f3ef 8311 	mrs	r3, BASEPRI
 8009296:	f04f 0120 	mov.w	r1, #32
 800929a:	f381 8811 	msr	BASEPRI, r1
 800929e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	68b9      	ldr	r1, [r7, #8]
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7ff ff6f 	bl	8009188 <SEGGER_RTT_WriteNoLock>
 80092aa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80092b2:	697b      	ldr	r3, [r7, #20]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3720      	adds	r7, #32
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20013190 	.word	0x20013190

080092c0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80092ce:	4b3d      	ldr	r3, [pc, #244]	@ (80093c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80092d0:	61bb      	str	r3, [r7, #24]
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b53      	cmp	r3, #83	@ 0x53
 80092da:	d001      	beq.n	80092e0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80092dc:	f7ff fcd6 	bl	8008c8c <_DoInit>
  SEGGER_RTT_LOCK();
 80092e0:	f3ef 8311 	mrs	r3, BASEPRI
 80092e4:	f04f 0120 	mov.w	r1, #32
 80092e8:	f381 8811 	msr	BASEPRI, r1
 80092ec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80092ee:	4b35      	ldr	r3, [pc, #212]	@ (80093c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80092f0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80092f6:	6939      	ldr	r1, [r7, #16]
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	4613      	mov	r3, r2
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	4413      	add	r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	440b      	add	r3, r1
 8009306:	3304      	adds	r3, #4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d008      	beq.n	8009320 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	3301      	adds	r3, #1
 8009312:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	429a      	cmp	r2, r3
 800931c:	dbeb      	blt.n	80092f6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800931e:	e000      	b.n	8009322 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8009320:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	69fa      	ldr	r2, [r7, #28]
 8009328:	429a      	cmp	r2, r3
 800932a:	da3f      	bge.n	80093ac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800932c:	6939      	ldr	r1, [r7, #16]
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	4613      	mov	r3, r2
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	4413      	add	r3, r2
 8009338:	00db      	lsls	r3, r3, #3
 800933a:	440b      	add	r3, r1
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8009340:	6939      	ldr	r1, [r7, #16]
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	4613      	mov	r3, r2
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	4413      	add	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	440b      	add	r3, r1
 8009350:	3304      	adds	r3, #4
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8009356:	6939      	ldr	r1, [r7, #16]
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	4613      	mov	r3, r2
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	4413      	add	r3, r2
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	440b      	add	r3, r1
 8009364:	3320      	adds	r3, #32
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800936a:	6939      	ldr	r1, [r7, #16]
 800936c:	69fa      	ldr	r2, [r7, #28]
 800936e:	4613      	mov	r3, r2
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	4413      	add	r3, r2
 8009374:	00db      	lsls	r3, r3, #3
 8009376:	440b      	add	r3, r1
 8009378:	3328      	adds	r3, #40	@ 0x28
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800937e:	6939      	ldr	r1, [r7, #16]
 8009380:	69fa      	ldr	r2, [r7, #28]
 8009382:	4613      	mov	r3, r2
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	4413      	add	r3, r2
 8009388:	00db      	lsls	r3, r3, #3
 800938a:	440b      	add	r3, r1
 800938c:	3324      	adds	r3, #36	@ 0x24
 800938e:	2200      	movs	r2, #0
 8009390:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8009392:	6939      	ldr	r1, [r7, #16]
 8009394:	69fa      	ldr	r2, [r7, #28]
 8009396:	4613      	mov	r3, r2
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	4413      	add	r3, r2
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	440b      	add	r3, r1
 80093a0:	332c      	adds	r3, #44	@ 0x2c
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80093a6:	f3bf 8f5f 	dmb	sy
 80093aa:	e002      	b.n	80093b2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80093ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093b0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80093b8:	69fb      	ldr	r3, [r7, #28]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3720      	adds	r7, #32
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20013190 	.word	0x20013190

080093c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08a      	sub	sp, #40	@ 0x28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80093d6:	4b21      	ldr	r3, [pc, #132]	@ (800945c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80093d8:	623b      	str	r3, [r7, #32]
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b53      	cmp	r3, #83	@ 0x53
 80093e2:	d001      	beq.n	80093e8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80093e4:	f7ff fc52 	bl	8008c8c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80093e8:	4b1c      	ldr	r3, [pc, #112]	@ (800945c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80093ea:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d82c      	bhi.n	800944c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80093f2:	f3ef 8311 	mrs	r3, BASEPRI
 80093f6:	f04f 0120 	mov.w	r1, #32
 80093fa:	f381 8811 	msr	BASEPRI, r1
 80093fe:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4613      	mov	r3, r2
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	4413      	add	r3, r2
 8009408:	00db      	lsls	r3, r3, #3
 800940a:	3360      	adds	r3, #96	@ 0x60
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	4413      	add	r3, r2
 8009410:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00e      	beq.n	8009436 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2200      	movs	r2, #0
 800942e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2200      	movs	r2, #0
 8009434:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800943a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800943c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009446:	2300      	movs	r3, #0
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
 800944a:	e002      	b.n	8009452 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800944c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009450:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8009452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009454:	4618      	mov	r0, r3
 8009456:	3728      	adds	r7, #40	@ 0x28
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20013190 	.word	0x20013190

08009460 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	60fa      	str	r2, [r7, #12]
 8009476:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b80      	cmp	r3, #128	@ 0x80
 800947c:	d90a      	bls.n	8009494 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800947e:	2380      	movs	r3, #128	@ 0x80
 8009480:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8009482:	e007      	b.n	8009494 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	1c53      	adds	r3, r2, #1
 8009488:	60bb      	str	r3, [r7, #8]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	1c59      	adds	r1, r3, #1
 800948e:	60f9      	str	r1, [r7, #12]
 8009490:	7812      	ldrb	r2, [r2, #0]
 8009492:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	1e5a      	subs	r2, r3, #1
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <_EncodeStr+0x46>
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1ee      	bne.n	8009484 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80094b2:	68fb      	ldr	r3, [r7, #12]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3307      	adds	r3, #7
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80094de:	4b34      	ldr	r3, [pc, #208]	@ (80095b0 <_HandleIncomingPacket+0xd8>)
 80094e0:	7e1b      	ldrb	r3, [r3, #24]
 80094e2:	4618      	mov	r0, r3
 80094e4:	1cfb      	adds	r3, r7, #3
 80094e6:	2201      	movs	r2, #1
 80094e8:	4619      	mov	r1, r3
 80094ea:	f7ff fd77 	bl	8008fdc <SEGGER_RTT_ReadNoLock>
 80094ee:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d057      	beq.n	80095a6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	2b80      	cmp	r3, #128	@ 0x80
 80094fa:	d031      	beq.n	8009560 <_HandleIncomingPacket+0x88>
 80094fc:	2b80      	cmp	r3, #128	@ 0x80
 80094fe:	dc40      	bgt.n	8009582 <_HandleIncomingPacket+0xaa>
 8009500:	2b07      	cmp	r3, #7
 8009502:	dc15      	bgt.n	8009530 <_HandleIncomingPacket+0x58>
 8009504:	2b00      	cmp	r3, #0
 8009506:	dd3c      	ble.n	8009582 <_HandleIncomingPacket+0xaa>
 8009508:	3b01      	subs	r3, #1
 800950a:	2b06      	cmp	r3, #6
 800950c:	d839      	bhi.n	8009582 <_HandleIncomingPacket+0xaa>
 800950e:	a201      	add	r2, pc, #4	@ (adr r2, 8009514 <_HandleIncomingPacket+0x3c>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	08009537 	.word	0x08009537
 8009518:	0800953d 	.word	0x0800953d
 800951c:	08009543 	.word	0x08009543
 8009520:	08009549 	.word	0x08009549
 8009524:	0800954f 	.word	0x0800954f
 8009528:	08009555 	.word	0x08009555
 800952c:	0800955b 	.word	0x0800955b
 8009530:	2b7f      	cmp	r3, #127	@ 0x7f
 8009532:	d033      	beq.n	800959c <_HandleIncomingPacket+0xc4>
 8009534:	e025      	b.n	8009582 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8009536:	f000 fb29 	bl	8009b8c <SEGGER_SYSVIEW_Start>
      break;
 800953a:	e034      	b.n	80095a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800953c:	f000 fbe2 	bl	8009d04 <SEGGER_SYSVIEW_Stop>
      break;
 8009540:	e031      	b.n	80095a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8009542:	f000 fdbb 	bl	800a0bc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8009546:	e02e      	b.n	80095a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009548:	f000 fd80 	bl	800a04c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800954c:	e02b      	b.n	80095a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800954e:	f000 fbff 	bl	8009d50 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8009552:	e028      	b.n	80095a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009554:	f001 f8ec 	bl	800a730 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009558:	e025      	b.n	80095a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800955a:	f001 f8cb 	bl	800a6f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800955e:	e022      	b.n	80095a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009560:	4b13      	ldr	r3, [pc, #76]	@ (80095b0 <_HandleIncomingPacket+0xd8>)
 8009562:	7e1b      	ldrb	r3, [r3, #24]
 8009564:	4618      	mov	r0, r3
 8009566:	1cfb      	adds	r3, r7, #3
 8009568:	2201      	movs	r2, #1
 800956a:	4619      	mov	r1, r3
 800956c:	f7ff fd36 	bl	8008fdc <SEGGER_RTT_ReadNoLock>
 8009570:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d013      	beq.n	80095a0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	4618      	mov	r0, r3
 800957c:	f001 f830 	bl	800a5e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009580:	e00e      	b.n	80095a0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	b25b      	sxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	da0c      	bge.n	80095a4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800958a:	4b09      	ldr	r3, [pc, #36]	@ (80095b0 <_HandleIncomingPacket+0xd8>)
 800958c:	7e1b      	ldrb	r3, [r3, #24]
 800958e:	4618      	mov	r0, r3
 8009590:	1cfb      	adds	r3, r7, #3
 8009592:	2201      	movs	r2, #1
 8009594:	4619      	mov	r1, r3
 8009596:	f7ff fd21 	bl	8008fdc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800959a:	e003      	b.n	80095a4 <_HandleIncomingPacket+0xcc>
      break;
 800959c:	bf00      	nop
 800959e:	e002      	b.n	80095a6 <_HandleIncomingPacket+0xce>
      break;
 80095a0:	bf00      	nop
 80095a2:	e000      	b.n	80095a6 <_HandleIncomingPacket+0xce>
      break;
 80095a4:	bf00      	nop
    }
  }
}
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20017280 	.word	0x20017280

080095b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08c      	sub	sp, #48	@ 0x30
 80095b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80095ba:	2301      	movs	r3, #1
 80095bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80095be:	1d3b      	adds	r3, r7, #4
 80095c0:	3301      	adds	r3, #1
 80095c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095c8:	4b32      	ldr	r3, [pc, #200]	@ (8009694 <_TrySendOverflowPacket+0xe0>)
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095ce:	e00b      	b.n	80095e8 <_TrySendOverflowPacket+0x34>
 80095d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d6:	1c59      	adds	r1, r3, #1
 80095d8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80095da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e4:	09db      	lsrs	r3, r3, #7
 80095e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80095ec:	d8f0      	bhi.n	80095d0 <_TrySendOverflowPacket+0x1c>
 80095ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f0:	1c5a      	adds	r2, r3, #1
 80095f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095f6:	b2d2      	uxtb	r2, r2
 80095f8:	701a      	strb	r2, [r3, #0]
 80095fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80095fe:	4b26      	ldr	r3, [pc, #152]	@ (8009698 <_TrySendOverflowPacket+0xe4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009604:	4b23      	ldr	r3, [pc, #140]	@ (8009694 <_TrySendOverflowPacket+0xe0>)
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	627b      	str	r3, [r7, #36]	@ 0x24
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	623b      	str	r3, [r7, #32]
 8009616:	e00b      	b.n	8009630 <_TrySendOverflowPacket+0x7c>
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	b2da      	uxtb	r2, r3
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	1c59      	adds	r1, r3, #1
 8009620:	6279      	str	r1, [r7, #36]	@ 0x24
 8009622:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009626:	b2d2      	uxtb	r2, r2
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	09db      	lsrs	r3, r3, #7
 800962e:	623b      	str	r3, [r7, #32]
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	2b7f      	cmp	r3, #127	@ 0x7f
 8009634:	d8f0      	bhi.n	8009618 <_TrySendOverflowPacket+0x64>
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	627a      	str	r2, [r7, #36]	@ 0x24
 800963c:	6a3a      	ldr	r2, [r7, #32]
 800963e:	b2d2      	uxtb	r2, r2
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009644:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8009646:	4b13      	ldr	r3, [pc, #76]	@ (8009694 <_TrySendOverflowPacket+0xe0>)
 8009648:	785b      	ldrb	r3, [r3, #1]
 800964a:	4618      	mov	r0, r3
 800964c:	1d3b      	adds	r3, r7, #4
 800964e:	69fa      	ldr	r2, [r7, #28]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	461a      	mov	r2, r3
 8009654:	1d3b      	adds	r3, r7, #4
 8009656:	4619      	mov	r1, r3
 8009658:	f7f6 fdba 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800965c:	4603      	mov	r3, r0
 800965e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8009660:	f7ff fa8a 	bl	8008b78 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d009      	beq.n	800967e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800966a:	4a0a      	ldr	r2, [pc, #40]	@ (8009694 <_TrySendOverflowPacket+0xe0>)
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009670:	4b08      	ldr	r3, [pc, #32]	@ (8009694 <_TrySendOverflowPacket+0xe0>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	3b01      	subs	r3, #1
 8009676:	b2da      	uxtb	r2, r3
 8009678:	4b06      	ldr	r3, [pc, #24]	@ (8009694 <_TrySendOverflowPacket+0xe0>)
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	e004      	b.n	8009688 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800967e:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <_TrySendOverflowPacket+0xe0>)
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	3301      	adds	r3, #1
 8009684:	4a03      	ldr	r2, [pc, #12]	@ (8009694 <_TrySendOverflowPacket+0xe0>)
 8009686:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8009688:	693b      	ldr	r3, [r7, #16]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3730      	adds	r7, #48	@ 0x30
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20017280 	.word	0x20017280
 8009698:	e0001004 	.word	0xe0001004

0800969c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b08a      	sub	sp, #40	@ 0x28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80096a8:	4b96      	ldr	r3, [pc, #600]	@ (8009904 <_SendPacket+0x268>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d010      	beq.n	80096d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80096b0:	4b94      	ldr	r3, [pc, #592]	@ (8009904 <_SendPacket+0x268>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 8130 	beq.w	800991a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80096ba:	4b92      	ldr	r3, [pc, #584]	@ (8009904 <_SendPacket+0x268>)
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d109      	bne.n	80096d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80096c2:	f7ff ff77 	bl	80095b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80096c6:	4b8f      	ldr	r3, [pc, #572]	@ (8009904 <_SendPacket+0x268>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	f040 8127 	bne.w	800991e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80096d0:	e001      	b.n	80096d6 <_SendPacket+0x3a>
    goto Send;
 80096d2:	bf00      	nop
 80096d4:	e000      	b.n	80096d8 <_SendPacket+0x3c>
Send:
 80096d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b1f      	cmp	r3, #31
 80096dc:	d809      	bhi.n	80096f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80096de:	4b89      	ldr	r3, [pc, #548]	@ (8009904 <_SendPacket+0x268>)
 80096e0:	69da      	ldr	r2, [r3, #28]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	fa22 f303 	lsr.w	r3, r2, r3
 80096e8:	f003 0301 	and.w	r3, r3, #1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f040 8118 	bne.w	8009922 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b17      	cmp	r3, #23
 80096f6:	d807      	bhi.n	8009708 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	60fb      	str	r3, [r7, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	b2da      	uxtb	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	701a      	strb	r2, [r3, #0]
 8009706:	e0c4      	b.n	8009892 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	2b7f      	cmp	r3, #127	@ 0x7f
 8009714:	d912      	bls.n	800973c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	09da      	lsrs	r2, r3, #7
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3b01      	subs	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	b2d2      	uxtb	r2, r2
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	3a01      	subs	r2, #1
 800972e:	60fa      	str	r2, [r7, #12]
 8009730:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009734:	b2da      	uxtb	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e006      	b.n	800974a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3b01      	subs	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	b2da      	uxtb	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b7e      	cmp	r3, #126	@ 0x7e
 800974e:	d807      	bhi.n	8009760 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3b01      	subs	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	b2da      	uxtb	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	e098      	b.n	8009892 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009766:	d212      	bcs.n	800978e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	09da      	lsrs	r2, r3, #7
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3b01      	subs	r3, #1
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	b2db      	uxtb	r3, r3
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	3a01      	subs	r2, #1
 8009780:	60fa      	str	r2, [r7, #12]
 8009782:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009786:	b2da      	uxtb	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	e081      	b.n	8009892 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009794:	d21d      	bcs.n	80097d2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	0b9a      	lsrs	r2, r3, #14
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3b01      	subs	r3, #1
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	b2d2      	uxtb	r2, r2
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	09db      	lsrs	r3, r3, #7
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	3a01      	subs	r2, #1
 80097b0:	60fa      	str	r2, [r7, #12]
 80097b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	3a01      	subs	r2, #1
 80097c4:	60fa      	str	r2, [r7, #12]
 80097c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	701a      	strb	r2, [r3, #0]
 80097d0:	e05f      	b.n	8009892 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097d8:	d228      	bcs.n	800982c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	0d5a      	lsrs	r2, r3, #21
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	b2d2      	uxtb	r2, r2
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	0b9b      	lsrs	r3, r3, #14
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	3a01      	subs	r2, #1
 80097f4:	60fa      	str	r2, [r7, #12]
 80097f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	09db      	lsrs	r3, r3, #7
 8009804:	b2db      	uxtb	r3, r3
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	3a01      	subs	r2, #1
 800980a:	60fa      	str	r2, [r7, #12]
 800980c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009810:	b2da      	uxtb	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	3a01      	subs	r2, #1
 800981e:	60fa      	str	r2, [r7, #12]
 8009820:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009824:	b2da      	uxtb	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	701a      	strb	r2, [r3, #0]
 800982a:	e032      	b.n	8009892 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	0f1a      	lsrs	r2, r3, #28
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3b01      	subs	r3, #1
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	b2d2      	uxtb	r2, r2
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	0d5b      	lsrs	r3, r3, #21
 8009840:	b2db      	uxtb	r3, r3
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	3a01      	subs	r2, #1
 8009846:	60fa      	str	r2, [r7, #12]
 8009848:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800984c:	b2da      	uxtb	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	0b9b      	lsrs	r3, r3, #14
 8009856:	b2db      	uxtb	r3, r3
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	3a01      	subs	r2, #1
 800985c:	60fa      	str	r2, [r7, #12]
 800985e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009862:	b2da      	uxtb	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	09db      	lsrs	r3, r3, #7
 800986c:	b2db      	uxtb	r3, r3
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	3a01      	subs	r2, #1
 8009872:	60fa      	str	r2, [r7, #12]
 8009874:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009878:	b2da      	uxtb	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	b2db      	uxtb	r3, r3
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	3a01      	subs	r2, #1
 8009886:	60fa      	str	r2, [r7, #12]
 8009888:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800988c:	b2da      	uxtb	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009892:	4b1d      	ldr	r3, [pc, #116]	@ (8009908 <_SendPacket+0x26c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009898:	4b1a      	ldr	r3, [pc, #104]	@ (8009904 <_SendPacket+0x268>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	623b      	str	r3, [r7, #32]
 80098aa:	e00b      	b.n	80098c4 <_SendPacket+0x228>
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b2:	1c59      	adds	r1, r3, #1
 80098b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80098b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80098ba:	b2d2      	uxtb	r2, r2
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	09db      	lsrs	r3, r3, #7
 80098c2:	623b      	str	r3, [r7, #32]
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80098c8:	d8f0      	bhi.n	80098ac <_SendPacket+0x210>
 80098ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098cc:	1c5a      	adds	r2, r3, #1
 80098ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80098d0:	6a3a      	ldr	r2, [r7, #32]
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80098da:	4b0a      	ldr	r3, [pc, #40]	@ (8009904 <_SendPacket+0x268>)
 80098dc:	785b      	ldrb	r3, [r3, #1]
 80098de:	4618      	mov	r0, r3
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	461a      	mov	r2, r3
 80098e8:	68f9      	ldr	r1, [r7, #12]
 80098ea:	f7f6 fc71 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80098ee:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80098f0:	f7ff f942 	bl	8008b78 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d008      	beq.n	800990c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80098fa:	4a02      	ldr	r2, [pc, #8]	@ (8009904 <_SendPacket+0x268>)
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	60d3      	str	r3, [r2, #12]
 8009900:	e010      	b.n	8009924 <_SendPacket+0x288>
 8009902:	bf00      	nop
 8009904:	20017280 	.word	0x20017280
 8009908:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800990c:	4b19      	ldr	r3, [pc, #100]	@ (8009974 <_SendPacket+0x2d8>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	3301      	adds	r3, #1
 8009912:	b2da      	uxtb	r2, r3
 8009914:	4b17      	ldr	r3, [pc, #92]	@ (8009974 <_SendPacket+0x2d8>)
 8009916:	701a      	strb	r2, [r3, #0]
 8009918:	e004      	b.n	8009924 <_SendPacket+0x288>
    goto SendDone;
 800991a:	bf00      	nop
 800991c:	e002      	b.n	8009924 <_SendPacket+0x288>
      goto SendDone;
 800991e:	bf00      	nop
 8009920:	e000      	b.n	8009924 <_SendPacket+0x288>
      goto SendDone;
 8009922:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8009924:	4b13      	ldr	r3, [pc, #76]	@ (8009974 <_SendPacket+0x2d8>)
 8009926:	7e1b      	ldrb	r3, [r3, #24]
 8009928:	4619      	mov	r1, r3
 800992a:	4a13      	ldr	r2, [pc, #76]	@ (8009978 <_SendPacket+0x2dc>)
 800992c:	460b      	mov	r3, r1
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	440b      	add	r3, r1
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	4413      	add	r3, r2
 8009936:	336c      	adds	r3, #108	@ 0x6c
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	4b0e      	ldr	r3, [pc, #56]	@ (8009974 <_SendPacket+0x2d8>)
 800993c:	7e1b      	ldrb	r3, [r3, #24]
 800993e:	4618      	mov	r0, r3
 8009940:	490d      	ldr	r1, [pc, #52]	@ (8009978 <_SendPacket+0x2dc>)
 8009942:	4603      	mov	r3, r0
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	4403      	add	r3, r0
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	440b      	add	r3, r1
 800994c:	3370      	adds	r3, #112	@ 0x70
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d00b      	beq.n	800996c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009954:	4b07      	ldr	r3, [pc, #28]	@ (8009974 <_SendPacket+0x2d8>)
 8009956:	789b      	ldrb	r3, [r3, #2]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d107      	bne.n	800996c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800995c:	4b05      	ldr	r3, [pc, #20]	@ (8009974 <_SendPacket+0x2d8>)
 800995e:	2201      	movs	r2, #1
 8009960:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009962:	f7ff fdb9 	bl	80094d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009966:	4b03      	ldr	r3, [pc, #12]	@ (8009974 <_SendPacket+0x2d8>)
 8009968:	2200      	movs	r2, #0
 800996a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800996c:	bf00      	nop
 800996e:	3728      	adds	r7, #40	@ 0x28
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20017280 	.word	0x20017280
 8009978:	20013190 	.word	0x20013190

0800997c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af02      	add	r7, sp, #8
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800998a:	2300      	movs	r3, #0
 800998c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009990:	4917      	ldr	r1, [pc, #92]	@ (80099f0 <SEGGER_SYSVIEW_Init+0x74>)
 8009992:	4818      	ldr	r0, [pc, #96]	@ (80099f4 <SEGGER_SYSVIEW_Init+0x78>)
 8009994:	f7ff fc94 	bl	80092c0 <SEGGER_RTT_AllocUpBuffer>
 8009998:	4603      	mov	r3, r0
 800999a:	b2da      	uxtb	r2, r3
 800999c:	4b16      	ldr	r3, [pc, #88]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 800999e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80099a0:	4b15      	ldr	r3, [pc, #84]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099a2:	785a      	ldrb	r2, [r3, #1]
 80099a4:	4b14      	ldr	r3, [pc, #80]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099a6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80099a8:	4b13      	ldr	r3, [pc, #76]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099aa:	7e1b      	ldrb	r3, [r3, #24]
 80099ac:	4618      	mov	r0, r3
 80099ae:	2300      	movs	r3, #0
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	2308      	movs	r3, #8
 80099b4:	4a11      	ldr	r2, [pc, #68]	@ (80099fc <SEGGER_SYSVIEW_Init+0x80>)
 80099b6:	490f      	ldr	r1, [pc, #60]	@ (80099f4 <SEGGER_SYSVIEW_Init+0x78>)
 80099b8:	f7ff fd06 	bl	80093c8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80099bc:	4b0e      	ldr	r3, [pc, #56]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099be:	2200      	movs	r2, #0
 80099c0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80099c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009a00 <SEGGER_SYSVIEW_Init+0x84>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a0c      	ldr	r2, [pc, #48]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099c8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80099ca:	4a0b      	ldr	r2, [pc, #44]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80099d0:	4a09      	ldr	r2, [pc, #36]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80099d6:	4a08      	ldr	r2, [pc, #32]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80099dc:	4a06      	ldr	r2, [pc, #24]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80099e2:	4b05      	ldr	r3, [pc, #20]	@ (80099f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80099e8:	bf00      	nop
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20015278 	.word	0x20015278
 80099f4:	0800ddfc 	.word	0x0800ddfc
 80099f8:	20017280 	.word	0x20017280
 80099fc:	20017278 	.word	0x20017278
 8009a00:	e0001004 	.word	0xe0001004

08009a04 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8009a0c:	4a04      	ldr	r2, [pc, #16]	@ (8009a20 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6113      	str	r3, [r2, #16]
}
 8009a12:	bf00      	nop
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	20017280 	.word	0x20017280

08009a24 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8009a30:	f04f 0120 	mov.w	r1, #32
 8009a34:	f381 8811 	msr	BASEPRI, r1
 8009a38:	60fb      	str	r3, [r7, #12]
 8009a3a:	4808      	ldr	r0, [pc, #32]	@ (8009a5c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8009a3c:	f7ff fd40 	bl	80094c0 <_PreparePacket>
 8009a40:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	68b9      	ldr	r1, [r7, #8]
 8009a46:	68b8      	ldr	r0, [r7, #8]
 8009a48:	f7ff fe28 	bl	800969c <_SendPacket>
  RECORD_END();
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f383 8811 	msr	BASEPRI, r3
}
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	200172b0 	.word	0x200172b0

08009a60 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a6e:	f04f 0120 	mov.w	r1, #32
 8009a72:	f381 8811 	msr	BASEPRI, r1
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	4816      	ldr	r0, [pc, #88]	@ (8009ad4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8009a7a:	f7ff fd21 	bl	80094c0 <_PreparePacket>
 8009a7e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	61fb      	str	r3, [r7, #28]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	61bb      	str	r3, [r7, #24]
 8009a8c:	e00b      	b.n	8009aa6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	1c59      	adds	r1, r3, #1
 8009a96:	61f9      	str	r1, [r7, #28]
 8009a98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009a9c:	b2d2      	uxtb	r2, r2
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	09db      	lsrs	r3, r3, #7
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8009aaa:	d8f0      	bhi.n	8009a8e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	61fa      	str	r2, [r7, #28]
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	b2d2      	uxtb	r2, r2
 8009ab6:	701a      	strb	r2, [r3, #0]
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	6938      	ldr	r0, [r7, #16]
 8009ac2:	f7ff fdeb 	bl	800969c <_SendPacket>
  RECORD_END();
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f383 8811 	msr	BASEPRI, r3
}
 8009acc:	bf00      	nop
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	200172b0 	.word	0x200172b0

08009ad8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08c      	sub	sp, #48	@ 0x30
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009ae4:	f3ef 8311 	mrs	r3, BASEPRI
 8009ae8:	f04f 0120 	mov.w	r1, #32
 8009aec:	f381 8811 	msr	BASEPRI, r1
 8009af0:	61fb      	str	r3, [r7, #28]
 8009af2:	4825      	ldr	r0, [pc, #148]	@ (8009b88 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009af4:	f7ff fce4 	bl	80094c0 <_PreparePacket>
 8009af8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b06:	e00b      	b.n	8009b20 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	1c59      	adds	r1, r3, #1
 8009b10:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009b12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1c:	09db      	lsrs	r3, r3, #7
 8009b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b24:	d8f0      	bhi.n	8009b08 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	623b      	str	r3, [r7, #32]
 8009b3e:	e00b      	b.n	8009b58 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b46:	1c59      	adds	r1, r3, #1
 8009b48:	6279      	str	r1, [r7, #36]	@ 0x24
 8009b4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b4e:	b2d2      	uxtb	r2, r2
 8009b50:	701a      	strb	r2, [r3, #0]
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	09db      	lsrs	r3, r3, #7
 8009b56:	623b      	str	r3, [r7, #32]
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b5c:	d8f0      	bhi.n	8009b40 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b64:	6a3a      	ldr	r2, [r7, #32]
 8009b66:	b2d2      	uxtb	r2, r2
 8009b68:	701a      	strb	r2, [r3, #0]
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	6979      	ldr	r1, [r7, #20]
 8009b72:	69b8      	ldr	r0, [r7, #24]
 8009b74:	f7ff fd92 	bl	800969c <_SendPacket>
  RECORD_END();
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	f383 8811 	msr	BASEPRI, r3
}
 8009b7e:	bf00      	nop
 8009b80:	3730      	adds	r7, #48	@ 0x30
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200172b0 	.word	0x200172b0

08009b8c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08c      	sub	sp, #48	@ 0x30
 8009b90:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8009b92:	4b59      	ldr	r3, [pc, #356]	@ (8009cf8 <SEGGER_SYSVIEW_Start+0x16c>)
 8009b94:	2201      	movs	r2, #1
 8009b96:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009b98:	f3ef 8311 	mrs	r3, BASEPRI
 8009b9c:	f04f 0120 	mov.w	r1, #32
 8009ba0:	f381 8811 	msr	BASEPRI, r1
 8009ba4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009ba6:	4b54      	ldr	r3, [pc, #336]	@ (8009cf8 <SEGGER_SYSVIEW_Start+0x16c>)
 8009ba8:	785b      	ldrb	r3, [r3, #1]
 8009baa:	220a      	movs	r2, #10
 8009bac:	4953      	ldr	r1, [pc, #332]	@ (8009cfc <SEGGER_SYSVIEW_Start+0x170>)
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7f6 fb0e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8009bba:	f7fe ffdd 	bl	8008b78 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009bbe:	200a      	movs	r0, #10
 8009bc0:	f7ff ff30 	bl	8009a24 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009bc4:	f3ef 8311 	mrs	r3, BASEPRI
 8009bc8:	f04f 0120 	mov.w	r1, #32
 8009bcc:	f381 8811 	msr	BASEPRI, r1
 8009bd0:	60bb      	str	r3, [r7, #8]
 8009bd2:	484b      	ldr	r0, [pc, #300]	@ (8009d00 <SEGGER_SYSVIEW_Start+0x174>)
 8009bd4:	f7ff fc74 	bl	80094c0 <_PreparePacket>
 8009bd8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009be2:	4b45      	ldr	r3, [pc, #276]	@ (8009cf8 <SEGGER_SYSVIEW_Start+0x16c>)
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009be8:	e00b      	b.n	8009c02 <SEGGER_SYSVIEW_Start+0x76>
 8009bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf0:	1c59      	adds	r1, r3, #1
 8009bf2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009bf4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	701a      	strb	r2, [r3, #0]
 8009bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfe:	09db      	lsrs	r3, r3, #7
 8009c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c06:	d8f0      	bhi.n	8009bea <SEGGER_SYSVIEW_Start+0x5e>
 8009c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c10:	b2d2      	uxtb	r2, r2
 8009c12:	701a      	strb	r2, [r3, #0]
 8009c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c1c:	4b36      	ldr	r3, [pc, #216]	@ (8009cf8 <SEGGER_SYSVIEW_Start+0x16c>)
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	623b      	str	r3, [r7, #32]
 8009c22:	e00b      	b.n	8009c3c <SEGGER_SYSVIEW_Start+0xb0>
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2a:	1c59      	adds	r1, r3, #1
 8009c2c:	6279      	str	r1, [r7, #36]	@ 0x24
 8009c2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009c32:	b2d2      	uxtb	r2, r2
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	09db      	lsrs	r3, r3, #7
 8009c3a:	623b      	str	r3, [r7, #32]
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c40:	d8f0      	bhi.n	8009c24 <SEGGER_SYSVIEW_Start+0x98>
 8009c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	627a      	str	r2, [r7, #36]	@ 0x24
 8009c48:	6a3a      	ldr	r2, [r7, #32]
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	701a      	strb	r2, [r3, #0]
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c50:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	61fb      	str	r3, [r7, #28]
 8009c56:	4b28      	ldr	r3, [pc, #160]	@ (8009cf8 <SEGGER_SYSVIEW_Start+0x16c>)
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	61bb      	str	r3, [r7, #24]
 8009c5c:	e00b      	b.n	8009c76 <SEGGER_SYSVIEW_Start+0xea>
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	1c59      	adds	r1, r3, #1
 8009c66:	61f9      	str	r1, [r7, #28]
 8009c68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009c6c:	b2d2      	uxtb	r2, r2
 8009c6e:	701a      	strb	r2, [r3, #0]
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	09db      	lsrs	r3, r3, #7
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c7a:	d8f0      	bhi.n	8009c5e <SEGGER_SYSVIEW_Start+0xd2>
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	61fa      	str	r2, [r7, #28]
 8009c82:	69ba      	ldr	r2, [r7, #24]
 8009c84:	b2d2      	uxtb	r2, r2
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	2300      	movs	r3, #0
 8009c92:	613b      	str	r3, [r7, #16]
 8009c94:	e00b      	b.n	8009cae <SEGGER_SYSVIEW_Start+0x122>
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	1c59      	adds	r1, r3, #1
 8009c9e:	6179      	str	r1, [r7, #20]
 8009ca0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009ca4:	b2d2      	uxtb	r2, r2
 8009ca6:	701a      	strb	r2, [r3, #0]
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	09db      	lsrs	r3, r3, #7
 8009cac:	613b      	str	r3, [r7, #16]
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cb2:	d8f0      	bhi.n	8009c96 <SEGGER_SYSVIEW_Start+0x10a>
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	617a      	str	r2, [r7, #20]
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	b2d2      	uxtb	r2, r2
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009cc4:	2218      	movs	r2, #24
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff fce7 	bl	800969c <_SendPacket>
      RECORD_END();
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009cd4:	4b08      	ldr	r3, [pc, #32]	@ (8009cf8 <SEGGER_SYSVIEW_Start+0x16c>)
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009cdc:	4b06      	ldr	r3, [pc, #24]	@ (8009cf8 <SEGGER_SYSVIEW_Start+0x16c>)
 8009cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009ce2:	f000 f9eb 	bl	800a0bc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009ce6:	f000 f9b1 	bl	800a04c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009cea:	f000 fd21 	bl	800a730 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009cee:	bf00      	nop
 8009cf0:	3730      	adds	r7, #48	@ 0x30
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20017280 	.word	0x20017280
 8009cfc:	0800e004 	.word	0x0800e004
 8009d00:	200172b0 	.word	0x200172b0

08009d04 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009d0a:	f3ef 8311 	mrs	r3, BASEPRI
 8009d0e:	f04f 0120 	mov.w	r1, #32
 8009d12:	f381 8811 	msr	BASEPRI, r1
 8009d16:	607b      	str	r3, [r7, #4]
 8009d18:	480b      	ldr	r0, [pc, #44]	@ (8009d48 <SEGGER_SYSVIEW_Stop+0x44>)
 8009d1a:	f7ff fbd1 	bl	80094c0 <_PreparePacket>
 8009d1e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009d20:	4b0a      	ldr	r3, [pc, #40]	@ (8009d4c <SEGGER_SYSVIEW_Stop+0x48>)
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d007      	beq.n	8009d38 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009d28:	220b      	movs	r2, #11
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6838      	ldr	r0, [r7, #0]
 8009d2e:	f7ff fcb5 	bl	800969c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009d32:	4b06      	ldr	r3, [pc, #24]	@ (8009d4c <SEGGER_SYSVIEW_Stop+0x48>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f383 8811 	msr	BASEPRI, r3
}
 8009d3e:	bf00      	nop
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	200172b0 	.word	0x200172b0
 8009d4c:	20017280 	.word	0x20017280

08009d50 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08c      	sub	sp, #48	@ 0x30
 8009d54:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009d56:	f3ef 8311 	mrs	r3, BASEPRI
 8009d5a:	f04f 0120 	mov.w	r1, #32
 8009d5e:	f381 8811 	msr	BASEPRI, r1
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	4845      	ldr	r0, [pc, #276]	@ (8009e7c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009d66:	f7ff fbab 	bl	80094c0 <_PreparePacket>
 8009d6a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d74:	4b42      	ldr	r3, [pc, #264]	@ (8009e80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d7a:	e00b      	b.n	8009d94 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	1c59      	adds	r1, r3, #1
 8009d84:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009d86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	701a      	strb	r2, [r3, #0]
 8009d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d90:	09db      	lsrs	r3, r3, #7
 8009d92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d96:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d98:	d8f0      	bhi.n	8009d7c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009da0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dae:	4b34      	ldr	r3, [pc, #208]	@ (8009e80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	623b      	str	r3, [r7, #32]
 8009db4:	e00b      	b.n	8009dce <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	1c59      	adds	r1, r3, #1
 8009dbe:	6279      	str	r1, [r7, #36]	@ 0x24
 8009dc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	701a      	strb	r2, [r3, #0]
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	09db      	lsrs	r3, r3, #7
 8009dcc:	623b      	str	r3, [r7, #32]
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dd2:	d8f0      	bhi.n	8009db6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8009dda:	6a3a      	ldr	r2, [r7, #32]
 8009ddc:	b2d2      	uxtb	r2, r2
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	61fb      	str	r3, [r7, #28]
 8009de8:	4b25      	ldr	r3, [pc, #148]	@ (8009e80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	61bb      	str	r3, [r7, #24]
 8009dee:	e00b      	b.n	8009e08 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	1c59      	adds	r1, r3, #1
 8009df8:	61f9      	str	r1, [r7, #28]
 8009dfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009dfe:	b2d2      	uxtb	r2, r2
 8009e00:	701a      	strb	r2, [r3, #0]
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	09db      	lsrs	r3, r3, #7
 8009e06:	61bb      	str	r3, [r7, #24]
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e0c:	d8f0      	bhi.n	8009df0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	1c5a      	adds	r2, r3, #1
 8009e12:	61fa      	str	r2, [r7, #28]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	b2d2      	uxtb	r2, r2
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	617b      	str	r3, [r7, #20]
 8009e22:	2300      	movs	r3, #0
 8009e24:	613b      	str	r3, [r7, #16]
 8009e26:	e00b      	b.n	8009e40 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	1c59      	adds	r1, r3, #1
 8009e30:	6179      	str	r1, [r7, #20]
 8009e32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009e36:	b2d2      	uxtb	r2, r2
 8009e38:	701a      	strb	r2, [r3, #0]
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	09db      	lsrs	r3, r3, #7
 8009e3e:	613b      	str	r3, [r7, #16]
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e44:	d8f0      	bhi.n	8009e28 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	617a      	str	r2, [r7, #20]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	701a      	strb	r2, [r3, #0]
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009e56:	2218      	movs	r2, #24
 8009e58:	6879      	ldr	r1, [r7, #4]
 8009e5a:	68b8      	ldr	r0, [r7, #8]
 8009e5c:	f7ff fc1e 	bl	800969c <_SendPacket>
  RECORD_END();
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009e66:	4b06      	ldr	r3, [pc, #24]	@ (8009e80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d002      	beq.n	8009e74 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009e6e:	4b04      	ldr	r3, [pc, #16]	@ (8009e80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e72:	4798      	blx	r3
  }
}
 8009e74:	bf00      	nop
 8009e76:	3730      	adds	r7, #48	@ 0x30
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	200172b0 	.word	0x200172b0
 8009e80:	20017280 	.word	0x20017280

08009e84 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b092      	sub	sp, #72	@ 0x48
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009e8c:	f3ef 8311 	mrs	r3, BASEPRI
 8009e90:	f04f 0120 	mov.w	r1, #32
 8009e94:	f381 8811 	msr	BASEPRI, r1
 8009e98:	617b      	str	r3, [r7, #20]
 8009e9a:	486a      	ldr	r0, [pc, #424]	@ (800a044 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009e9c:	f7ff fb10 	bl	80094c0 <_PreparePacket>
 8009ea0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	4b66      	ldr	r3, [pc, #408]	@ (800a048 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009eb6:	e00b      	b.n	8009ed0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ebe:	1c59      	adds	r1, r3, #1
 8009ec0:	6479      	str	r1, [r7, #68]	@ 0x44
 8009ec2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009ec6:	b2d2      	uxtb	r2, r2
 8009ec8:	701a      	strb	r2, [r3, #0]
 8009eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ecc:	09db      	lsrs	r3, r3, #7
 8009ece:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ed2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ed4:	d8f0      	bhi.n	8009eb8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8009ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	647a      	str	r2, [r7, #68]	@ 0x44
 8009edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	701a      	strb	r2, [r3, #0]
 8009ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ee4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ef0:	e00b      	b.n	8009f0a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ef8:	1c59      	adds	r1, r3, #1
 8009efa:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8009efc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f00:	b2d2      	uxtb	r2, r2
 8009f02:	701a      	strb	r2, [r3, #0]
 8009f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f06:	09db      	lsrs	r3, r3, #7
 8009f08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f0e:	d8f0      	bhi.n	8009ef2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8009f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009f16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f18:	b2d2      	uxtb	r2, r2
 8009f1a:	701a      	strb	r2, [r3, #0]
 8009f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f1e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	2220      	movs	r2, #32
 8009f26:	4619      	mov	r1, r3
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f7ff fa99 	bl	8009460 <_EncodeStr>
 8009f2e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009f30:	2209      	movs	r2, #9
 8009f32:	68f9      	ldr	r1, [r7, #12]
 8009f34:	6938      	ldr	r0, [r7, #16]
 8009f36:	f7ff fbb1 	bl	800969c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	4b40      	ldr	r3, [pc, #256]	@ (800a048 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f4e:	e00b      	b.n	8009f68 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f56:	1c59      	adds	r1, r3, #1
 8009f58:	6379      	str	r1, [r7, #52]	@ 0x34
 8009f5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	701a      	strb	r2, [r3, #0]
 8009f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f64:	09db      	lsrs	r3, r3, #7
 8009f66:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f6c:	d8f0      	bhi.n	8009f50 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	637a      	str	r2, [r7, #52]	@ 0x34
 8009f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f76:	b2d2      	uxtb	r2, r2
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f88:	e00b      	b.n	8009fa2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f90:	1c59      	adds	r1, r3, #1
 8009f92:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009f94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f98:	b2d2      	uxtb	r2, r2
 8009f9a:	701a      	strb	r2, [r3, #0]
 8009f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9e:	09db      	lsrs	r3, r3, #7
 8009fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fa6:	d8f0      	bhi.n	8009f8a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009fae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fb0:	b2d2      	uxtb	r2, r2
 8009fb2:	701a      	strb	r2, [r3, #0]
 8009fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	623b      	str	r3, [r7, #32]
 8009fc2:	e00b      	b.n	8009fdc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fca:	1c59      	adds	r1, r3, #1
 8009fcc:	6279      	str	r1, [r7, #36]	@ 0x24
 8009fce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009fd2:	b2d2      	uxtb	r2, r2
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	09db      	lsrs	r3, r3, #7
 8009fda:	623b      	str	r3, [r7, #32]
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fe0:	d8f0      	bhi.n	8009fc4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe4:	1c5a      	adds	r2, r3, #1
 8009fe6:	627a      	str	r2, [r7, #36]	@ 0x24
 8009fe8:	6a3a      	ldr	r2, [r7, #32]
 8009fea:	b2d2      	uxtb	r2, r2
 8009fec:	701a      	strb	r2, [r3, #0]
 8009fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	61fb      	str	r3, [r7, #28]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	61bb      	str	r3, [r7, #24]
 8009ffc:	e00b      	b.n	800a016 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	b2da      	uxtb	r2, r3
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	1c59      	adds	r1, r3, #1
 800a006:	61f9      	str	r1, [r7, #28]
 800a008:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a00c:	b2d2      	uxtb	r2, r2
 800a00e:	701a      	strb	r2, [r3, #0]
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	09db      	lsrs	r3, r3, #7
 800a014:	61bb      	str	r3, [r7, #24]
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b7f      	cmp	r3, #127	@ 0x7f
 800a01a:	d8f0      	bhi.n	8009ffe <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	61fa      	str	r2, [r7, #28]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	b2d2      	uxtb	r2, r2
 800a026:	701a      	strb	r2, [r3, #0]
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a02c:	2215      	movs	r2, #21
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	6938      	ldr	r0, [r7, #16]
 800a032:	f7ff fb33 	bl	800969c <_SendPacket>
  RECORD_END();
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f383 8811 	msr	BASEPRI, r3
}
 800a03c:	bf00      	nop
 800a03e:	3748      	adds	r7, #72	@ 0x48
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	200172b0 	.word	0x200172b0
 800a048:	20017280 	.word	0x20017280

0800a04c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a050:	4b07      	ldr	r3, [pc, #28]	@ (800a070 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d008      	beq.n	800a06a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a058:	4b05      	ldr	r3, [pc, #20]	@ (800a070 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a062:	4b03      	ldr	r3, [pc, #12]	@ (800a070 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4798      	blx	r3
  }
}
 800a06a:	bf00      	nop
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20017280 	.word	0x20017280

0800a074 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a07c:	f3ef 8311 	mrs	r3, BASEPRI
 800a080:	f04f 0120 	mov.w	r1, #32
 800a084:	f381 8811 	msr	BASEPRI, r1
 800a088:	617b      	str	r3, [r7, #20]
 800a08a:	480b      	ldr	r0, [pc, #44]	@ (800a0b8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a08c:	f7ff fa18 	bl	80094c0 <_PreparePacket>
 800a090:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a092:	2280      	movs	r2, #128	@ 0x80
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	6938      	ldr	r0, [r7, #16]
 800a098:	f7ff f9e2 	bl	8009460 <_EncodeStr>
 800a09c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a09e:	220e      	movs	r2, #14
 800a0a0:	68f9      	ldr	r1, [r7, #12]
 800a0a2:	6938      	ldr	r0, [r7, #16]
 800a0a4:	f7ff fafa 	bl	800969c <_SendPacket>
  RECORD_END();
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f383 8811 	msr	BASEPRI, r3
}
 800a0ae:	bf00      	nop
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	200172b0 	.word	0x200172b0

0800a0bc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a0bc:	b590      	push	{r4, r7, lr}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a0c2:	4b15      	ldr	r3, [pc, #84]	@ (800a118 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d01a      	beq.n	800a100 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a0ca:	4b13      	ldr	r3, [pc, #76]	@ (800a118 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d015      	beq.n	800a100 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a0d4:	4b10      	ldr	r3, [pc, #64]	@ (800a118 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a0d6:	6a1b      	ldr	r3, [r3, #32]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4798      	blx	r3
 800a0dc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a0e0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a0e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0e6:	f04f 0200 	mov.w	r2, #0
 800a0ea:	f04f 0300 	mov.w	r3, #0
 800a0ee:	000a      	movs	r2, r1
 800a0f0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	200d      	movs	r0, #13
 800a0fa:	f7ff fced 	bl	8009ad8 <SEGGER_SYSVIEW_RecordU32x2>
 800a0fe:	e006      	b.n	800a10e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a100:	4b06      	ldr	r3, [pc, #24]	@ (800a11c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4619      	mov	r1, r3
 800a106:	200c      	movs	r0, #12
 800a108:	f7ff fcaa 	bl	8009a60 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	bd90      	pop	{r4, r7, pc}
 800a116:	bf00      	nop
 800a118:	20017280 	.word	0x20017280
 800a11c:	e0001004 	.word	0xe0001004

0800a120 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a126:	f3ef 8311 	mrs	r3, BASEPRI
 800a12a:	f04f 0120 	mov.w	r1, #32
 800a12e:	f381 8811 	msr	BASEPRI, r1
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	4819      	ldr	r0, [pc, #100]	@ (800a19c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800a136:	f7ff f9c3 	bl	80094c0 <_PreparePacket>
 800a13a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800a140:	4b17      	ldr	r3, [pc, #92]	@ (800a1a0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a148:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	613b      	str	r3, [r7, #16]
 800a152:	e00b      	b.n	800a16c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	b2da      	uxtb	r2, r3
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	1c59      	adds	r1, r3, #1
 800a15c:	6179      	str	r1, [r7, #20]
 800a15e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a162:	b2d2      	uxtb	r2, r2
 800a164:	701a      	strb	r2, [r3, #0]
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	09db      	lsrs	r3, r3, #7
 800a16a:	613b      	str	r3, [r7, #16]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a170:	d8f0      	bhi.n	800a154 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	617a      	str	r2, [r7, #20]
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	b2d2      	uxtb	r2, r2
 800a17c:	701a      	strb	r2, [r3, #0]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800a182:	2202      	movs	r2, #2
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	68b8      	ldr	r0, [r7, #8]
 800a188:	f7ff fa88 	bl	800969c <_SendPacket>
  RECORD_END();
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f383 8811 	msr	BASEPRI, r3
}
 800a192:	bf00      	nop
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	200172b0 	.word	0x200172b0
 800a1a0:	e000ed04 	.word	0xe000ed04

0800a1a4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a1aa:	f3ef 8311 	mrs	r3, BASEPRI
 800a1ae:	f04f 0120 	mov.w	r1, #32
 800a1b2:	f381 8811 	msr	BASEPRI, r1
 800a1b6:	607b      	str	r3, [r7, #4]
 800a1b8:	4807      	ldr	r0, [pc, #28]	@ (800a1d8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a1ba:	f7ff f981 	bl	80094c0 <_PreparePacket>
 800a1be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6838      	ldr	r0, [r7, #0]
 800a1c6:	f7ff fa69 	bl	800969c <_SendPacket>
  RECORD_END();
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f383 8811 	msr	BASEPRI, r3
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	200172b0 	.word	0x200172b0

0800a1dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a1e2:	f3ef 8311 	mrs	r3, BASEPRI
 800a1e6:	f04f 0120 	mov.w	r1, #32
 800a1ea:	f381 8811 	msr	BASEPRI, r1
 800a1ee:	607b      	str	r3, [r7, #4]
 800a1f0:	4807      	ldr	r0, [pc, #28]	@ (800a210 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a1f2:	f7ff f965 	bl	80094c0 <_PreparePacket>
 800a1f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a1f8:	2212      	movs	r2, #18
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6838      	ldr	r0, [r7, #0]
 800a1fe:	f7ff fa4d 	bl	800969c <_SendPacket>
  RECORD_END();
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f383 8811 	msr	BASEPRI, r3
}
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	200172b0 	.word	0x200172b0

0800a214 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a21c:	f3ef 8311 	mrs	r3, BASEPRI
 800a220:	f04f 0120 	mov.w	r1, #32
 800a224:	f381 8811 	msr	BASEPRI, r1
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	4817      	ldr	r0, [pc, #92]	@ (800a288 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 800a22c:	f7ff f948 	bl	80094c0 <_PreparePacket>
 800a230:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	61fb      	str	r3, [r7, #28]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	61bb      	str	r3, [r7, #24]
 800a23e:	e00b      	b.n	800a258 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	b2da      	uxtb	r2, r3
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	1c59      	adds	r1, r3, #1
 800a248:	61f9      	str	r1, [r7, #28]
 800a24a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a24e:	b2d2      	uxtb	r2, r2
 800a250:	701a      	strb	r2, [r3, #0]
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	09db      	lsrs	r3, r3, #7
 800a256:	61bb      	str	r3, [r7, #24]
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a25c:	d8f0      	bhi.n	800a240 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	61fa      	str	r2, [r7, #28]
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	b2d2      	uxtb	r2, r2
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800a26e:	221c      	movs	r2, #28
 800a270:	68f9      	ldr	r1, [r7, #12]
 800a272:	6938      	ldr	r0, [r7, #16]
 800a274:	f7ff fa12 	bl	800969c <_SendPacket>
  RECORD_END();
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f383 8811 	msr	BASEPRI, r3
}
 800a27e:	bf00      	nop
 800a280:	3720      	adds	r7, #32
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200172b0 	.word	0x200172b0

0800a28c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	@ 0x28
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a296:	f3ef 8311 	mrs	r3, BASEPRI
 800a29a:	f04f 0120 	mov.w	r1, #32
 800a29e:	f381 8811 	msr	BASEPRI, r1
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	4824      	ldr	r0, [pc, #144]	@ (800a338 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800a2a6:	f7ff f90b 	bl	80094c0 <_PreparePacket>
 800a2aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	623b      	str	r3, [r7, #32]
 800a2b8:	e00b      	b.n	800a2d2 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	1c59      	adds	r1, r3, #1
 800a2c2:	6279      	str	r1, [r7, #36]	@ 0x24
 800a2c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a2c8:	b2d2      	uxtb	r2, r2
 800a2ca:	701a      	strb	r2, [r3, #0]
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	09db      	lsrs	r3, r3, #7
 800a2d0:	623b      	str	r3, [r7, #32]
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2d6:	d8f0      	bhi.n	800a2ba <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	627a      	str	r2, [r7, #36]	@ 0x24
 800a2de:	6a3a      	ldr	r2, [r7, #32]
 800a2e0:	b2d2      	uxtb	r2, r2
 800a2e2:	701a      	strb	r2, [r3, #0]
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	61fb      	str	r3, [r7, #28]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	61bb      	str	r3, [r7, #24]
 800a2f0:	e00b      	b.n	800a30a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	1c59      	adds	r1, r3, #1
 800a2fa:	61f9      	str	r1, [r7, #28]
 800a2fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a300:	b2d2      	uxtb	r2, r2
 800a302:	701a      	strb	r2, [r3, #0]
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	09db      	lsrs	r3, r3, #7
 800a308:	61bb      	str	r3, [r7, #24]
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a30e:	d8f0      	bhi.n	800a2f2 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	61fa      	str	r2, [r7, #28]
 800a316:	69ba      	ldr	r2, [r7, #24]
 800a318:	b2d2      	uxtb	r2, r2
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800a320:	221c      	movs	r2, #28
 800a322:	68f9      	ldr	r1, [r7, #12]
 800a324:	6938      	ldr	r0, [r7, #16]
 800a326:	f7ff f9b9 	bl	800969c <_SendPacket>
  RECORD_END();
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f383 8811 	msr	BASEPRI, r3
}
 800a330:	bf00      	nop
 800a332:	3728      	adds	r7, #40	@ 0x28
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	200172b0 	.word	0x200172b0

0800a33c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a342:	f3ef 8311 	mrs	r3, BASEPRI
 800a346:	f04f 0120 	mov.w	r1, #32
 800a34a:	f381 8811 	msr	BASEPRI, r1
 800a34e:	607b      	str	r3, [r7, #4]
 800a350:	4807      	ldr	r0, [pc, #28]	@ (800a370 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a352:	f7ff f8b5 	bl	80094c0 <_PreparePacket>
 800a356:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a358:	2211      	movs	r2, #17
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6838      	ldr	r0, [r7, #0]
 800a35e:	f7ff f99d 	bl	800969c <_SendPacket>
  RECORD_END();
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f383 8811 	msr	BASEPRI, r3
}
 800a368:	bf00      	nop
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	200172b0 	.word	0x200172b0

0800a374 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a37c:	f3ef 8311 	mrs	r3, BASEPRI
 800a380:	f04f 0120 	mov.w	r1, #32
 800a384:	f381 8811 	msr	BASEPRI, r1
 800a388:	617b      	str	r3, [r7, #20]
 800a38a:	4819      	ldr	r0, [pc, #100]	@ (800a3f0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a38c:	f7ff f898 	bl	80094c0 <_PreparePacket>
 800a390:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a396:	4b17      	ldr	r3, [pc, #92]	@ (800a3f4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	61fb      	str	r3, [r7, #28]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	61bb      	str	r3, [r7, #24]
 800a3a8:	e00b      	b.n	800a3c2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	1c59      	adds	r1, r3, #1
 800a3b2:	61f9      	str	r1, [r7, #28]
 800a3b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a3b8:	b2d2      	uxtb	r2, r2
 800a3ba:	701a      	strb	r2, [r3, #0]
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	09db      	lsrs	r3, r3, #7
 800a3c0:	61bb      	str	r3, [r7, #24]
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3c6:	d8f0      	bhi.n	800a3aa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	1c5a      	adds	r2, r3, #1
 800a3cc:	61fa      	str	r2, [r7, #28]
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	b2d2      	uxtb	r2, r2
 800a3d2:	701a      	strb	r2, [r3, #0]
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a3d8:	2208      	movs	r2, #8
 800a3da:	68f9      	ldr	r1, [r7, #12]
 800a3dc:	6938      	ldr	r0, [r7, #16]
 800a3de:	f7ff f95d 	bl	800969c <_SendPacket>
  RECORD_END();
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f383 8811 	msr	BASEPRI, r3
}
 800a3e8:	bf00      	nop
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	200172b0 	.word	0x200172b0
 800a3f4:	20017280 	.word	0x20017280

0800a3f8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b088      	sub	sp, #32
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a400:	f3ef 8311 	mrs	r3, BASEPRI
 800a404:	f04f 0120 	mov.w	r1, #32
 800a408:	f381 8811 	msr	BASEPRI, r1
 800a40c:	617b      	str	r3, [r7, #20]
 800a40e:	4819      	ldr	r0, [pc, #100]	@ (800a474 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a410:	f7ff f856 	bl	80094c0 <_PreparePacket>
 800a414:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a41a:	4b17      	ldr	r3, [pc, #92]	@ (800a478 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	61fb      	str	r3, [r7, #28]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	61bb      	str	r3, [r7, #24]
 800a42c:	e00b      	b.n	800a446 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	b2da      	uxtb	r2, r3
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	1c59      	adds	r1, r3, #1
 800a436:	61f9      	str	r1, [r7, #28]
 800a438:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a43c:	b2d2      	uxtb	r2, r2
 800a43e:	701a      	strb	r2, [r3, #0]
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	09db      	lsrs	r3, r3, #7
 800a444:	61bb      	str	r3, [r7, #24]
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	2b7f      	cmp	r3, #127	@ 0x7f
 800a44a:	d8f0      	bhi.n	800a42e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	1c5a      	adds	r2, r3, #1
 800a450:	61fa      	str	r2, [r7, #28]
 800a452:	69ba      	ldr	r2, [r7, #24]
 800a454:	b2d2      	uxtb	r2, r2
 800a456:	701a      	strb	r2, [r3, #0]
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a45c:	2204      	movs	r2, #4
 800a45e:	68f9      	ldr	r1, [r7, #12]
 800a460:	6938      	ldr	r0, [r7, #16]
 800a462:	f7ff f91b 	bl	800969c <_SendPacket>
  RECORD_END();
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f383 8811 	msr	BASEPRI, r3
}
 800a46c:	bf00      	nop
 800a46e:	3720      	adds	r7, #32
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200172b0 	.word	0x200172b0
 800a478:	20017280 	.word	0x20017280

0800a47c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a484:	f3ef 8311 	mrs	r3, BASEPRI
 800a488:	f04f 0120 	mov.w	r1, #32
 800a48c:	f381 8811 	msr	BASEPRI, r1
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	4819      	ldr	r0, [pc, #100]	@ (800a4f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a494:	f7ff f814 	bl	80094c0 <_PreparePacket>
 800a498:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a49e:	4b17      	ldr	r3, [pc, #92]	@ (800a4fc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	61fb      	str	r3, [r7, #28]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	61bb      	str	r3, [r7, #24]
 800a4b0:	e00b      	b.n	800a4ca <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	1c59      	adds	r1, r3, #1
 800a4ba:	61f9      	str	r1, [r7, #28]
 800a4bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a4c0:	b2d2      	uxtb	r2, r2
 800a4c2:	701a      	strb	r2, [r3, #0]
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	09db      	lsrs	r3, r3, #7
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4ce:	d8f0      	bhi.n	800a4b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	61fa      	str	r2, [r7, #28]
 800a4d6:	69ba      	ldr	r2, [r7, #24]
 800a4d8:	b2d2      	uxtb	r2, r2
 800a4da:	701a      	strb	r2, [r3, #0]
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a4e0:	2206      	movs	r2, #6
 800a4e2:	68f9      	ldr	r1, [r7, #12]
 800a4e4:	6938      	ldr	r0, [r7, #16]
 800a4e6:	f7ff f8d9 	bl	800969c <_SendPacket>
  RECORD_END();
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f383 8811 	msr	BASEPRI, r3
}
 800a4f0:	bf00      	nop
 800a4f2:	3720      	adds	r7, #32
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	200172b0 	.word	0x200172b0
 800a4fc:	20017280 	.word	0x20017280

0800a500 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800a500:	b580      	push	{r7, lr}
 800a502:	b08a      	sub	sp, #40	@ 0x28
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a50a:	f3ef 8311 	mrs	r3, BASEPRI
 800a50e:	f04f 0120 	mov.w	r1, #32
 800a512:	f381 8811 	msr	BASEPRI, r1
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	4827      	ldr	r0, [pc, #156]	@ (800a5b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800a51a:	f7fe ffd1 	bl	80094c0 <_PreparePacket>
 800a51e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a524:	4b25      	ldr	r3, [pc, #148]	@ (800a5bc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	627b      	str	r3, [r7, #36]	@ 0x24
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	623b      	str	r3, [r7, #32]
 800a536:	e00b      	b.n	800a550 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53e:	1c59      	adds	r1, r3, #1
 800a540:	6279      	str	r1, [r7, #36]	@ 0x24
 800a542:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a546:	b2d2      	uxtb	r2, r2
 800a548:	701a      	strb	r2, [r3, #0]
 800a54a:	6a3b      	ldr	r3, [r7, #32]
 800a54c:	09db      	lsrs	r3, r3, #7
 800a54e:	623b      	str	r3, [r7, #32]
 800a550:	6a3b      	ldr	r3, [r7, #32]
 800a552:	2b7f      	cmp	r3, #127	@ 0x7f
 800a554:	d8f0      	bhi.n	800a538 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a55c:	6a3a      	ldr	r2, [r7, #32]
 800a55e:	b2d2      	uxtb	r2, r2
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a564:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	61fb      	str	r3, [r7, #28]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	61bb      	str	r3, [r7, #24]
 800a56e:	e00b      	b.n	800a588 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	b2da      	uxtb	r2, r3
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	1c59      	adds	r1, r3, #1
 800a578:	61f9      	str	r1, [r7, #28]
 800a57a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a57e:	b2d2      	uxtb	r2, r2
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	09db      	lsrs	r3, r3, #7
 800a586:	61bb      	str	r3, [r7, #24]
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a58c:	d8f0      	bhi.n	800a570 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	61fa      	str	r2, [r7, #28]
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800a59e:	2207      	movs	r2, #7
 800a5a0:	68f9      	ldr	r1, [r7, #12]
 800a5a2:	6938      	ldr	r0, [r7, #16]
 800a5a4:	f7ff f87a 	bl	800969c <_SendPacket>
  RECORD_END();
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f383 8811 	msr	BASEPRI, r3
}
 800a5ae:	bf00      	nop
 800a5b0:	3728      	adds	r7, #40	@ 0x28
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	200172b0 	.word	0x200172b0
 800a5bc:	20017280 	.word	0x20017280

0800a5c0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800a5c8:	4b04      	ldr	r3, [pc, #16]	@ (800a5dc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	1ad3      	subs	r3, r2, r3
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	20017280 	.word	0x20017280

0800a5e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08c      	sub	sp, #48	@ 0x30
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a5ea:	4b40      	ldr	r3, [pc, #256]	@ (800a6ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d077      	beq.n	800a6e2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800a5f2:	4b3e      	ldr	r3, [pc, #248]	@ (800a6ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5fc:	e008      	b.n	800a610 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a606:	2b00      	cmp	r3, #0
 800a608:	d007      	beq.n	800a61a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	3301      	adds	r3, #1
 800a60e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a614:	429a      	cmp	r2, r3
 800a616:	d3f2      	bcc.n	800a5fe <SEGGER_SYSVIEW_SendModule+0x1e>
 800a618:	e000      	b.n	800a61c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a61a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d055      	beq.n	800a6ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a622:	f3ef 8311 	mrs	r3, BASEPRI
 800a626:	f04f 0120 	mov.w	r1, #32
 800a62a:	f381 8811 	msr	BASEPRI, r1
 800a62e:	617b      	str	r3, [r7, #20]
 800a630:	482f      	ldr	r0, [pc, #188]	@ (800a6f0 <SEGGER_SYSVIEW_SendModule+0x110>)
 800a632:	f7fe ff45 	bl	80094c0 <_PreparePacket>
 800a636:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	623b      	str	r3, [r7, #32]
 800a644:	e00b      	b.n	800a65e <SEGGER_SYSVIEW_SendModule+0x7e>
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64c:	1c59      	adds	r1, r3, #1
 800a64e:	6279      	str	r1, [r7, #36]	@ 0x24
 800a650:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a654:	b2d2      	uxtb	r2, r2
 800a656:	701a      	strb	r2, [r3, #0]
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	09db      	lsrs	r3, r3, #7
 800a65c:	623b      	str	r3, [r7, #32]
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	2b7f      	cmp	r3, #127	@ 0x7f
 800a662:	d8f0      	bhi.n	800a646 <SEGGER_SYSVIEW_SendModule+0x66>
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	627a      	str	r2, [r7, #36]	@ 0x24
 800a66a:	6a3a      	ldr	r2, [r7, #32]
 800a66c:	b2d2      	uxtb	r2, r2
 800a66e:	701a      	strb	r2, [r3, #0]
 800a670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a672:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	61fb      	str	r3, [r7, #28]
 800a678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	61bb      	str	r3, [r7, #24]
 800a67e:	e00b      	b.n	800a698 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	b2da      	uxtb	r2, r3
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	1c59      	adds	r1, r3, #1
 800a688:	61f9      	str	r1, [r7, #28]
 800a68a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	09db      	lsrs	r3, r3, #7
 800a696:	61bb      	str	r3, [r7, #24]
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a69c:	d8f0      	bhi.n	800a680 <SEGGER_SYSVIEW_SendModule+0xa0>
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	61fa      	str	r2, [r7, #28]
 800a6a4:	69ba      	ldr	r2, [r7, #24]
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	701a      	strb	r2, [r3, #0]
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2280      	movs	r2, #128	@ 0x80
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7fe fed2 	bl	8009460 <_EncodeStr>
 800a6bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a6be:	2216      	movs	r2, #22
 800a6c0:	68f9      	ldr	r1, [r7, #12]
 800a6c2:	6938      	ldr	r0, [r7, #16]
 800a6c4:	f7fe ffea 	bl	800969c <_SendPacket>
      RECORD_END();
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d006      	beq.n	800a6e2 <SEGGER_SYSVIEW_SendModule+0x102>
 800a6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d002      	beq.n	800a6e2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800a6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	4798      	blx	r3
    }
  }
}
 800a6e2:	bf00      	nop
 800a6e4:	3730      	adds	r7, #48	@ 0x30
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	200172a8 	.word	0x200172a8
 800a6f0:	200172b0 	.word	0x200172b0

0800a6f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a72c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00f      	beq.n	800a722 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a702:	4b0a      	ldr	r3, [pc, #40]	@ (800a72c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1f2      	bne.n	800a708 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	200172a8 	.word	0x200172a8

0800a730 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a736:	f3ef 8311 	mrs	r3, BASEPRI
 800a73a:	f04f 0120 	mov.w	r1, #32
 800a73e:	f381 8811 	msr	BASEPRI, r1
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	4817      	ldr	r0, [pc, #92]	@ (800a7a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a746:	f7fe febb 	bl	80094c0 <_PreparePacket>
 800a74a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	4b14      	ldr	r3, [pc, #80]	@ (800a7a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	613b      	str	r3, [r7, #16]
 800a75a:	e00b      	b.n	800a774 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	1c59      	adds	r1, r3, #1
 800a764:	6179      	str	r1, [r7, #20]
 800a766:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a76a:	b2d2      	uxtb	r2, r2
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	09db      	lsrs	r3, r3, #7
 800a772:	613b      	str	r3, [r7, #16]
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2b7f      	cmp	r3, #127	@ 0x7f
 800a778:	d8f0      	bhi.n	800a75c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	617a      	str	r2, [r7, #20]
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	b2d2      	uxtb	r2, r2
 800a784:	701a      	strb	r2, [r3, #0]
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a78a:	221b      	movs	r2, #27
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	68b8      	ldr	r0, [r7, #8]
 800a790:	f7fe ff84 	bl	800969c <_SendPacket>
  RECORD_END();
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f383 8811 	msr	BASEPRI, r3
}
 800a79a:	bf00      	nop
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	200172b0 	.word	0x200172b0
 800a7a8:	200172ac 	.word	0x200172ac

0800a7ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08a      	sub	sp, #40	@ 0x28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a7b4:	f3ef 8311 	mrs	r3, BASEPRI
 800a7b8:	f04f 0120 	mov.w	r1, #32
 800a7bc:	f381 8811 	msr	BASEPRI, r1
 800a7c0:	617b      	str	r3, [r7, #20]
 800a7c2:	4827      	ldr	r0, [pc, #156]	@ (800a860 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a7c4:	f7fe fe7c 	bl	80094c0 <_PreparePacket>
 800a7c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a7ca:	2280      	movs	r2, #128	@ 0x80
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	6938      	ldr	r0, [r7, #16]
 800a7d0:	f7fe fe46 	bl	8009460 <_EncodeStr>
 800a7d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7da:	2301      	movs	r3, #1
 800a7dc:	623b      	str	r3, [r7, #32]
 800a7de:	e00b      	b.n	800a7f8 <SEGGER_SYSVIEW_Warn+0x4c>
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e6:	1c59      	adds	r1, r3, #1
 800a7e8:	6279      	str	r1, [r7, #36]	@ 0x24
 800a7ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a7ee:	b2d2      	uxtb	r2, r2
 800a7f0:	701a      	strb	r2, [r3, #0]
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	09db      	lsrs	r3, r3, #7
 800a7f6:	623b      	str	r3, [r7, #32]
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7fc:	d8f0      	bhi.n	800a7e0 <SEGGER_SYSVIEW_Warn+0x34>
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	627a      	str	r2, [r7, #36]	@ 0x24
 800a804:	6a3a      	ldr	r2, [r7, #32]
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	701a      	strb	r2, [r3, #0]
 800a80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	61fb      	str	r3, [r7, #28]
 800a812:	2300      	movs	r3, #0
 800a814:	61bb      	str	r3, [r7, #24]
 800a816:	e00b      	b.n	800a830 <SEGGER_SYSVIEW_Warn+0x84>
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	1c59      	adds	r1, r3, #1
 800a820:	61f9      	str	r1, [r7, #28]
 800a822:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a826:	b2d2      	uxtb	r2, r2
 800a828:	701a      	strb	r2, [r3, #0]
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	09db      	lsrs	r3, r3, #7
 800a82e:	61bb      	str	r3, [r7, #24]
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	2b7f      	cmp	r3, #127	@ 0x7f
 800a834:	d8f0      	bhi.n	800a818 <SEGGER_SYSVIEW_Warn+0x6c>
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	61fa      	str	r2, [r7, #28]
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	b2d2      	uxtb	r2, r2
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a846:	221a      	movs	r2, #26
 800a848:	68f9      	ldr	r1, [r7, #12]
 800a84a:	6938      	ldr	r0, [r7, #16]
 800a84c:	f7fe ff26 	bl	800969c <_SendPacket>
  RECORD_END();
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f383 8811 	msr	BASEPRI, r3
}
 800a856:	bf00      	nop
 800a858:	3728      	adds	r7, #40	@ 0x28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	200172b0 	.word	0x200172b0

0800a864 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a868:	4b13      	ldr	r3, [pc, #76]	@ (800a8b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a86a:	7e1b      	ldrb	r3, [r3, #24]
 800a86c:	4619      	mov	r1, r3
 800a86e:	4a13      	ldr	r2, [pc, #76]	@ (800a8bc <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a870:	460b      	mov	r3, r1
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	440b      	add	r3, r1
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	4413      	add	r3, r2
 800a87a:	336c      	adds	r3, #108	@ 0x6c
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a880:	7e1b      	ldrb	r3, [r3, #24]
 800a882:	4618      	mov	r0, r3
 800a884:	490d      	ldr	r1, [pc, #52]	@ (800a8bc <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a886:	4603      	mov	r3, r0
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	4403      	add	r3, r0
 800a88c:	00db      	lsls	r3, r3, #3
 800a88e:	440b      	add	r3, r1
 800a890:	3370      	adds	r3, #112	@ 0x70
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	429a      	cmp	r2, r3
 800a896:	d00b      	beq.n	800a8b0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a898:	4b07      	ldr	r3, [pc, #28]	@ (800a8b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a89a:	789b      	ldrb	r3, [r3, #2]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d107      	bne.n	800a8b0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a8a0:	4b05      	ldr	r3, [pc, #20]	@ (800a8b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a8a6:	f7fe fe17 	bl	80094d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a8aa:	4b03      	ldr	r3, [pc, #12]	@ (800a8b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800a8b0:	4b01      	ldr	r3, [pc, #4]	@ (800a8b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8b2:	781b      	ldrb	r3, [r3, #0]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20017280 	.word	0x20017280
 800a8bc:	20013190 	.word	0x20013190

0800a8c0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	f7fe fcce 	bl	8009274 <SEGGER_RTT_Write>
  return len;
 800a8d8:	683b      	ldr	r3, [r7, #0]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <button_gpio_init>:

TaskHandle_t	button_task_handle;

static BaseType_t		status;

static void button_gpio_init(void) {
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	gpiox;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	603b      	str	r3, [r7, #0]
 800a8ee:	4b13      	ldr	r3, [pc, #76]	@ (800a93c <button_gpio_init+0x58>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f2:	4a12      	ldr	r2, [pc, #72]	@ (800a93c <button_gpio_init+0x58>)
 800a8f4:	f043 0301 	orr.w	r3, r3, #1
 800a8f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8fa:	4b10      	ldr	r3, [pc, #64]	@ (800a93c <button_gpio_init+0x58>)
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	683b      	ldr	r3, [r7, #0]
	gpiox.Pull = GPIO_NOPULL;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]
	gpiox.Speed = GPIO_SPEED_LOW;
 800a90a:	2300      	movs	r3, #0
 800a90c:	613b      	str	r3, [r7, #16]
	gpiox.Mode = GPIO_MODE_IT_RISING;
 800a90e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800a912:	60bb      	str	r3, [r7, #8]
	gpiox.Pin = GPIO_PIN_0;
 800a914:	2301      	movs	r3, #1
 800a916:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &gpiox);
 800a918:	1d3b      	adds	r3, r7, #4
 800a91a:	4619      	mov	r1, r3
 800a91c:	4808      	ldr	r0, [pc, #32]	@ (800a940 <button_gpio_init+0x5c>)
 800a91e:	f7f7 fa3b 	bl	8001d98 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 800a922:	2200      	movs	r2, #0
 800a924:	210f      	movs	r1, #15
 800a926:	2006      	movs	r0, #6
 800a928:	f7f7 f97a 	bl	8001c20 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a92c:	2006      	movs	r0, #6
 800a92e:	f7f7 f993 	bl	8001c58 <HAL_NVIC_EnableIRQ>
}
 800a932:	bf00      	nop
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	40023800 	.word	0x40023800
 800a940:	40020000 	.word	0x40020000

0800a944 <button_task_init>:

void button_task_init(void) {
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af02      	add	r7, sp, #8
	button_gpio_init();
 800a94a:	f7ff ffcb 	bl	800a8e4 <button_gpio_init>
	status = xTaskCreate(v_button_task_handler, "Button_Task", TASK_STACK_SIZE, NULL, 3, &button_task_handle);
 800a94e:	4b0c      	ldr	r3, [pc, #48]	@ (800a980 <button_task_init+0x3c>)
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	2303      	movs	r3, #3
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	2300      	movs	r3, #0
 800a958:	22c8      	movs	r2, #200	@ 0xc8
 800a95a:	490a      	ldr	r1, [pc, #40]	@ (800a984 <button_task_init+0x40>)
 800a95c:	480a      	ldr	r0, [pc, #40]	@ (800a988 <button_task_init+0x44>)
 800a95e:	f7fb f860 	bl	8005a22 <xTaskCreate>
 800a962:	4603      	mov	r3, r0
 800a964:	4a09      	ldr	r2, [pc, #36]	@ (800a98c <button_task_init+0x48>)
 800a966:	6013      	str	r3, [r2, #0]
	configASSERT_RTOS(status == pdPASS, "Button Task Init failed\n");
 800a968:	4b08      	ldr	r3, [pc, #32]	@ (800a98c <button_task_init+0x48>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d004      	beq.n	800a97a <button_task_init+0x36>
 800a970:	4a07      	ldr	r2, [pc, #28]	@ (800a990 <button_task_init+0x4c>)
 800a972:	2123      	movs	r1, #35	@ 0x23
 800a974:	4807      	ldr	r0, [pc, #28]	@ (800a994 <button_task_init+0x50>)
 800a976:	f000 fa0d 	bl	800ad94 <Error_Handler_RTOS>
}
 800a97a:	bf00      	nop
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	20017394 	.word	0x20017394
 800a984:	0800de04 	.word	0x0800de04
 800a988:	0800a999 	.word	0x0800a999
 800a98c:	20017398 	.word	0x20017398
 800a990:	0800de10 	.word	0x0800de10
 800a994:	0800de2c 	.word	0x0800de2c

0800a998 <v_button_task_handler>:



void v_button_task_handler(void *pvParameters) {
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	while(1) {
		if (xSemaphoreTake(xbutton_Sema,portMAX_DELAY) == pdTRUE) {
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a9cc <v_button_task_handler+0x34>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fa fd43 	bl	8005434 <xQueueSemaphoreTake>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d1f5      	bne.n	800a9a0 <v_button_task_handler+0x8>
			print_date_and_Time();
 800a9b4:	f000 f80e 	bl	800a9d4 <print_date_and_Time>
			TaskHandle_t	led_orange_task = get_led_task_orange_handle();
 800a9b8:	f000 f916 	bl	800abe8 <get_led_task_orange_handle>
 800a9bc:	60f8      	str	r0, [r7, #12]
			//xTaskNotify(led_orange_task, 0, eNoAction);	// this is replaced with Event grouping
			xEventGroupSetBits(xSensor_Button_Event_Group, (BIT_1 | BIT_0));
 800a9be:	4b04      	ldr	r3, [pc, #16]	@ (800a9d0 <v_button_task_handler+0x38>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2103      	movs	r1, #3
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fa f829 	bl	8004a1c <xEventGroupSetBits>
		if (xSemaphoreTake(xbutton_Sema,portMAX_DELAY) == pdTRUE) {
 800a9ca:	e7e9      	b.n	800a9a0 <v_button_task_handler+0x8>
 800a9cc:	200001fc 	.word	0x200001fc
 800a9d0:	2000020c 	.word	0x2000020c

0800a9d4 <print_date_and_Time>:
// return task handle of button_task
TaskHandle_t get_button_task_handle(void) {
	return button_task_handle;
}

void print_date_and_Time(void) {
 800a9d4:	b5b0      	push	{r4, r5, r7, lr}
 800a9d6:	b08a      	sub	sp, #40	@ 0x28
 800a9d8:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef	rtc_time;
	RTC_DateTypeDef rtc_date;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800a9da:	1d3b      	adds	r3, r7, #4
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4619      	mov	r1, r3
 800a9e0:	480f      	ldr	r0, [pc, #60]	@ (800aa20 <print_date_and_Time+0x4c>)
 800a9e2:	f7f8 fa94 	bl	8002f0e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	480c      	ldr	r0, [pc, #48]	@ (800aa20 <print_date_and_Time+0x4c>)
 800a9ee:	f7f8 fb70 	bl	80030d2 <HAL_RTC_GetDate>
	print_debug_msg("Current Time and Date is: %02d:%02d:%02d --- %02d-%02d-%02d \r\n", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, rtc_date.Month, rtc_date.Date, rtc_date.Year);
 800a9f2:	793b      	ldrb	r3, [r7, #4]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	797b      	ldrb	r3, [r7, #5]
 800a9f8:	461c      	mov	r4, r3
 800a9fa:	79bb      	ldrb	r3, [r7, #6]
 800a9fc:	461d      	mov	r5, r3
 800a9fe:	787b      	ldrb	r3, [r7, #1]
 800aa00:	78ba      	ldrb	r2, [r7, #2]
 800aa02:	78f9      	ldrb	r1, [r7, #3]
 800aa04:	9102      	str	r1, [sp, #8]
 800aa06:	9201      	str	r2, [sp, #4]
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	4601      	mov	r1, r0
 800aa10:	4804      	ldr	r0, [pc, #16]	@ (800aa24 <print_date_and_Time+0x50>)
 800aa12:	f000 f999 	bl	800ad48 <print_debug_msg>


}
 800aa16:	bf00      	nop
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bdb0      	pop	{r4, r5, r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	2000031c 	.word	0x2000031c
 800aa24:	0800de48 	.word	0x0800de48

0800aa28 <led_task_init>:
TaskHandle_t		led_task_orange_handle;

static BaseType_t status;

// This creates LED_TASKS for Green and Orange LED's
void led_task_init(void) {
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af02      	add	r7, sp, #8
	GPIO_Init_Led_Task();
 800aa2e:	f000 f897 	bl	800ab60 <GPIO_Init_Led_Task>
	status = xTaskCreate(v_led_task_green, "LED_GREEN", TASK_STACK_SIZE, NULL, 1, &led_task_green_handle);
 800aa32:	4b17      	ldr	r3, [pc, #92]	@ (800aa90 <led_task_init+0x68>)
 800aa34:	9301      	str	r3, [sp, #4]
 800aa36:	2301      	movs	r3, #1
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	22c8      	movs	r2, #200	@ 0xc8
 800aa3e:	4915      	ldr	r1, [pc, #84]	@ (800aa94 <led_task_init+0x6c>)
 800aa40:	4815      	ldr	r0, [pc, #84]	@ (800aa98 <led_task_init+0x70>)
 800aa42:	f7fa ffee 	bl	8005a22 <xTaskCreate>
 800aa46:	4603      	mov	r3, r0
 800aa48:	4a14      	ldr	r2, [pc, #80]	@ (800aa9c <led_task_init+0x74>)
 800aa4a:	6013      	str	r3, [r2, #0]
	configASSERT_RTOS(status == pdPASS, "Led Green Task Create");
 800aa4c:	4b13      	ldr	r3, [pc, #76]	@ (800aa9c <led_task_init+0x74>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d004      	beq.n	800aa5e <led_task_init+0x36>
 800aa54:	4a12      	ldr	r2, [pc, #72]	@ (800aaa0 <led_task_init+0x78>)
 800aa56:	2118      	movs	r1, #24
 800aa58:	4812      	ldr	r0, [pc, #72]	@ (800aaa4 <led_task_init+0x7c>)
 800aa5a:	f000 f99b 	bl	800ad94 <Error_Handler_RTOS>

	status = xTaskCreate(v_led_task_orange, "LED_ORANGE", TASK_STACK_SIZE, NULL, 1, &led_task_orange_handle);
 800aa5e:	4b12      	ldr	r3, [pc, #72]	@ (800aaa8 <led_task_init+0x80>)
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	2301      	movs	r3, #1
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	2300      	movs	r3, #0
 800aa68:	22c8      	movs	r2, #200	@ 0xc8
 800aa6a:	4910      	ldr	r1, [pc, #64]	@ (800aaac <led_task_init+0x84>)
 800aa6c:	4810      	ldr	r0, [pc, #64]	@ (800aab0 <led_task_init+0x88>)
 800aa6e:	f7fa ffd8 	bl	8005a22 <xTaskCreate>
 800aa72:	4603      	mov	r3, r0
 800aa74:	4a09      	ldr	r2, [pc, #36]	@ (800aa9c <led_task_init+0x74>)
 800aa76:	6013      	str	r3, [r2, #0]
	configASSERT_RTOS(status == pdPASS, "Led Green Task Create");
 800aa78:	4b08      	ldr	r3, [pc, #32]	@ (800aa9c <led_task_init+0x74>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d004      	beq.n	800aa8a <led_task_init+0x62>
 800aa80:	4a07      	ldr	r2, [pc, #28]	@ (800aaa0 <led_task_init+0x78>)
 800aa82:	211b      	movs	r1, #27
 800aa84:	4807      	ldr	r0, [pc, #28]	@ (800aaa4 <led_task_init+0x7c>)
 800aa86:	f000 f985 	bl	800ad94 <Error_Handler_RTOS>
}
 800aa8a:	bf00      	nop
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	2001739c 	.word	0x2001739c
 800aa94:	0800de88 	.word	0x0800de88
 800aa98:	0800aab5 	.word	0x0800aab5
 800aa9c:	200173a4 	.word	0x200173a4
 800aaa0:	0800de94 	.word	0x0800de94
 800aaa4:	0800deac 	.word	0x0800deac
 800aaa8:	200173a0 	.word	0x200173a0
 800aaac:	0800dec4 	.word	0x0800dec4
 800aab0:	0800aafd 	.word	0x0800aafd

0800aab4 <v_led_task_green>:

//This function is task handler for Green LED
void v_led_task_green(void *pvParameters) {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	uint8_t	data = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73fb      	strb	r3, [r7, #15]
	while(1) {
		if(xQueueReceive(xSensor_Queue, (void*)&data, portMAX_DELAY)) {
 800aac0:	4b0c      	ldr	r3, [pc, #48]	@ (800aaf4 <v_led_task_green+0x40>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f107 010f 	add.w	r1, r7, #15
 800aac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fa fbc3 	bl	8005258 <xQueueReceive>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0f3      	beq.n	800aac0 <v_led_task_green+0xc>
			data = data % 2;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
 800aada:	f003 0301 	and.w	r3, r3, #1
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, data);
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	461a      	mov	r2, r3
 800aae6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aaea:	4803      	ldr	r0, [pc, #12]	@ (800aaf8 <v_led_task_green+0x44>)
 800aaec:	f7f7 faf0 	bl	80020d0 <HAL_GPIO_WritePin>
		if(xQueueReceive(xSensor_Queue, (void*)&data, portMAX_DELAY)) {
 800aaf0:	e7e6      	b.n	800aac0 <v_led_task_green+0xc>
 800aaf2:	bf00      	nop
 800aaf4:	20000200 	.word	0x20000200
 800aaf8:	40020c00 	.word	0x40020c00

0800aafc <v_led_task_orange>:
//		vTaskDelay(pdMS_TO_TICKS(1000));
	}
}

//This function is task handler for Orange LED
void v_led_task_orange(void *pvParameters)	 {
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	6078      	str	r0, [r7, #4]
	EventBits_t	event_bits;
	while(1) {
		event_bits = xEventGroupWaitBits(xSensor_Button_Event_Group, (BIT_1 | BIT_0), pdTRUE, pdTRUE, portMAX_DELAY);
 800ab04:	4b13      	ldr	r3, [pc, #76]	@ (800ab54 <v_led_task_orange+0x58>)
 800ab06:	6818      	ldr	r0, [r3, #0]
 800ab08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	2301      	movs	r3, #1
 800ab10:	2201      	movs	r2, #1
 800ab12:	2103      	movs	r1, #3
 800ab14:	f7f9 feac 	bl	8004870 <xEventGroupWaitBits>
 800ab18:	60f8      	str	r0, [r7, #12]
		if(event_bits) {
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <v_led_task_orange+0x2c>
			print_debug_msg("Event Bits: %lu\n", (uint32_t)event_bits);
 800ab20:	68f9      	ldr	r1, [r7, #12]
 800ab22:	480d      	ldr	r0, [pc, #52]	@ (800ab58 <v_led_task_orange+0x5c>)
 800ab24:	f000 f910 	bl	800ad48 <print_debug_msg>
		}


		if(event_bits & BIT_0) {
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d004      	beq.n	800ab3c <v_led_task_orange+0x40>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800ab32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ab36:	4809      	ldr	r0, [pc, #36]	@ (800ab5c <v_led_task_orange+0x60>)
 800ab38:	f7f7 fae3 	bl	8002102 <HAL_GPIO_TogglePin>
		}
		if((event_bits & (BIT_1 | BIT_0)) == (BIT_1 | BIT_0)) {
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d1de      	bne.n	800ab04 <v_led_task_orange+0x8>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800ab46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ab4a:	4804      	ldr	r0, [pc, #16]	@ (800ab5c <v_led_task_orange+0x60>)
 800ab4c:	f7f7 fad9 	bl	8002102 <HAL_GPIO_TogglePin>
		event_bits = xEventGroupWaitBits(xSensor_Button_Event_Group, (BIT_1 | BIT_0), pdTRUE, pdTRUE, portMAX_DELAY);
 800ab50:	e7d8      	b.n	800ab04 <v_led_task_orange+0x8>
 800ab52:	bf00      	nop
 800ab54:	2000020c 	.word	0x2000020c
 800ab58:	0800ded0 	.word	0x0800ded0
 800ab5c:	40020c00 	.word	0x40020c00

0800ab60 <GPIO_Init_Led_Task>:

	}
}

// Function that Handles Generic GPIO Initializations
static void GPIO_Init_Led_Task(void) {
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b088      	sub	sp, #32
 800ab64:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef	gpiox;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800ab66:	2300      	movs	r3, #0
 800ab68:	60bb      	str	r3, [r7, #8]
 800ab6a:	4b1c      	ldr	r3, [pc, #112]	@ (800abdc <GPIO_Init_Led_Task+0x7c>)
 800ab6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab6e:	4a1b      	ldr	r2, [pc, #108]	@ (800abdc <GPIO_Init_Led_Task+0x7c>)
 800ab70:	f043 0301 	orr.w	r3, r3, #1
 800ab74:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab76:	4b19      	ldr	r3, [pc, #100]	@ (800abdc <GPIO_Init_Led_Task+0x7c>)
 800ab78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	60bb      	str	r3, [r7, #8]
 800ab80:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800ab82:	2300      	movs	r3, #0
 800ab84:	607b      	str	r3, [r7, #4]
 800ab86:	4b15      	ldr	r3, [pc, #84]	@ (800abdc <GPIO_Init_Led_Task+0x7c>)
 800ab88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab8a:	4a14      	ldr	r2, [pc, #80]	@ (800abdc <GPIO_Init_Led_Task+0x7c>)
 800ab8c:	f043 0308 	orr.w	r3, r3, #8
 800ab90:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab92:	4b12      	ldr	r3, [pc, #72]	@ (800abdc <GPIO_Init_Led_Task+0x7c>)
 800ab94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab96:	f003 0308 	and.w	r3, r3, #8
 800ab9a:	607b      	str	r3, [r7, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
	gpiox.Mode = GPIO_MODE_OUTPUT_PP;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	613b      	str	r3, [r7, #16]
	gpiox.Pull = GPIO_NOPULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
	gpiox.Speed = GPIO_SPEED_LOW;
 800aba6:	2300      	movs	r3, #0
 800aba8:	61bb      	str	r3, [r7, #24]
	gpiox.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800abaa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800abae:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOD, &gpiox);
 800abb0:	f107 030c 	add.w	r3, r7, #12
 800abb4:	4619      	mov	r1, r3
 800abb6:	480a      	ldr	r0, [pc, #40]	@ (800abe0 <GPIO_Init_Led_Task+0x80>)
 800abb8:	f7f7 f8ee 	bl	8001d98 <HAL_GPIO_Init>

	gpiox.Mode = GPIO_MODE_IT_RISING_FALLING;
 800abbc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800abc0:	613b      	str	r3, [r7, #16]
	gpiox.Pin = GPIO_PIN_0;
 800abc2:	2301      	movs	r3, #1
 800abc4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &gpiox);
 800abc6:	f107 030c 	add.w	r3, r7, #12
 800abca:	4619      	mov	r1, r3
 800abcc:	4805      	ldr	r0, [pc, #20]	@ (800abe4 <GPIO_Init_Led_Task+0x84>)
 800abce:	f7f7 f8e3 	bl	8001d98 <HAL_GPIO_Init>

}
 800abd2:	bf00      	nop
 800abd4:	3720      	adds	r7, #32
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	40023800 	.word	0x40023800
 800abe0:	40020c00 	.word	0x40020c00
 800abe4:	40020000 	.word	0x40020000

0800abe8 <get_led_task_orange_handle>:
TaskHandle_t get_led_task_green_handle(void) {
	return led_task_green_handle;
}

// returns task handle of led_task_orange
TaskHandle_t get_led_task_orange_handle(void) {
 800abe8:	b480      	push	{r7}
 800abea:	af00      	add	r7, sp, #0
	return led_task_orange_handle;
 800abec:	4b03      	ldr	r3, [pc, #12]	@ (800abfc <get_led_task_orange_handle+0x14>)
 800abee:	681b      	ldr	r3, [r3, #0]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	200173a0 	.word	0x200173a0

0800ac00 <sensor_task_init>:
#include "sensor_task.h"

TaskHandle_t	sensor_task_handle;

BaseType_t	status;
void sensor_task_init(void) {
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af02      	add	r7, sp, #8
	status = xTaskCreate(v_sensor_task, "Sensor_Task", TASK_STACK_SIZE, NULL, 2, &sensor_task_handle);
 800ac06:	4b0c      	ldr	r3, [pc, #48]	@ (800ac38 <sensor_task_init+0x38>)
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	2300      	movs	r3, #0
 800ac10:	22c8      	movs	r2, #200	@ 0xc8
 800ac12:	490a      	ldr	r1, [pc, #40]	@ (800ac3c <sensor_task_init+0x3c>)
 800ac14:	480a      	ldr	r0, [pc, #40]	@ (800ac40 <sensor_task_init+0x40>)
 800ac16:	f7fa ff04 	bl	8005a22 <xTaskCreate>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	4a09      	ldr	r2, [pc, #36]	@ (800ac44 <sensor_task_init+0x44>)
 800ac1e:	6013      	str	r3, [r2, #0]
	configASSERT_RTOS(status == pdPASS, "Sensor Task Init Failed\n");
 800ac20:	4b08      	ldr	r3, [pc, #32]	@ (800ac44 <sensor_task_init+0x44>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d004      	beq.n	800ac32 <sensor_task_init+0x32>
 800ac28:	4a07      	ldr	r2, [pc, #28]	@ (800ac48 <sensor_task_init+0x48>)
 800ac2a:	2111      	movs	r1, #17
 800ac2c:	4807      	ldr	r0, [pc, #28]	@ (800ac4c <sensor_task_init+0x4c>)
 800ac2e:	f000 f8b1 	bl	800ad94 <Error_Handler_RTOS>
}
 800ac32:	bf00      	nop
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	200173a8 	.word	0x200173a8
 800ac3c:	0800dee4 	.word	0x0800dee4
 800ac40:	0800ac51 	.word	0x0800ac51
 800ac44:	200173ac 	.word	0x200173ac
 800ac48:	0800def0 	.word	0x0800def0
 800ac4c:	0800df0c 	.word	0x0800df0c

0800ac50 <v_sensor_task>:

void v_sensor_task(void *pvParamerter) {
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800ac58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f7fc fa08 	bl	8007074 <ulTaskGenericNotifyTake>
		data = generate_sensor_data();
 800ac64:	f000 f82c 	bl	800acc0 <generate_sensor_data>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73fb      	strb	r3, [r7, #15]
		if(xQueueSend(xSensor_Queue,(void *)&data,pdMS_TO_TICKS(200)) != pdPASS) {
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac98 <v_sensor_task+0x48>)
 800ac6e:	6818      	ldr	r0, [r3, #0]
 800ac70:	f107 010f 	add.w	r1, r7, #15
 800ac74:	2300      	movs	r3, #0
 800ac76:	22c8      	movs	r2, #200	@ 0xc8
 800ac78:	f7fa f932 	bl	8004ee0 <xQueueGenericSend>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d004      	beq.n	800ac8c <v_sensor_task+0x3c>
			print_error_uart();
 800ac82:	4a06      	ldr	r2, [pc, #24]	@ (800ac9c <v_sensor_task+0x4c>)
 800ac84:	211a      	movs	r1, #26
 800ac86:	4806      	ldr	r0, [pc, #24]	@ (800aca0 <v_sensor_task+0x50>)
 800ac88:	f000 f8a0 	bl	800adcc <Error_Handler_System>
		}
		print_debug_msg("Data Sent ON Queue: %u\n", data);
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	4804      	ldr	r0, [pc, #16]	@ (800aca4 <v_sensor_task+0x54>)
 800ac92:	f000 f859 	bl	800ad48 <print_debug_msg>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800ac96:	e7df      	b.n	800ac58 <v_sensor_task+0x8>
 800ac98:	20000200 	.word	0x20000200
 800ac9c:	0800e010 	.word	0x0800e010
 800aca0:	0800df0c 	.word	0x0800df0c
 800aca4:	0800df28 	.word	0x0800df28

0800aca8 <get_sensor_task_handle>:
	}
}

TaskHandle_t get_sensor_task_handle(void) {
 800aca8:	b480      	push	{r7}
 800acaa:	af00      	add	r7, sp, #0
	return sensor_task_handle;
 800acac:	4b03      	ldr	r3, [pc, #12]	@ (800acbc <get_sensor_task_handle+0x14>)
 800acae:	681b      	ldr	r3, [r3, #0]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	200173a8 	.word	0x200173a8

0800acc0 <generate_sensor_data>:

static uint8_t generate_sensor_data(void) {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
	uint8_t value = (uint8_t)(rand() % 10);
 800acc6:	f000 fcf3 	bl	800b6b0 <rand>
 800acca:	4602      	mov	r2, r0
 800accc:	4b08      	ldr	r3, [pc, #32]	@ (800acf0 <generate_sensor_data+0x30>)
 800acce:	fb83 1302 	smull	r1, r3, r3, r2
 800acd2:	1099      	asrs	r1, r3, #2
 800acd4:	17d3      	asrs	r3, r2, #31
 800acd6:	1ac9      	subs	r1, r1, r3
 800acd8:	460b      	mov	r3, r1
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	1ad1      	subs	r1, r2, r3
 800ace2:	460b      	mov	r3, r1
 800ace4:	71fb      	strb	r3, [r7, #7]
	return value;
 800ace6:	79fb      	ldrb	r3, [r7, #7]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	66666667 	.word	0x66666667

0800acf4 <debug_uart_init>:

#include "main_SECN.h"

UART_HandleTypeDef	huart3;

void debug_uart_init(void) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 800acf8:	4b0f      	ldr	r3, [pc, #60]	@ (800ad38 <debug_uart_init+0x44>)
 800acfa:	4a10      	ldr	r2, [pc, #64]	@ (800ad3c <debug_uart_init+0x48>)
 800acfc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800acfe:	4b0e      	ldr	r3, [pc, #56]	@ (800ad38 <debug_uart_init+0x44>)
 800ad00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ad04:	605a      	str	r2, [r3, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800ad06:	4b0c      	ldr	r3, [pc, #48]	@ (800ad38 <debug_uart_init+0x44>)
 800ad08:	220c      	movs	r2, #12
 800ad0a:	615a      	str	r2, [r3, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad38 <debug_uart_init+0x44>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	611a      	str	r2, [r3, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800ad12:	4b09      	ldr	r3, [pc, #36]	@ (800ad38 <debug_uart_init+0x44>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	60da      	str	r2, [r3, #12]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ad18:	4b07      	ldr	r3, [pc, #28]	@ (800ad38 <debug_uart_init+0x44>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	609a      	str	r2, [r3, #8]
	if(HAL_UART_Init(&huart3) != HAL_OK) {
 800ad1e:	4806      	ldr	r0, [pc, #24]	@ (800ad38 <debug_uart_init+0x44>)
 800ad20:	f7f8 fd6c 	bl	80037fc <HAL_UART_Init>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d004      	beq.n	800ad34 <debug_uart_init+0x40>
		print_error_uart();
 800ad2a:	4a05      	ldr	r2, [pc, #20]	@ (800ad40 <debug_uart_init+0x4c>)
 800ad2c:	2115      	movs	r1, #21
 800ad2e:	4805      	ldr	r0, [pc, #20]	@ (800ad44 <debug_uart_init+0x50>)
 800ad30:	f000 f84c 	bl	800adcc <Error_Handler_System>
	}


}
 800ad34:	bf00      	nop
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	200173b0 	.word	0x200173b0
 800ad3c:	40004800 	.word	0x40004800
 800ad40:	0800e020 	.word	0x0800e020
 800ad44:	0800df40 	.word	0x0800df40

0800ad48 <print_debug_msg>:

void print_debug_msg(const char *message,...) {
 800ad48:	b40f      	push	{r0, r1, r2, r3}
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b096      	sub	sp, #88	@ 0x58
 800ad4e:	af00      	add	r7, sp, #0
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, message);
 800ad50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800ad54:	607b      	str	r3, [r7, #4]
	vsprintf(str, message,args);
 800ad56:	f107 0308 	add.w	r3, r7, #8
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 fd9e 	bl	800b8a0 <vsiprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 800ad64:	f107 0308 	add.w	r3, r7, #8
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7f5 fad1 	bl	8000310 <strlen>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	f107 0108 	add.w	r1, r7, #8
 800ad76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad7a:	4805      	ldr	r0, [pc, #20]	@ (800ad90 <print_debug_msg+0x48>)
 800ad7c:	f7f8 fd8e 	bl	800389c <HAL_UART_Transmit>
	va_end(args);

}
 800ad80:	bf00      	nop
 800ad82:	3758      	adds	r7, #88	@ 0x58
 800ad84:	46bd      	mov	sp, r7
 800ad86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad8a:	b004      	add	sp, #16
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	200173b0 	.word	0x200173b0

0800ad94 <Error_Handler_RTOS>:


#include "main_SECN.h"


void Error_Handler_RTOS(const char *file, int line, const char *message) {
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]

	print_debug_msg("%s : Assertion failed in %s, line %d: %s\n", file, file, line, message);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	4807      	ldr	r0, [pc, #28]	@ (800adc8 <Error_Handler_RTOS+0x34>)
 800adac:	f7ff ffcc 	bl	800ad48 <print_debug_msg>
    __asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	617b      	str	r3, [r7, #20]
}
 800adc2:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	for (;;);
 800adc4:	bf00      	nop
 800adc6:	e7fd      	b.n	800adc4 <Error_Handler_RTOS+0x30>
 800adc8:	0800df5c 	.word	0x0800df5c

0800adcc <Error_Handler_System>:
}


void Error_Handler_System(const char *file, int line, const char *message) {
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af02      	add	r7, sp, #8
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
	print_debug_msg("%s : Assertion failed in %s, line %d: %s\n", file, file, line, message);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	68f9      	ldr	r1, [r7, #12]
 800ade2:	4807      	ldr	r0, [pc, #28]	@ (800ae00 <Error_Handler_System+0x34>)
 800ade4:	f7ff ffb0 	bl	800ad48 <print_debug_msg>
    __asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	617b      	str	r3, [r7, #20]
}
 800adfa:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	for (;;);
 800adfc:	bf00      	nop
 800adfe:	e7fd      	b.n	800adfc <Error_Handler_System+0x30>
 800ae00:	0800df5c 	.word	0x0800df5c

0800ae04 <__cvt>:
 800ae04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae08:	ec57 6b10 	vmov	r6, r7, d0
 800ae0c:	2f00      	cmp	r7, #0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	4619      	mov	r1, r3
 800ae12:	463b      	mov	r3, r7
 800ae14:	bfbb      	ittet	lt
 800ae16:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ae1a:	461f      	movlt	r7, r3
 800ae1c:	2300      	movge	r3, #0
 800ae1e:	232d      	movlt	r3, #45	@ 0x2d
 800ae20:	700b      	strb	r3, [r1, #0]
 800ae22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ae28:	4691      	mov	r9, r2
 800ae2a:	f023 0820 	bic.w	r8, r3, #32
 800ae2e:	bfbc      	itt	lt
 800ae30:	4632      	movlt	r2, r6
 800ae32:	4616      	movlt	r6, r2
 800ae34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae38:	d005      	beq.n	800ae46 <__cvt+0x42>
 800ae3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ae3e:	d100      	bne.n	800ae42 <__cvt+0x3e>
 800ae40:	3401      	adds	r4, #1
 800ae42:	2102      	movs	r1, #2
 800ae44:	e000      	b.n	800ae48 <__cvt+0x44>
 800ae46:	2103      	movs	r1, #3
 800ae48:	ab03      	add	r3, sp, #12
 800ae4a:	9301      	str	r3, [sp, #4]
 800ae4c:	ab02      	add	r3, sp, #8
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	ec47 6b10 	vmov	d0, r6, r7
 800ae54:	4653      	mov	r3, sl
 800ae56:	4622      	mov	r2, r4
 800ae58:	f000 fe4a 	bl	800baf0 <_dtoa_r>
 800ae5c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ae60:	4605      	mov	r5, r0
 800ae62:	d119      	bne.n	800ae98 <__cvt+0x94>
 800ae64:	f019 0f01 	tst.w	r9, #1
 800ae68:	d00e      	beq.n	800ae88 <__cvt+0x84>
 800ae6a:	eb00 0904 	add.w	r9, r0, r4
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2300      	movs	r3, #0
 800ae72:	4630      	mov	r0, r6
 800ae74:	4639      	mov	r1, r7
 800ae76:	f7f5 fe77 	bl	8000b68 <__aeabi_dcmpeq>
 800ae7a:	b108      	cbz	r0, 800ae80 <__cvt+0x7c>
 800ae7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae80:	2230      	movs	r2, #48	@ 0x30
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	454b      	cmp	r3, r9
 800ae86:	d31e      	bcc.n	800aec6 <__cvt+0xc2>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae8c:	1b5b      	subs	r3, r3, r5
 800ae8e:	4628      	mov	r0, r5
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	b004      	add	sp, #16
 800ae94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae9c:	eb00 0904 	add.w	r9, r0, r4
 800aea0:	d1e5      	bne.n	800ae6e <__cvt+0x6a>
 800aea2:	7803      	ldrb	r3, [r0, #0]
 800aea4:	2b30      	cmp	r3, #48	@ 0x30
 800aea6:	d10a      	bne.n	800aebe <__cvt+0xba>
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2300      	movs	r3, #0
 800aeac:	4630      	mov	r0, r6
 800aeae:	4639      	mov	r1, r7
 800aeb0:	f7f5 fe5a 	bl	8000b68 <__aeabi_dcmpeq>
 800aeb4:	b918      	cbnz	r0, 800aebe <__cvt+0xba>
 800aeb6:	f1c4 0401 	rsb	r4, r4, #1
 800aeba:	f8ca 4000 	str.w	r4, [sl]
 800aebe:	f8da 3000 	ldr.w	r3, [sl]
 800aec2:	4499      	add	r9, r3
 800aec4:	e7d3      	b.n	800ae6e <__cvt+0x6a>
 800aec6:	1c59      	adds	r1, r3, #1
 800aec8:	9103      	str	r1, [sp, #12]
 800aeca:	701a      	strb	r2, [r3, #0]
 800aecc:	e7d9      	b.n	800ae82 <__cvt+0x7e>

0800aece <__exponent>:
 800aece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aed0:	2900      	cmp	r1, #0
 800aed2:	bfba      	itte	lt
 800aed4:	4249      	neglt	r1, r1
 800aed6:	232d      	movlt	r3, #45	@ 0x2d
 800aed8:	232b      	movge	r3, #43	@ 0x2b
 800aeda:	2909      	cmp	r1, #9
 800aedc:	7002      	strb	r2, [r0, #0]
 800aede:	7043      	strb	r3, [r0, #1]
 800aee0:	dd29      	ble.n	800af36 <__exponent+0x68>
 800aee2:	f10d 0307 	add.w	r3, sp, #7
 800aee6:	461d      	mov	r5, r3
 800aee8:	270a      	movs	r7, #10
 800aeea:	461a      	mov	r2, r3
 800aeec:	fbb1 f6f7 	udiv	r6, r1, r7
 800aef0:	fb07 1416 	mls	r4, r7, r6, r1
 800aef4:	3430      	adds	r4, #48	@ 0x30
 800aef6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aefa:	460c      	mov	r4, r1
 800aefc:	2c63      	cmp	r4, #99	@ 0x63
 800aefe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800af02:	4631      	mov	r1, r6
 800af04:	dcf1      	bgt.n	800aeea <__exponent+0x1c>
 800af06:	3130      	adds	r1, #48	@ 0x30
 800af08:	1e94      	subs	r4, r2, #2
 800af0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800af0e:	1c41      	adds	r1, r0, #1
 800af10:	4623      	mov	r3, r4
 800af12:	42ab      	cmp	r3, r5
 800af14:	d30a      	bcc.n	800af2c <__exponent+0x5e>
 800af16:	f10d 0309 	add.w	r3, sp, #9
 800af1a:	1a9b      	subs	r3, r3, r2
 800af1c:	42ac      	cmp	r4, r5
 800af1e:	bf88      	it	hi
 800af20:	2300      	movhi	r3, #0
 800af22:	3302      	adds	r3, #2
 800af24:	4403      	add	r3, r0
 800af26:	1a18      	subs	r0, r3, r0
 800af28:	b003      	add	sp, #12
 800af2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800af30:	f801 6f01 	strb.w	r6, [r1, #1]!
 800af34:	e7ed      	b.n	800af12 <__exponent+0x44>
 800af36:	2330      	movs	r3, #48	@ 0x30
 800af38:	3130      	adds	r1, #48	@ 0x30
 800af3a:	7083      	strb	r3, [r0, #2]
 800af3c:	70c1      	strb	r1, [r0, #3]
 800af3e:	1d03      	adds	r3, r0, #4
 800af40:	e7f1      	b.n	800af26 <__exponent+0x58>
	...

0800af44 <_printf_float>:
 800af44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	b08d      	sub	sp, #52	@ 0x34
 800af4a:	460c      	mov	r4, r1
 800af4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800af50:	4616      	mov	r6, r2
 800af52:	461f      	mov	r7, r3
 800af54:	4605      	mov	r5, r0
 800af56:	f000 fd11 	bl	800b97c <_localeconv_r>
 800af5a:	6803      	ldr	r3, [r0, #0]
 800af5c:	9304      	str	r3, [sp, #16]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7f5 f9d6 	bl	8000310 <strlen>
 800af64:	2300      	movs	r3, #0
 800af66:	930a      	str	r3, [sp, #40]	@ 0x28
 800af68:	f8d8 3000 	ldr.w	r3, [r8]
 800af6c:	9005      	str	r0, [sp, #20]
 800af6e:	3307      	adds	r3, #7
 800af70:	f023 0307 	bic.w	r3, r3, #7
 800af74:	f103 0208 	add.w	r2, r3, #8
 800af78:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af7c:	f8d4 b000 	ldr.w	fp, [r4]
 800af80:	f8c8 2000 	str.w	r2, [r8]
 800af84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800af8c:	9307      	str	r3, [sp, #28]
 800af8e:	f8cd 8018 	str.w	r8, [sp, #24]
 800af92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800af96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af9a:	4b9c      	ldr	r3, [pc, #624]	@ (800b20c <_printf_float+0x2c8>)
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afa0:	f7f5 fe14 	bl	8000bcc <__aeabi_dcmpun>
 800afa4:	bb70      	cbnz	r0, 800b004 <_printf_float+0xc0>
 800afa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afaa:	4b98      	ldr	r3, [pc, #608]	@ (800b20c <_printf_float+0x2c8>)
 800afac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afb0:	f7f5 fdee 	bl	8000b90 <__aeabi_dcmple>
 800afb4:	bb30      	cbnz	r0, 800b004 <_printf_float+0xc0>
 800afb6:	2200      	movs	r2, #0
 800afb8:	2300      	movs	r3, #0
 800afba:	4640      	mov	r0, r8
 800afbc:	4649      	mov	r1, r9
 800afbe:	f7f5 fddd 	bl	8000b7c <__aeabi_dcmplt>
 800afc2:	b110      	cbz	r0, 800afca <_printf_float+0x86>
 800afc4:	232d      	movs	r3, #45	@ 0x2d
 800afc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afca:	4a91      	ldr	r2, [pc, #580]	@ (800b210 <_printf_float+0x2cc>)
 800afcc:	4b91      	ldr	r3, [pc, #580]	@ (800b214 <_printf_float+0x2d0>)
 800afce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800afd2:	bf8c      	ite	hi
 800afd4:	4690      	movhi	r8, r2
 800afd6:	4698      	movls	r8, r3
 800afd8:	2303      	movs	r3, #3
 800afda:	6123      	str	r3, [r4, #16]
 800afdc:	f02b 0304 	bic.w	r3, fp, #4
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	f04f 0900 	mov.w	r9, #0
 800afe6:	9700      	str	r7, [sp, #0]
 800afe8:	4633      	mov	r3, r6
 800afea:	aa0b      	add	r2, sp, #44	@ 0x2c
 800afec:	4621      	mov	r1, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 f9d2 	bl	800b398 <_printf_common>
 800aff4:	3001      	adds	r0, #1
 800aff6:	f040 808d 	bne.w	800b114 <_printf_float+0x1d0>
 800affa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800affe:	b00d      	add	sp, #52	@ 0x34
 800b000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b004:	4642      	mov	r2, r8
 800b006:	464b      	mov	r3, r9
 800b008:	4640      	mov	r0, r8
 800b00a:	4649      	mov	r1, r9
 800b00c:	f7f5 fdde 	bl	8000bcc <__aeabi_dcmpun>
 800b010:	b140      	cbz	r0, 800b024 <_printf_float+0xe0>
 800b012:	464b      	mov	r3, r9
 800b014:	2b00      	cmp	r3, #0
 800b016:	bfbc      	itt	lt
 800b018:	232d      	movlt	r3, #45	@ 0x2d
 800b01a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b01e:	4a7e      	ldr	r2, [pc, #504]	@ (800b218 <_printf_float+0x2d4>)
 800b020:	4b7e      	ldr	r3, [pc, #504]	@ (800b21c <_printf_float+0x2d8>)
 800b022:	e7d4      	b.n	800afce <_printf_float+0x8a>
 800b024:	6863      	ldr	r3, [r4, #4]
 800b026:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b02a:	9206      	str	r2, [sp, #24]
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	d13b      	bne.n	800b0a8 <_printf_float+0x164>
 800b030:	2306      	movs	r3, #6
 800b032:	6063      	str	r3, [r4, #4]
 800b034:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b038:	2300      	movs	r3, #0
 800b03a:	6022      	str	r2, [r4, #0]
 800b03c:	9303      	str	r3, [sp, #12]
 800b03e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b040:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b044:	ab09      	add	r3, sp, #36	@ 0x24
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	6861      	ldr	r1, [r4, #4]
 800b04a:	ec49 8b10 	vmov	d0, r8, r9
 800b04e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b052:	4628      	mov	r0, r5
 800b054:	f7ff fed6 	bl	800ae04 <__cvt>
 800b058:	9b06      	ldr	r3, [sp, #24]
 800b05a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b05c:	2b47      	cmp	r3, #71	@ 0x47
 800b05e:	4680      	mov	r8, r0
 800b060:	d129      	bne.n	800b0b6 <_printf_float+0x172>
 800b062:	1cc8      	adds	r0, r1, #3
 800b064:	db02      	blt.n	800b06c <_printf_float+0x128>
 800b066:	6863      	ldr	r3, [r4, #4]
 800b068:	4299      	cmp	r1, r3
 800b06a:	dd41      	ble.n	800b0f0 <_printf_float+0x1ac>
 800b06c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b070:	fa5f fa8a 	uxtb.w	sl, sl
 800b074:	3901      	subs	r1, #1
 800b076:	4652      	mov	r2, sl
 800b078:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b07c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b07e:	f7ff ff26 	bl	800aece <__exponent>
 800b082:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b084:	1813      	adds	r3, r2, r0
 800b086:	2a01      	cmp	r2, #1
 800b088:	4681      	mov	r9, r0
 800b08a:	6123      	str	r3, [r4, #16]
 800b08c:	dc02      	bgt.n	800b094 <_printf_float+0x150>
 800b08e:	6822      	ldr	r2, [r4, #0]
 800b090:	07d2      	lsls	r2, r2, #31
 800b092:	d501      	bpl.n	800b098 <_printf_float+0x154>
 800b094:	3301      	adds	r3, #1
 800b096:	6123      	str	r3, [r4, #16]
 800b098:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d0a2      	beq.n	800afe6 <_printf_float+0xa2>
 800b0a0:	232d      	movs	r3, #45	@ 0x2d
 800b0a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0a6:	e79e      	b.n	800afe6 <_printf_float+0xa2>
 800b0a8:	9a06      	ldr	r2, [sp, #24]
 800b0aa:	2a47      	cmp	r2, #71	@ 0x47
 800b0ac:	d1c2      	bne.n	800b034 <_printf_float+0xf0>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1c0      	bne.n	800b034 <_printf_float+0xf0>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e7bd      	b.n	800b032 <_printf_float+0xee>
 800b0b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0ba:	d9db      	bls.n	800b074 <_printf_float+0x130>
 800b0bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b0c0:	d118      	bne.n	800b0f4 <_printf_float+0x1b0>
 800b0c2:	2900      	cmp	r1, #0
 800b0c4:	6863      	ldr	r3, [r4, #4]
 800b0c6:	dd0b      	ble.n	800b0e0 <_printf_float+0x19c>
 800b0c8:	6121      	str	r1, [r4, #16]
 800b0ca:	b913      	cbnz	r3, 800b0d2 <_printf_float+0x18e>
 800b0cc:	6822      	ldr	r2, [r4, #0]
 800b0ce:	07d0      	lsls	r0, r2, #31
 800b0d0:	d502      	bpl.n	800b0d8 <_printf_float+0x194>
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	440b      	add	r3, r1
 800b0d6:	6123      	str	r3, [r4, #16]
 800b0d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b0da:	f04f 0900 	mov.w	r9, #0
 800b0de:	e7db      	b.n	800b098 <_printf_float+0x154>
 800b0e0:	b913      	cbnz	r3, 800b0e8 <_printf_float+0x1a4>
 800b0e2:	6822      	ldr	r2, [r4, #0]
 800b0e4:	07d2      	lsls	r2, r2, #31
 800b0e6:	d501      	bpl.n	800b0ec <_printf_float+0x1a8>
 800b0e8:	3302      	adds	r3, #2
 800b0ea:	e7f4      	b.n	800b0d6 <_printf_float+0x192>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e7f2      	b.n	800b0d6 <_printf_float+0x192>
 800b0f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0f6:	4299      	cmp	r1, r3
 800b0f8:	db05      	blt.n	800b106 <_printf_float+0x1c2>
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	6121      	str	r1, [r4, #16]
 800b0fe:	07d8      	lsls	r0, r3, #31
 800b100:	d5ea      	bpl.n	800b0d8 <_printf_float+0x194>
 800b102:	1c4b      	adds	r3, r1, #1
 800b104:	e7e7      	b.n	800b0d6 <_printf_float+0x192>
 800b106:	2900      	cmp	r1, #0
 800b108:	bfd4      	ite	le
 800b10a:	f1c1 0202 	rsble	r2, r1, #2
 800b10e:	2201      	movgt	r2, #1
 800b110:	4413      	add	r3, r2
 800b112:	e7e0      	b.n	800b0d6 <_printf_float+0x192>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	055a      	lsls	r2, r3, #21
 800b118:	d407      	bmi.n	800b12a <_printf_float+0x1e6>
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	4642      	mov	r2, r8
 800b11e:	4631      	mov	r1, r6
 800b120:	4628      	mov	r0, r5
 800b122:	47b8      	blx	r7
 800b124:	3001      	adds	r0, #1
 800b126:	d12b      	bne.n	800b180 <_printf_float+0x23c>
 800b128:	e767      	b.n	800affa <_printf_float+0xb6>
 800b12a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b12e:	f240 80dd 	bls.w	800b2ec <_printf_float+0x3a8>
 800b132:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b136:	2200      	movs	r2, #0
 800b138:	2300      	movs	r3, #0
 800b13a:	f7f5 fd15 	bl	8000b68 <__aeabi_dcmpeq>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d033      	beq.n	800b1aa <_printf_float+0x266>
 800b142:	4a37      	ldr	r2, [pc, #220]	@ (800b220 <_printf_float+0x2dc>)
 800b144:	2301      	movs	r3, #1
 800b146:	4631      	mov	r1, r6
 800b148:	4628      	mov	r0, r5
 800b14a:	47b8      	blx	r7
 800b14c:	3001      	adds	r0, #1
 800b14e:	f43f af54 	beq.w	800affa <_printf_float+0xb6>
 800b152:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b156:	4543      	cmp	r3, r8
 800b158:	db02      	blt.n	800b160 <_printf_float+0x21c>
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	07d8      	lsls	r0, r3, #31
 800b15e:	d50f      	bpl.n	800b180 <_printf_float+0x23c>
 800b160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	f43f af45 	beq.w	800affa <_printf_float+0xb6>
 800b170:	f04f 0900 	mov.w	r9, #0
 800b174:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b178:	f104 0a1a 	add.w	sl, r4, #26
 800b17c:	45c8      	cmp	r8, r9
 800b17e:	dc09      	bgt.n	800b194 <_printf_float+0x250>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	079b      	lsls	r3, r3, #30
 800b184:	f100 8103 	bmi.w	800b38e <_printf_float+0x44a>
 800b188:	68e0      	ldr	r0, [r4, #12]
 800b18a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b18c:	4298      	cmp	r0, r3
 800b18e:	bfb8      	it	lt
 800b190:	4618      	movlt	r0, r3
 800b192:	e734      	b.n	800affe <_printf_float+0xba>
 800b194:	2301      	movs	r3, #1
 800b196:	4652      	mov	r2, sl
 800b198:	4631      	mov	r1, r6
 800b19a:	4628      	mov	r0, r5
 800b19c:	47b8      	blx	r7
 800b19e:	3001      	adds	r0, #1
 800b1a0:	f43f af2b 	beq.w	800affa <_printf_float+0xb6>
 800b1a4:	f109 0901 	add.w	r9, r9, #1
 800b1a8:	e7e8      	b.n	800b17c <_printf_float+0x238>
 800b1aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	dc39      	bgt.n	800b224 <_printf_float+0x2e0>
 800b1b0:	4a1b      	ldr	r2, [pc, #108]	@ (800b220 <_printf_float+0x2dc>)
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	47b8      	blx	r7
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	f43f af1d 	beq.w	800affa <_printf_float+0xb6>
 800b1c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b1c4:	ea59 0303 	orrs.w	r3, r9, r3
 800b1c8:	d102      	bne.n	800b1d0 <_printf_float+0x28c>
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	07d9      	lsls	r1, r3, #31
 800b1ce:	d5d7      	bpl.n	800b180 <_printf_float+0x23c>
 800b1d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	47b8      	blx	r7
 800b1da:	3001      	adds	r0, #1
 800b1dc:	f43f af0d 	beq.w	800affa <_printf_float+0xb6>
 800b1e0:	f04f 0a00 	mov.w	sl, #0
 800b1e4:	f104 0b1a 	add.w	fp, r4, #26
 800b1e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ea:	425b      	negs	r3, r3
 800b1ec:	4553      	cmp	r3, sl
 800b1ee:	dc01      	bgt.n	800b1f4 <_printf_float+0x2b0>
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	e793      	b.n	800b11c <_printf_float+0x1d8>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	465a      	mov	r2, fp
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	47b8      	blx	r7
 800b1fe:	3001      	adds	r0, #1
 800b200:	f43f aefb 	beq.w	800affa <_printf_float+0xb6>
 800b204:	f10a 0a01 	add.w	sl, sl, #1
 800b208:	e7ee      	b.n	800b1e8 <_printf_float+0x2a4>
 800b20a:	bf00      	nop
 800b20c:	7fefffff 	.word	0x7fefffff
 800b210:	0800e034 	.word	0x0800e034
 800b214:	0800e030 	.word	0x0800e030
 800b218:	0800e03c 	.word	0x0800e03c
 800b21c:	0800e038 	.word	0x0800e038
 800b220:	0800e040 	.word	0x0800e040
 800b224:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b226:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b22a:	4553      	cmp	r3, sl
 800b22c:	bfa8      	it	ge
 800b22e:	4653      	movge	r3, sl
 800b230:	2b00      	cmp	r3, #0
 800b232:	4699      	mov	r9, r3
 800b234:	dc36      	bgt.n	800b2a4 <_printf_float+0x360>
 800b236:	f04f 0b00 	mov.w	fp, #0
 800b23a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b23e:	f104 021a 	add.w	r2, r4, #26
 800b242:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b244:	9306      	str	r3, [sp, #24]
 800b246:	eba3 0309 	sub.w	r3, r3, r9
 800b24a:	455b      	cmp	r3, fp
 800b24c:	dc31      	bgt.n	800b2b2 <_printf_float+0x36e>
 800b24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b250:	459a      	cmp	sl, r3
 800b252:	dc3a      	bgt.n	800b2ca <_printf_float+0x386>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	07da      	lsls	r2, r3, #31
 800b258:	d437      	bmi.n	800b2ca <_printf_float+0x386>
 800b25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b25c:	ebaa 0903 	sub.w	r9, sl, r3
 800b260:	9b06      	ldr	r3, [sp, #24]
 800b262:	ebaa 0303 	sub.w	r3, sl, r3
 800b266:	4599      	cmp	r9, r3
 800b268:	bfa8      	it	ge
 800b26a:	4699      	movge	r9, r3
 800b26c:	f1b9 0f00 	cmp.w	r9, #0
 800b270:	dc33      	bgt.n	800b2da <_printf_float+0x396>
 800b272:	f04f 0800 	mov.w	r8, #0
 800b276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b27a:	f104 0b1a 	add.w	fp, r4, #26
 800b27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b280:	ebaa 0303 	sub.w	r3, sl, r3
 800b284:	eba3 0309 	sub.w	r3, r3, r9
 800b288:	4543      	cmp	r3, r8
 800b28a:	f77f af79 	ble.w	800b180 <_printf_float+0x23c>
 800b28e:	2301      	movs	r3, #1
 800b290:	465a      	mov	r2, fp
 800b292:	4631      	mov	r1, r6
 800b294:	4628      	mov	r0, r5
 800b296:	47b8      	blx	r7
 800b298:	3001      	adds	r0, #1
 800b29a:	f43f aeae 	beq.w	800affa <_printf_float+0xb6>
 800b29e:	f108 0801 	add.w	r8, r8, #1
 800b2a2:	e7ec      	b.n	800b27e <_printf_float+0x33a>
 800b2a4:	4642      	mov	r2, r8
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	47b8      	blx	r7
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	d1c2      	bne.n	800b236 <_printf_float+0x2f2>
 800b2b0:	e6a3      	b.n	800affa <_printf_float+0xb6>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	9206      	str	r2, [sp, #24]
 800b2ba:	47b8      	blx	r7
 800b2bc:	3001      	adds	r0, #1
 800b2be:	f43f ae9c 	beq.w	800affa <_printf_float+0xb6>
 800b2c2:	9a06      	ldr	r2, [sp, #24]
 800b2c4:	f10b 0b01 	add.w	fp, fp, #1
 800b2c8:	e7bb      	b.n	800b242 <_printf_float+0x2fe>
 800b2ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	47b8      	blx	r7
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d1c0      	bne.n	800b25a <_printf_float+0x316>
 800b2d8:	e68f      	b.n	800affa <_printf_float+0xb6>
 800b2da:	9a06      	ldr	r2, [sp, #24]
 800b2dc:	464b      	mov	r3, r9
 800b2de:	4442      	add	r2, r8
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	d1c3      	bne.n	800b272 <_printf_float+0x32e>
 800b2ea:	e686      	b.n	800affa <_printf_float+0xb6>
 800b2ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b2f0:	f1ba 0f01 	cmp.w	sl, #1
 800b2f4:	dc01      	bgt.n	800b2fa <_printf_float+0x3b6>
 800b2f6:	07db      	lsls	r3, r3, #31
 800b2f8:	d536      	bpl.n	800b368 <_printf_float+0x424>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4642      	mov	r2, r8
 800b2fe:	4631      	mov	r1, r6
 800b300:	4628      	mov	r0, r5
 800b302:	47b8      	blx	r7
 800b304:	3001      	adds	r0, #1
 800b306:	f43f ae78 	beq.w	800affa <_printf_float+0xb6>
 800b30a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b30e:	4631      	mov	r1, r6
 800b310:	4628      	mov	r0, r5
 800b312:	47b8      	blx	r7
 800b314:	3001      	adds	r0, #1
 800b316:	f43f ae70 	beq.w	800affa <_printf_float+0xb6>
 800b31a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b31e:	2200      	movs	r2, #0
 800b320:	2300      	movs	r3, #0
 800b322:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b326:	f7f5 fc1f 	bl	8000b68 <__aeabi_dcmpeq>
 800b32a:	b9c0      	cbnz	r0, 800b35e <_printf_float+0x41a>
 800b32c:	4653      	mov	r3, sl
 800b32e:	f108 0201 	add.w	r2, r8, #1
 800b332:	4631      	mov	r1, r6
 800b334:	4628      	mov	r0, r5
 800b336:	47b8      	blx	r7
 800b338:	3001      	adds	r0, #1
 800b33a:	d10c      	bne.n	800b356 <_printf_float+0x412>
 800b33c:	e65d      	b.n	800affa <_printf_float+0xb6>
 800b33e:	2301      	movs	r3, #1
 800b340:	465a      	mov	r2, fp
 800b342:	4631      	mov	r1, r6
 800b344:	4628      	mov	r0, r5
 800b346:	47b8      	blx	r7
 800b348:	3001      	adds	r0, #1
 800b34a:	f43f ae56 	beq.w	800affa <_printf_float+0xb6>
 800b34e:	f108 0801 	add.w	r8, r8, #1
 800b352:	45d0      	cmp	r8, sl
 800b354:	dbf3      	blt.n	800b33e <_printf_float+0x3fa>
 800b356:	464b      	mov	r3, r9
 800b358:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b35c:	e6df      	b.n	800b11e <_printf_float+0x1da>
 800b35e:	f04f 0800 	mov.w	r8, #0
 800b362:	f104 0b1a 	add.w	fp, r4, #26
 800b366:	e7f4      	b.n	800b352 <_printf_float+0x40e>
 800b368:	2301      	movs	r3, #1
 800b36a:	4642      	mov	r2, r8
 800b36c:	e7e1      	b.n	800b332 <_printf_float+0x3ee>
 800b36e:	2301      	movs	r3, #1
 800b370:	464a      	mov	r2, r9
 800b372:	4631      	mov	r1, r6
 800b374:	4628      	mov	r0, r5
 800b376:	47b8      	blx	r7
 800b378:	3001      	adds	r0, #1
 800b37a:	f43f ae3e 	beq.w	800affa <_printf_float+0xb6>
 800b37e:	f108 0801 	add.w	r8, r8, #1
 800b382:	68e3      	ldr	r3, [r4, #12]
 800b384:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b386:	1a5b      	subs	r3, r3, r1
 800b388:	4543      	cmp	r3, r8
 800b38a:	dcf0      	bgt.n	800b36e <_printf_float+0x42a>
 800b38c:	e6fc      	b.n	800b188 <_printf_float+0x244>
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	f104 0919 	add.w	r9, r4, #25
 800b396:	e7f4      	b.n	800b382 <_printf_float+0x43e>

0800b398 <_printf_common>:
 800b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39c:	4616      	mov	r6, r2
 800b39e:	4698      	mov	r8, r3
 800b3a0:	688a      	ldr	r2, [r1, #8]
 800b3a2:	690b      	ldr	r3, [r1, #16]
 800b3a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	bfb8      	it	lt
 800b3ac:	4613      	movlt	r3, r2
 800b3ae:	6033      	str	r3, [r6, #0]
 800b3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	b10a      	cbz	r2, 800b3be <_printf_common+0x26>
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	6033      	str	r3, [r6, #0]
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	0699      	lsls	r1, r3, #26
 800b3c2:	bf42      	ittt	mi
 800b3c4:	6833      	ldrmi	r3, [r6, #0]
 800b3c6:	3302      	addmi	r3, #2
 800b3c8:	6033      	strmi	r3, [r6, #0]
 800b3ca:	6825      	ldr	r5, [r4, #0]
 800b3cc:	f015 0506 	ands.w	r5, r5, #6
 800b3d0:	d106      	bne.n	800b3e0 <_printf_common+0x48>
 800b3d2:	f104 0a19 	add.w	sl, r4, #25
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	6832      	ldr	r2, [r6, #0]
 800b3da:	1a9b      	subs	r3, r3, r2
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	dc26      	bgt.n	800b42e <_printf_common+0x96>
 800b3e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3e4:	6822      	ldr	r2, [r4, #0]
 800b3e6:	3b00      	subs	r3, #0
 800b3e8:	bf18      	it	ne
 800b3ea:	2301      	movne	r3, #1
 800b3ec:	0692      	lsls	r2, r2, #26
 800b3ee:	d42b      	bmi.n	800b448 <_printf_common+0xb0>
 800b3f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3f4:	4641      	mov	r1, r8
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	47c8      	blx	r9
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d01e      	beq.n	800b43c <_printf_common+0xa4>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	6922      	ldr	r2, [r4, #16]
 800b402:	f003 0306 	and.w	r3, r3, #6
 800b406:	2b04      	cmp	r3, #4
 800b408:	bf02      	ittt	eq
 800b40a:	68e5      	ldreq	r5, [r4, #12]
 800b40c:	6833      	ldreq	r3, [r6, #0]
 800b40e:	1aed      	subeq	r5, r5, r3
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	bf0c      	ite	eq
 800b414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b418:	2500      	movne	r5, #0
 800b41a:	4293      	cmp	r3, r2
 800b41c:	bfc4      	itt	gt
 800b41e:	1a9b      	subgt	r3, r3, r2
 800b420:	18ed      	addgt	r5, r5, r3
 800b422:	2600      	movs	r6, #0
 800b424:	341a      	adds	r4, #26
 800b426:	42b5      	cmp	r5, r6
 800b428:	d11a      	bne.n	800b460 <_printf_common+0xc8>
 800b42a:	2000      	movs	r0, #0
 800b42c:	e008      	b.n	800b440 <_printf_common+0xa8>
 800b42e:	2301      	movs	r3, #1
 800b430:	4652      	mov	r2, sl
 800b432:	4641      	mov	r1, r8
 800b434:	4638      	mov	r0, r7
 800b436:	47c8      	blx	r9
 800b438:	3001      	adds	r0, #1
 800b43a:	d103      	bne.n	800b444 <_printf_common+0xac>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b444:	3501      	adds	r5, #1
 800b446:	e7c6      	b.n	800b3d6 <_printf_common+0x3e>
 800b448:	18e1      	adds	r1, r4, r3
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	2030      	movs	r0, #48	@ 0x30
 800b44e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b452:	4422      	add	r2, r4
 800b454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b45c:	3302      	adds	r3, #2
 800b45e:	e7c7      	b.n	800b3f0 <_printf_common+0x58>
 800b460:	2301      	movs	r3, #1
 800b462:	4622      	mov	r2, r4
 800b464:	4641      	mov	r1, r8
 800b466:	4638      	mov	r0, r7
 800b468:	47c8      	blx	r9
 800b46a:	3001      	adds	r0, #1
 800b46c:	d0e6      	beq.n	800b43c <_printf_common+0xa4>
 800b46e:	3601      	adds	r6, #1
 800b470:	e7d9      	b.n	800b426 <_printf_common+0x8e>
	...

0800b474 <_printf_i>:
 800b474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	7e0f      	ldrb	r7, [r1, #24]
 800b47a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b47c:	2f78      	cmp	r7, #120	@ 0x78
 800b47e:	4691      	mov	r9, r2
 800b480:	4680      	mov	r8, r0
 800b482:	460c      	mov	r4, r1
 800b484:	469a      	mov	sl, r3
 800b486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b48a:	d807      	bhi.n	800b49c <_printf_i+0x28>
 800b48c:	2f62      	cmp	r7, #98	@ 0x62
 800b48e:	d80a      	bhi.n	800b4a6 <_printf_i+0x32>
 800b490:	2f00      	cmp	r7, #0
 800b492:	f000 80d1 	beq.w	800b638 <_printf_i+0x1c4>
 800b496:	2f58      	cmp	r7, #88	@ 0x58
 800b498:	f000 80b8 	beq.w	800b60c <_printf_i+0x198>
 800b49c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4a4:	e03a      	b.n	800b51c <_printf_i+0xa8>
 800b4a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4aa:	2b15      	cmp	r3, #21
 800b4ac:	d8f6      	bhi.n	800b49c <_printf_i+0x28>
 800b4ae:	a101      	add	r1, pc, #4	@ (adr r1, 800b4b4 <_printf_i+0x40>)
 800b4b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4b4:	0800b50d 	.word	0x0800b50d
 800b4b8:	0800b521 	.word	0x0800b521
 800b4bc:	0800b49d 	.word	0x0800b49d
 800b4c0:	0800b49d 	.word	0x0800b49d
 800b4c4:	0800b49d 	.word	0x0800b49d
 800b4c8:	0800b49d 	.word	0x0800b49d
 800b4cc:	0800b521 	.word	0x0800b521
 800b4d0:	0800b49d 	.word	0x0800b49d
 800b4d4:	0800b49d 	.word	0x0800b49d
 800b4d8:	0800b49d 	.word	0x0800b49d
 800b4dc:	0800b49d 	.word	0x0800b49d
 800b4e0:	0800b61f 	.word	0x0800b61f
 800b4e4:	0800b54b 	.word	0x0800b54b
 800b4e8:	0800b5d9 	.word	0x0800b5d9
 800b4ec:	0800b49d 	.word	0x0800b49d
 800b4f0:	0800b49d 	.word	0x0800b49d
 800b4f4:	0800b641 	.word	0x0800b641
 800b4f8:	0800b49d 	.word	0x0800b49d
 800b4fc:	0800b54b 	.word	0x0800b54b
 800b500:	0800b49d 	.word	0x0800b49d
 800b504:	0800b49d 	.word	0x0800b49d
 800b508:	0800b5e1 	.word	0x0800b5e1
 800b50c:	6833      	ldr	r3, [r6, #0]
 800b50e:	1d1a      	adds	r2, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	6032      	str	r2, [r6, #0]
 800b514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b51c:	2301      	movs	r3, #1
 800b51e:	e09c      	b.n	800b65a <_printf_i+0x1e6>
 800b520:	6833      	ldr	r3, [r6, #0]
 800b522:	6820      	ldr	r0, [r4, #0]
 800b524:	1d19      	adds	r1, r3, #4
 800b526:	6031      	str	r1, [r6, #0]
 800b528:	0606      	lsls	r6, r0, #24
 800b52a:	d501      	bpl.n	800b530 <_printf_i+0xbc>
 800b52c:	681d      	ldr	r5, [r3, #0]
 800b52e:	e003      	b.n	800b538 <_printf_i+0xc4>
 800b530:	0645      	lsls	r5, r0, #25
 800b532:	d5fb      	bpl.n	800b52c <_printf_i+0xb8>
 800b534:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b538:	2d00      	cmp	r5, #0
 800b53a:	da03      	bge.n	800b544 <_printf_i+0xd0>
 800b53c:	232d      	movs	r3, #45	@ 0x2d
 800b53e:	426d      	negs	r5, r5
 800b540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b544:	4858      	ldr	r0, [pc, #352]	@ (800b6a8 <_printf_i+0x234>)
 800b546:	230a      	movs	r3, #10
 800b548:	e011      	b.n	800b56e <_printf_i+0xfa>
 800b54a:	6821      	ldr	r1, [r4, #0]
 800b54c:	6833      	ldr	r3, [r6, #0]
 800b54e:	0608      	lsls	r0, r1, #24
 800b550:	f853 5b04 	ldr.w	r5, [r3], #4
 800b554:	d402      	bmi.n	800b55c <_printf_i+0xe8>
 800b556:	0649      	lsls	r1, r1, #25
 800b558:	bf48      	it	mi
 800b55a:	b2ad      	uxthmi	r5, r5
 800b55c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b55e:	4852      	ldr	r0, [pc, #328]	@ (800b6a8 <_printf_i+0x234>)
 800b560:	6033      	str	r3, [r6, #0]
 800b562:	bf14      	ite	ne
 800b564:	230a      	movne	r3, #10
 800b566:	2308      	moveq	r3, #8
 800b568:	2100      	movs	r1, #0
 800b56a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b56e:	6866      	ldr	r6, [r4, #4]
 800b570:	60a6      	str	r6, [r4, #8]
 800b572:	2e00      	cmp	r6, #0
 800b574:	db05      	blt.n	800b582 <_printf_i+0x10e>
 800b576:	6821      	ldr	r1, [r4, #0]
 800b578:	432e      	orrs	r6, r5
 800b57a:	f021 0104 	bic.w	r1, r1, #4
 800b57e:	6021      	str	r1, [r4, #0]
 800b580:	d04b      	beq.n	800b61a <_printf_i+0x1a6>
 800b582:	4616      	mov	r6, r2
 800b584:	fbb5 f1f3 	udiv	r1, r5, r3
 800b588:	fb03 5711 	mls	r7, r3, r1, r5
 800b58c:	5dc7      	ldrb	r7, [r0, r7]
 800b58e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b592:	462f      	mov	r7, r5
 800b594:	42bb      	cmp	r3, r7
 800b596:	460d      	mov	r5, r1
 800b598:	d9f4      	bls.n	800b584 <_printf_i+0x110>
 800b59a:	2b08      	cmp	r3, #8
 800b59c:	d10b      	bne.n	800b5b6 <_printf_i+0x142>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	07df      	lsls	r7, r3, #31
 800b5a2:	d508      	bpl.n	800b5b6 <_printf_i+0x142>
 800b5a4:	6923      	ldr	r3, [r4, #16]
 800b5a6:	6861      	ldr	r1, [r4, #4]
 800b5a8:	4299      	cmp	r1, r3
 800b5aa:	bfde      	ittt	le
 800b5ac:	2330      	movle	r3, #48	@ 0x30
 800b5ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5b2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b5b6:	1b92      	subs	r2, r2, r6
 800b5b8:	6122      	str	r2, [r4, #16]
 800b5ba:	f8cd a000 	str.w	sl, [sp]
 800b5be:	464b      	mov	r3, r9
 800b5c0:	aa03      	add	r2, sp, #12
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	4640      	mov	r0, r8
 800b5c6:	f7ff fee7 	bl	800b398 <_printf_common>
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	d14a      	bne.n	800b664 <_printf_i+0x1f0>
 800b5ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5d2:	b004      	add	sp, #16
 800b5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	f043 0320 	orr.w	r3, r3, #32
 800b5de:	6023      	str	r3, [r4, #0]
 800b5e0:	4832      	ldr	r0, [pc, #200]	@ (800b6ac <_printf_i+0x238>)
 800b5e2:	2778      	movs	r7, #120	@ 0x78
 800b5e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	6831      	ldr	r1, [r6, #0]
 800b5ec:	061f      	lsls	r7, r3, #24
 800b5ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5f2:	d402      	bmi.n	800b5fa <_printf_i+0x186>
 800b5f4:	065f      	lsls	r7, r3, #25
 800b5f6:	bf48      	it	mi
 800b5f8:	b2ad      	uxthmi	r5, r5
 800b5fa:	6031      	str	r1, [r6, #0]
 800b5fc:	07d9      	lsls	r1, r3, #31
 800b5fe:	bf44      	itt	mi
 800b600:	f043 0320 	orrmi.w	r3, r3, #32
 800b604:	6023      	strmi	r3, [r4, #0]
 800b606:	b11d      	cbz	r5, 800b610 <_printf_i+0x19c>
 800b608:	2310      	movs	r3, #16
 800b60a:	e7ad      	b.n	800b568 <_printf_i+0xf4>
 800b60c:	4826      	ldr	r0, [pc, #152]	@ (800b6a8 <_printf_i+0x234>)
 800b60e:	e7e9      	b.n	800b5e4 <_printf_i+0x170>
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	f023 0320 	bic.w	r3, r3, #32
 800b616:	6023      	str	r3, [r4, #0]
 800b618:	e7f6      	b.n	800b608 <_printf_i+0x194>
 800b61a:	4616      	mov	r6, r2
 800b61c:	e7bd      	b.n	800b59a <_printf_i+0x126>
 800b61e:	6833      	ldr	r3, [r6, #0]
 800b620:	6825      	ldr	r5, [r4, #0]
 800b622:	6961      	ldr	r1, [r4, #20]
 800b624:	1d18      	adds	r0, r3, #4
 800b626:	6030      	str	r0, [r6, #0]
 800b628:	062e      	lsls	r6, r5, #24
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	d501      	bpl.n	800b632 <_printf_i+0x1be>
 800b62e:	6019      	str	r1, [r3, #0]
 800b630:	e002      	b.n	800b638 <_printf_i+0x1c4>
 800b632:	0668      	lsls	r0, r5, #25
 800b634:	d5fb      	bpl.n	800b62e <_printf_i+0x1ba>
 800b636:	8019      	strh	r1, [r3, #0]
 800b638:	2300      	movs	r3, #0
 800b63a:	6123      	str	r3, [r4, #16]
 800b63c:	4616      	mov	r6, r2
 800b63e:	e7bc      	b.n	800b5ba <_printf_i+0x146>
 800b640:	6833      	ldr	r3, [r6, #0]
 800b642:	1d1a      	adds	r2, r3, #4
 800b644:	6032      	str	r2, [r6, #0]
 800b646:	681e      	ldr	r6, [r3, #0]
 800b648:	6862      	ldr	r2, [r4, #4]
 800b64a:	2100      	movs	r1, #0
 800b64c:	4630      	mov	r0, r6
 800b64e:	f7f4 fe0f 	bl	8000270 <memchr>
 800b652:	b108      	cbz	r0, 800b658 <_printf_i+0x1e4>
 800b654:	1b80      	subs	r0, r0, r6
 800b656:	6060      	str	r0, [r4, #4]
 800b658:	6863      	ldr	r3, [r4, #4]
 800b65a:	6123      	str	r3, [r4, #16]
 800b65c:	2300      	movs	r3, #0
 800b65e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b662:	e7aa      	b.n	800b5ba <_printf_i+0x146>
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	4632      	mov	r2, r6
 800b668:	4649      	mov	r1, r9
 800b66a:	4640      	mov	r0, r8
 800b66c:	47d0      	blx	sl
 800b66e:	3001      	adds	r0, #1
 800b670:	d0ad      	beq.n	800b5ce <_printf_i+0x15a>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	079b      	lsls	r3, r3, #30
 800b676:	d413      	bmi.n	800b6a0 <_printf_i+0x22c>
 800b678:	68e0      	ldr	r0, [r4, #12]
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	4298      	cmp	r0, r3
 800b67e:	bfb8      	it	lt
 800b680:	4618      	movlt	r0, r3
 800b682:	e7a6      	b.n	800b5d2 <_printf_i+0x15e>
 800b684:	2301      	movs	r3, #1
 800b686:	4632      	mov	r2, r6
 800b688:	4649      	mov	r1, r9
 800b68a:	4640      	mov	r0, r8
 800b68c:	47d0      	blx	sl
 800b68e:	3001      	adds	r0, #1
 800b690:	d09d      	beq.n	800b5ce <_printf_i+0x15a>
 800b692:	3501      	adds	r5, #1
 800b694:	68e3      	ldr	r3, [r4, #12]
 800b696:	9903      	ldr	r1, [sp, #12]
 800b698:	1a5b      	subs	r3, r3, r1
 800b69a:	42ab      	cmp	r3, r5
 800b69c:	dcf2      	bgt.n	800b684 <_printf_i+0x210>
 800b69e:	e7eb      	b.n	800b678 <_printf_i+0x204>
 800b6a0:	2500      	movs	r5, #0
 800b6a2:	f104 0619 	add.w	r6, r4, #25
 800b6a6:	e7f5      	b.n	800b694 <_printf_i+0x220>
 800b6a8:	0800e042 	.word	0x0800e042
 800b6ac:	0800e053 	.word	0x0800e053

0800b6b0 <rand>:
 800b6b0:	4b16      	ldr	r3, [pc, #88]	@ (800b70c <rand+0x5c>)
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	681c      	ldr	r4, [r3, #0]
 800b6b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b6b8:	b9b3      	cbnz	r3, 800b6e8 <rand+0x38>
 800b6ba:	2018      	movs	r0, #24
 800b6bc:	f001 f940 	bl	800c940 <malloc>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	6320      	str	r0, [r4, #48]	@ 0x30
 800b6c4:	b920      	cbnz	r0, 800b6d0 <rand+0x20>
 800b6c6:	4b12      	ldr	r3, [pc, #72]	@ (800b710 <rand+0x60>)
 800b6c8:	4812      	ldr	r0, [pc, #72]	@ (800b714 <rand+0x64>)
 800b6ca:	2152      	movs	r1, #82	@ 0x52
 800b6cc:	f000 f968 	bl	800b9a0 <__assert_func>
 800b6d0:	4911      	ldr	r1, [pc, #68]	@ (800b718 <rand+0x68>)
 800b6d2:	4b12      	ldr	r3, [pc, #72]	@ (800b71c <rand+0x6c>)
 800b6d4:	e9c0 1300 	strd	r1, r3, [r0]
 800b6d8:	4b11      	ldr	r3, [pc, #68]	@ (800b720 <rand+0x70>)
 800b6da:	6083      	str	r3, [r0, #8]
 800b6dc:	230b      	movs	r3, #11
 800b6de:	8183      	strh	r3, [r0, #12]
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b6e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b6ea:	480e      	ldr	r0, [pc, #56]	@ (800b724 <rand+0x74>)
 800b6ec:	690b      	ldr	r3, [r1, #16]
 800b6ee:	694c      	ldr	r4, [r1, #20]
 800b6f0:	4a0d      	ldr	r2, [pc, #52]	@ (800b728 <rand+0x78>)
 800b6f2:	4358      	muls	r0, r3
 800b6f4:	fb02 0004 	mla	r0, r2, r4, r0
 800b6f8:	fba3 3202 	umull	r3, r2, r3, r2
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	eb40 0002 	adc.w	r0, r0, r2
 800b702:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b706:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b70a:	bd10      	pop	{r4, pc}
 800b70c:	20000024 	.word	0x20000024
 800b710:	0800e064 	.word	0x0800e064
 800b714:	0800e07b 	.word	0x0800e07b
 800b718:	abcd330e 	.word	0xabcd330e
 800b71c:	e66d1234 	.word	0xe66d1234
 800b720:	0005deec 	.word	0x0005deec
 800b724:	5851f42d 	.word	0x5851f42d
 800b728:	4c957f2d 	.word	0x4c957f2d

0800b72c <std>:
 800b72c:	2300      	movs	r3, #0
 800b72e:	b510      	push	{r4, lr}
 800b730:	4604      	mov	r4, r0
 800b732:	e9c0 3300 	strd	r3, r3, [r0]
 800b736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b73a:	6083      	str	r3, [r0, #8]
 800b73c:	8181      	strh	r1, [r0, #12]
 800b73e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b740:	81c2      	strh	r2, [r0, #14]
 800b742:	6183      	str	r3, [r0, #24]
 800b744:	4619      	mov	r1, r3
 800b746:	2208      	movs	r2, #8
 800b748:	305c      	adds	r0, #92	@ 0x5c
 800b74a:	f000 f8e1 	bl	800b910 <memset>
 800b74e:	4b0d      	ldr	r3, [pc, #52]	@ (800b784 <std+0x58>)
 800b750:	6263      	str	r3, [r4, #36]	@ 0x24
 800b752:	4b0d      	ldr	r3, [pc, #52]	@ (800b788 <std+0x5c>)
 800b754:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b756:	4b0d      	ldr	r3, [pc, #52]	@ (800b78c <std+0x60>)
 800b758:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b75a:	4b0d      	ldr	r3, [pc, #52]	@ (800b790 <std+0x64>)
 800b75c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b75e:	4b0d      	ldr	r3, [pc, #52]	@ (800b794 <std+0x68>)
 800b760:	6224      	str	r4, [r4, #32]
 800b762:	429c      	cmp	r4, r3
 800b764:	d006      	beq.n	800b774 <std+0x48>
 800b766:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b76a:	4294      	cmp	r4, r2
 800b76c:	d002      	beq.n	800b774 <std+0x48>
 800b76e:	33d0      	adds	r3, #208	@ 0xd0
 800b770:	429c      	cmp	r4, r3
 800b772:	d105      	bne.n	800b780 <std+0x54>
 800b774:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b77c:	f000 b8fa 	b.w	800b974 <__retarget_lock_init_recursive>
 800b780:	bd10      	pop	{r4, pc}
 800b782:	bf00      	nop
 800b784:	0800d2f9 	.word	0x0800d2f9
 800b788:	0800d31b 	.word	0x0800d31b
 800b78c:	0800d353 	.word	0x0800d353
 800b790:	0800d377 	.word	0x0800d377
 800b794:	200173f8 	.word	0x200173f8

0800b798 <stdio_exit_handler>:
 800b798:	4a02      	ldr	r2, [pc, #8]	@ (800b7a4 <stdio_exit_handler+0xc>)
 800b79a:	4903      	ldr	r1, [pc, #12]	@ (800b7a8 <stdio_exit_handler+0x10>)
 800b79c:	4803      	ldr	r0, [pc, #12]	@ (800b7ac <stdio_exit_handler+0x14>)
 800b79e:	f000 b889 	b.w	800b8b4 <_fwalk_sglue>
 800b7a2:	bf00      	nop
 800b7a4:	20000018 	.word	0x20000018
 800b7a8:	0800cb9d 	.word	0x0800cb9d
 800b7ac:	20000028 	.word	0x20000028

0800b7b0 <cleanup_stdio>:
 800b7b0:	6841      	ldr	r1, [r0, #4]
 800b7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b7e4 <cleanup_stdio+0x34>)
 800b7b4:	4299      	cmp	r1, r3
 800b7b6:	b510      	push	{r4, lr}
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	d001      	beq.n	800b7c0 <cleanup_stdio+0x10>
 800b7bc:	f001 f9ee 	bl	800cb9c <_fflush_r>
 800b7c0:	68a1      	ldr	r1, [r4, #8]
 800b7c2:	4b09      	ldr	r3, [pc, #36]	@ (800b7e8 <cleanup_stdio+0x38>)
 800b7c4:	4299      	cmp	r1, r3
 800b7c6:	d002      	beq.n	800b7ce <cleanup_stdio+0x1e>
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f001 f9e7 	bl	800cb9c <_fflush_r>
 800b7ce:	68e1      	ldr	r1, [r4, #12]
 800b7d0:	4b06      	ldr	r3, [pc, #24]	@ (800b7ec <cleanup_stdio+0x3c>)
 800b7d2:	4299      	cmp	r1, r3
 800b7d4:	d004      	beq.n	800b7e0 <cleanup_stdio+0x30>
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7dc:	f001 b9de 	b.w	800cb9c <_fflush_r>
 800b7e0:	bd10      	pop	{r4, pc}
 800b7e2:	bf00      	nop
 800b7e4:	200173f8 	.word	0x200173f8
 800b7e8:	20017460 	.word	0x20017460
 800b7ec:	200174c8 	.word	0x200174c8

0800b7f0 <global_stdio_init.part.0>:
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b820 <global_stdio_init.part.0+0x30>)
 800b7f4:	4c0b      	ldr	r4, [pc, #44]	@ (800b824 <global_stdio_init.part.0+0x34>)
 800b7f6:	4a0c      	ldr	r2, [pc, #48]	@ (800b828 <global_stdio_init.part.0+0x38>)
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2104      	movs	r1, #4
 800b800:	f7ff ff94 	bl	800b72c <std>
 800b804:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b808:	2201      	movs	r2, #1
 800b80a:	2109      	movs	r1, #9
 800b80c:	f7ff ff8e 	bl	800b72c <std>
 800b810:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b814:	2202      	movs	r2, #2
 800b816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b81a:	2112      	movs	r1, #18
 800b81c:	f7ff bf86 	b.w	800b72c <std>
 800b820:	20017530 	.word	0x20017530
 800b824:	200173f8 	.word	0x200173f8
 800b828:	0800b799 	.word	0x0800b799

0800b82c <__sfp_lock_acquire>:
 800b82c:	4801      	ldr	r0, [pc, #4]	@ (800b834 <__sfp_lock_acquire+0x8>)
 800b82e:	f000 b8a2 	b.w	800b976 <__retarget_lock_acquire_recursive>
 800b832:	bf00      	nop
 800b834:	20017535 	.word	0x20017535

0800b838 <__sfp_lock_release>:
 800b838:	4801      	ldr	r0, [pc, #4]	@ (800b840 <__sfp_lock_release+0x8>)
 800b83a:	f000 b89d 	b.w	800b978 <__retarget_lock_release_recursive>
 800b83e:	bf00      	nop
 800b840:	20017535 	.word	0x20017535

0800b844 <__sinit>:
 800b844:	b510      	push	{r4, lr}
 800b846:	4604      	mov	r4, r0
 800b848:	f7ff fff0 	bl	800b82c <__sfp_lock_acquire>
 800b84c:	6a23      	ldr	r3, [r4, #32]
 800b84e:	b11b      	cbz	r3, 800b858 <__sinit+0x14>
 800b850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b854:	f7ff bff0 	b.w	800b838 <__sfp_lock_release>
 800b858:	4b04      	ldr	r3, [pc, #16]	@ (800b86c <__sinit+0x28>)
 800b85a:	6223      	str	r3, [r4, #32]
 800b85c:	4b04      	ldr	r3, [pc, #16]	@ (800b870 <__sinit+0x2c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1f5      	bne.n	800b850 <__sinit+0xc>
 800b864:	f7ff ffc4 	bl	800b7f0 <global_stdio_init.part.0>
 800b868:	e7f2      	b.n	800b850 <__sinit+0xc>
 800b86a:	bf00      	nop
 800b86c:	0800b7b1 	.word	0x0800b7b1
 800b870:	20017530 	.word	0x20017530

0800b874 <_vsiprintf_r>:
 800b874:	b510      	push	{r4, lr}
 800b876:	b09a      	sub	sp, #104	@ 0x68
 800b878:	2400      	movs	r4, #0
 800b87a:	9100      	str	r1, [sp, #0]
 800b87c:	9104      	str	r1, [sp, #16]
 800b87e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b882:	9105      	str	r1, [sp, #20]
 800b884:	9102      	str	r1, [sp, #8]
 800b886:	4905      	ldr	r1, [pc, #20]	@ (800b89c <_vsiprintf_r+0x28>)
 800b888:	9103      	str	r1, [sp, #12]
 800b88a:	4669      	mov	r1, sp
 800b88c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b88e:	f000 ff5b 	bl	800c748 <_svfiprintf_r>
 800b892:	9b00      	ldr	r3, [sp, #0]
 800b894:	701c      	strb	r4, [r3, #0]
 800b896:	b01a      	add	sp, #104	@ 0x68
 800b898:	bd10      	pop	{r4, pc}
 800b89a:	bf00      	nop
 800b89c:	ffff0208 	.word	0xffff0208

0800b8a0 <vsiprintf>:
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	460a      	mov	r2, r1
 800b8a4:	4601      	mov	r1, r0
 800b8a6:	4802      	ldr	r0, [pc, #8]	@ (800b8b0 <vsiprintf+0x10>)
 800b8a8:	6800      	ldr	r0, [r0, #0]
 800b8aa:	f7ff bfe3 	b.w	800b874 <_vsiprintf_r>
 800b8ae:	bf00      	nop
 800b8b0:	20000024 	.word	0x20000024

0800b8b4 <_fwalk_sglue>:
 800b8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b8:	4607      	mov	r7, r0
 800b8ba:	4688      	mov	r8, r1
 800b8bc:	4614      	mov	r4, r2
 800b8be:	2600      	movs	r6, #0
 800b8c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8c4:	f1b9 0901 	subs.w	r9, r9, #1
 800b8c8:	d505      	bpl.n	800b8d6 <_fwalk_sglue+0x22>
 800b8ca:	6824      	ldr	r4, [r4, #0]
 800b8cc:	2c00      	cmp	r4, #0
 800b8ce:	d1f7      	bne.n	800b8c0 <_fwalk_sglue+0xc>
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8d6:	89ab      	ldrh	r3, [r5, #12]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d907      	bls.n	800b8ec <_fwalk_sglue+0x38>
 800b8dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	d003      	beq.n	800b8ec <_fwalk_sglue+0x38>
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	47c0      	blx	r8
 800b8ea:	4306      	orrs	r6, r0
 800b8ec:	3568      	adds	r5, #104	@ 0x68
 800b8ee:	e7e9      	b.n	800b8c4 <_fwalk_sglue+0x10>

0800b8f0 <memcmp>:
 800b8f0:	b510      	push	{r4, lr}
 800b8f2:	3901      	subs	r1, #1
 800b8f4:	4402      	add	r2, r0
 800b8f6:	4290      	cmp	r0, r2
 800b8f8:	d101      	bne.n	800b8fe <memcmp+0xe>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	e005      	b.n	800b90a <memcmp+0x1a>
 800b8fe:	7803      	ldrb	r3, [r0, #0]
 800b900:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b904:	42a3      	cmp	r3, r4
 800b906:	d001      	beq.n	800b90c <memcmp+0x1c>
 800b908:	1b18      	subs	r0, r3, r4
 800b90a:	bd10      	pop	{r4, pc}
 800b90c:	3001      	adds	r0, #1
 800b90e:	e7f2      	b.n	800b8f6 <memcmp+0x6>

0800b910 <memset>:
 800b910:	4402      	add	r2, r0
 800b912:	4603      	mov	r3, r0
 800b914:	4293      	cmp	r3, r2
 800b916:	d100      	bne.n	800b91a <memset+0xa>
 800b918:	4770      	bx	lr
 800b91a:	f803 1b01 	strb.w	r1, [r3], #1
 800b91e:	e7f9      	b.n	800b914 <memset+0x4>

0800b920 <__errno>:
 800b920:	4b01      	ldr	r3, [pc, #4]	@ (800b928 <__errno+0x8>)
 800b922:	6818      	ldr	r0, [r3, #0]
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	20000024 	.word	0x20000024

0800b92c <__libc_init_array>:
 800b92c:	b570      	push	{r4, r5, r6, lr}
 800b92e:	4d0d      	ldr	r5, [pc, #52]	@ (800b964 <__libc_init_array+0x38>)
 800b930:	4c0d      	ldr	r4, [pc, #52]	@ (800b968 <__libc_init_array+0x3c>)
 800b932:	1b64      	subs	r4, r4, r5
 800b934:	10a4      	asrs	r4, r4, #2
 800b936:	2600      	movs	r6, #0
 800b938:	42a6      	cmp	r6, r4
 800b93a:	d109      	bne.n	800b950 <__libc_init_array+0x24>
 800b93c:	4d0b      	ldr	r5, [pc, #44]	@ (800b96c <__libc_init_array+0x40>)
 800b93e:	4c0c      	ldr	r4, [pc, #48]	@ (800b970 <__libc_init_array+0x44>)
 800b940:	f002 f8e8 	bl	800db14 <_init>
 800b944:	1b64      	subs	r4, r4, r5
 800b946:	10a4      	asrs	r4, r4, #2
 800b948:	2600      	movs	r6, #0
 800b94a:	42a6      	cmp	r6, r4
 800b94c:	d105      	bne.n	800b95a <__libc_init_array+0x2e>
 800b94e:	bd70      	pop	{r4, r5, r6, pc}
 800b950:	f855 3b04 	ldr.w	r3, [r5], #4
 800b954:	4798      	blx	r3
 800b956:	3601      	adds	r6, #1
 800b958:	e7ee      	b.n	800b938 <__libc_init_array+0xc>
 800b95a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b95e:	4798      	blx	r3
 800b960:	3601      	adds	r6, #1
 800b962:	e7f2      	b.n	800b94a <__libc_init_array+0x1e>
 800b964:	0800e404 	.word	0x0800e404
 800b968:	0800e404 	.word	0x0800e404
 800b96c:	0800e404 	.word	0x0800e404
 800b970:	0800e408 	.word	0x0800e408

0800b974 <__retarget_lock_init_recursive>:
 800b974:	4770      	bx	lr

0800b976 <__retarget_lock_acquire_recursive>:
 800b976:	4770      	bx	lr

0800b978 <__retarget_lock_release_recursive>:
 800b978:	4770      	bx	lr
	...

0800b97c <_localeconv_r>:
 800b97c:	4800      	ldr	r0, [pc, #0]	@ (800b980 <_localeconv_r+0x4>)
 800b97e:	4770      	bx	lr
 800b980:	20000164 	.word	0x20000164

0800b984 <memcpy>:
 800b984:	440a      	add	r2, r1
 800b986:	4291      	cmp	r1, r2
 800b988:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b98c:	d100      	bne.n	800b990 <memcpy+0xc>
 800b98e:	4770      	bx	lr
 800b990:	b510      	push	{r4, lr}
 800b992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b99a:	4291      	cmp	r1, r2
 800b99c:	d1f9      	bne.n	800b992 <memcpy+0xe>
 800b99e:	bd10      	pop	{r4, pc}

0800b9a0 <__assert_func>:
 800b9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9a2:	4614      	mov	r4, r2
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	4b09      	ldr	r3, [pc, #36]	@ (800b9cc <__assert_func+0x2c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4605      	mov	r5, r0
 800b9ac:	68d8      	ldr	r0, [r3, #12]
 800b9ae:	b14c      	cbz	r4, 800b9c4 <__assert_func+0x24>
 800b9b0:	4b07      	ldr	r3, [pc, #28]	@ (800b9d0 <__assert_func+0x30>)
 800b9b2:	9100      	str	r1, [sp, #0]
 800b9b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9b8:	4906      	ldr	r1, [pc, #24]	@ (800b9d4 <__assert_func+0x34>)
 800b9ba:	462b      	mov	r3, r5
 800b9bc:	f001 fce0 	bl	800d380 <fiprintf>
 800b9c0:	f001 fd7c 	bl	800d4bc <abort>
 800b9c4:	4b04      	ldr	r3, [pc, #16]	@ (800b9d8 <__assert_func+0x38>)
 800b9c6:	461c      	mov	r4, r3
 800b9c8:	e7f3      	b.n	800b9b2 <__assert_func+0x12>
 800b9ca:	bf00      	nop
 800b9cc:	20000024 	.word	0x20000024
 800b9d0:	0800e0d3 	.word	0x0800e0d3
 800b9d4:	0800e0e0 	.word	0x0800e0e0
 800b9d8:	0800e10e 	.word	0x0800e10e

0800b9dc <quorem>:
 800b9dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	6903      	ldr	r3, [r0, #16]
 800b9e2:	690c      	ldr	r4, [r1, #16]
 800b9e4:	42a3      	cmp	r3, r4
 800b9e6:	4607      	mov	r7, r0
 800b9e8:	db7e      	blt.n	800bae8 <quorem+0x10c>
 800b9ea:	3c01      	subs	r4, #1
 800b9ec:	f101 0814 	add.w	r8, r1, #20
 800b9f0:	00a3      	lsls	r3, r4, #2
 800b9f2:	f100 0514 	add.w	r5, r0, #20
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba06:	3301      	adds	r3, #1
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba0e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba12:	d32e      	bcc.n	800ba72 <quorem+0x96>
 800ba14:	f04f 0a00 	mov.w	sl, #0
 800ba18:	46c4      	mov	ip, r8
 800ba1a:	46ae      	mov	lr, r5
 800ba1c:	46d3      	mov	fp, sl
 800ba1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba22:	b298      	uxth	r0, r3
 800ba24:	fb06 a000 	mla	r0, r6, r0, sl
 800ba28:	0c02      	lsrs	r2, r0, #16
 800ba2a:	0c1b      	lsrs	r3, r3, #16
 800ba2c:	fb06 2303 	mla	r3, r6, r3, r2
 800ba30:	f8de 2000 	ldr.w	r2, [lr]
 800ba34:	b280      	uxth	r0, r0
 800ba36:	b292      	uxth	r2, r2
 800ba38:	1a12      	subs	r2, r2, r0
 800ba3a:	445a      	add	r2, fp
 800ba3c:	f8de 0000 	ldr.w	r0, [lr]
 800ba40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba4e:	b292      	uxth	r2, r2
 800ba50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba54:	45e1      	cmp	r9, ip
 800ba56:	f84e 2b04 	str.w	r2, [lr], #4
 800ba5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba5e:	d2de      	bcs.n	800ba1e <quorem+0x42>
 800ba60:	9b00      	ldr	r3, [sp, #0]
 800ba62:	58eb      	ldr	r3, [r5, r3]
 800ba64:	b92b      	cbnz	r3, 800ba72 <quorem+0x96>
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	3b04      	subs	r3, #4
 800ba6a:	429d      	cmp	r5, r3
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	d32f      	bcc.n	800bad0 <quorem+0xf4>
 800ba70:	613c      	str	r4, [r7, #16]
 800ba72:	4638      	mov	r0, r7
 800ba74:	f001 fb38 	bl	800d0e8 <__mcmp>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	db25      	blt.n	800bac8 <quorem+0xec>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	2000      	movs	r0, #0
 800ba80:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba84:	f8d1 c000 	ldr.w	ip, [r1]
 800ba88:	fa1f fe82 	uxth.w	lr, r2
 800ba8c:	fa1f f38c 	uxth.w	r3, ip
 800ba90:	eba3 030e 	sub.w	r3, r3, lr
 800ba94:	4403      	add	r3, r0
 800ba96:	0c12      	lsrs	r2, r2, #16
 800ba98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baa6:	45c1      	cmp	r9, r8
 800baa8:	f841 3b04 	str.w	r3, [r1], #4
 800baac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bab0:	d2e6      	bcs.n	800ba80 <quorem+0xa4>
 800bab2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baba:	b922      	cbnz	r2, 800bac6 <quorem+0xea>
 800babc:	3b04      	subs	r3, #4
 800babe:	429d      	cmp	r5, r3
 800bac0:	461a      	mov	r2, r3
 800bac2:	d30b      	bcc.n	800badc <quorem+0x100>
 800bac4:	613c      	str	r4, [r7, #16]
 800bac6:	3601      	adds	r6, #1
 800bac8:	4630      	mov	r0, r6
 800baca:	b003      	add	sp, #12
 800bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad0:	6812      	ldr	r2, [r2, #0]
 800bad2:	3b04      	subs	r3, #4
 800bad4:	2a00      	cmp	r2, #0
 800bad6:	d1cb      	bne.n	800ba70 <quorem+0x94>
 800bad8:	3c01      	subs	r4, #1
 800bada:	e7c6      	b.n	800ba6a <quorem+0x8e>
 800badc:	6812      	ldr	r2, [r2, #0]
 800bade:	3b04      	subs	r3, #4
 800bae0:	2a00      	cmp	r2, #0
 800bae2:	d1ef      	bne.n	800bac4 <quorem+0xe8>
 800bae4:	3c01      	subs	r4, #1
 800bae6:	e7ea      	b.n	800babe <quorem+0xe2>
 800bae8:	2000      	movs	r0, #0
 800baea:	e7ee      	b.n	800baca <quorem+0xee>
 800baec:	0000      	movs	r0, r0
	...

0800baf0 <_dtoa_r>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	69c7      	ldr	r7, [r0, #28]
 800baf6:	b097      	sub	sp, #92	@ 0x5c
 800baf8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bafc:	ec55 4b10 	vmov	r4, r5, d0
 800bb00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bb02:	9107      	str	r1, [sp, #28]
 800bb04:	4681      	mov	r9, r0
 800bb06:	920c      	str	r2, [sp, #48]	@ 0x30
 800bb08:	9311      	str	r3, [sp, #68]	@ 0x44
 800bb0a:	b97f      	cbnz	r7, 800bb2c <_dtoa_r+0x3c>
 800bb0c:	2010      	movs	r0, #16
 800bb0e:	f000 ff17 	bl	800c940 <malloc>
 800bb12:	4602      	mov	r2, r0
 800bb14:	f8c9 001c 	str.w	r0, [r9, #28]
 800bb18:	b920      	cbnz	r0, 800bb24 <_dtoa_r+0x34>
 800bb1a:	4ba9      	ldr	r3, [pc, #676]	@ (800bdc0 <_dtoa_r+0x2d0>)
 800bb1c:	21ef      	movs	r1, #239	@ 0xef
 800bb1e:	48a9      	ldr	r0, [pc, #676]	@ (800bdc4 <_dtoa_r+0x2d4>)
 800bb20:	f7ff ff3e 	bl	800b9a0 <__assert_func>
 800bb24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bb28:	6007      	str	r7, [r0, #0]
 800bb2a:	60c7      	str	r7, [r0, #12]
 800bb2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bb30:	6819      	ldr	r1, [r3, #0]
 800bb32:	b159      	cbz	r1, 800bb4c <_dtoa_r+0x5c>
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	604a      	str	r2, [r1, #4]
 800bb38:	2301      	movs	r3, #1
 800bb3a:	4093      	lsls	r3, r2
 800bb3c:	608b      	str	r3, [r1, #8]
 800bb3e:	4648      	mov	r0, r9
 800bb40:	f001 f8a0 	bl	800cc84 <_Bfree>
 800bb44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	601a      	str	r2, [r3, #0]
 800bb4c:	1e2b      	subs	r3, r5, #0
 800bb4e:	bfb9      	ittee	lt
 800bb50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb54:	9305      	strlt	r3, [sp, #20]
 800bb56:	2300      	movge	r3, #0
 800bb58:	6033      	strge	r3, [r6, #0]
 800bb5a:	9f05      	ldr	r7, [sp, #20]
 800bb5c:	4b9a      	ldr	r3, [pc, #616]	@ (800bdc8 <_dtoa_r+0x2d8>)
 800bb5e:	bfbc      	itt	lt
 800bb60:	2201      	movlt	r2, #1
 800bb62:	6032      	strlt	r2, [r6, #0]
 800bb64:	43bb      	bics	r3, r7
 800bb66:	d112      	bne.n	800bb8e <_dtoa_r+0x9e>
 800bb68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bb6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb74:	4323      	orrs	r3, r4
 800bb76:	f000 855a 	beq.w	800c62e <_dtoa_r+0xb3e>
 800bb7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb7c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bddc <_dtoa_r+0x2ec>
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 855c 	beq.w	800c63e <_dtoa_r+0xb4e>
 800bb86:	f10a 0303 	add.w	r3, sl, #3
 800bb8a:	f000 bd56 	b.w	800c63a <_dtoa_r+0xb4a>
 800bb8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bb92:	2200      	movs	r2, #0
 800bb94:	ec51 0b17 	vmov	r0, r1, d7
 800bb98:	2300      	movs	r3, #0
 800bb9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bb9e:	f7f4 ffe3 	bl	8000b68 <__aeabi_dcmpeq>
 800bba2:	4680      	mov	r8, r0
 800bba4:	b158      	cbz	r0, 800bbbe <_dtoa_r+0xce>
 800bba6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bba8:	2301      	movs	r3, #1
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bbae:	b113      	cbz	r3, 800bbb6 <_dtoa_r+0xc6>
 800bbb0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bbb2:	4b86      	ldr	r3, [pc, #536]	@ (800bdcc <_dtoa_r+0x2dc>)
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bde0 <_dtoa_r+0x2f0>
 800bbba:	f000 bd40 	b.w	800c63e <_dtoa_r+0xb4e>
 800bbbe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bbc2:	aa14      	add	r2, sp, #80	@ 0x50
 800bbc4:	a915      	add	r1, sp, #84	@ 0x54
 800bbc6:	4648      	mov	r0, r9
 800bbc8:	f001 fb3e 	bl	800d248 <__d2b>
 800bbcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bbd0:	9002      	str	r0, [sp, #8]
 800bbd2:	2e00      	cmp	r6, #0
 800bbd4:	d078      	beq.n	800bcc8 <_dtoa_r+0x1d8>
 800bbd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bbdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbe0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bbe4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bbe8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bbec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	4b76      	ldr	r3, [pc, #472]	@ (800bdd0 <_dtoa_r+0x2e0>)
 800bbf6:	f7f4 fb97 	bl	8000328 <__aeabi_dsub>
 800bbfa:	a36b      	add	r3, pc, #428	@ (adr r3, 800bda8 <_dtoa_r+0x2b8>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 fd4a 	bl	8000698 <__aeabi_dmul>
 800bc04:	a36a      	add	r3, pc, #424	@ (adr r3, 800bdb0 <_dtoa_r+0x2c0>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	f7f4 fb8f 	bl	800032c <__adddf3>
 800bc0e:	4604      	mov	r4, r0
 800bc10:	4630      	mov	r0, r6
 800bc12:	460d      	mov	r5, r1
 800bc14:	f7f4 fcd6 	bl	80005c4 <__aeabi_i2d>
 800bc18:	a367      	add	r3, pc, #412	@ (adr r3, 800bdb8 <_dtoa_r+0x2c8>)
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	f7f4 fd3b 	bl	8000698 <__aeabi_dmul>
 800bc22:	4602      	mov	r2, r0
 800bc24:	460b      	mov	r3, r1
 800bc26:	4620      	mov	r0, r4
 800bc28:	4629      	mov	r1, r5
 800bc2a:	f7f4 fb7f 	bl	800032c <__adddf3>
 800bc2e:	4604      	mov	r4, r0
 800bc30:	460d      	mov	r5, r1
 800bc32:	f7f4 ffe1 	bl	8000bf8 <__aeabi_d2iz>
 800bc36:	2200      	movs	r2, #0
 800bc38:	4607      	mov	r7, r0
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 ff9c 	bl	8000b7c <__aeabi_dcmplt>
 800bc44:	b140      	cbz	r0, 800bc58 <_dtoa_r+0x168>
 800bc46:	4638      	mov	r0, r7
 800bc48:	f7f4 fcbc 	bl	80005c4 <__aeabi_i2d>
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	462b      	mov	r3, r5
 800bc50:	f7f4 ff8a 	bl	8000b68 <__aeabi_dcmpeq>
 800bc54:	b900      	cbnz	r0, 800bc58 <_dtoa_r+0x168>
 800bc56:	3f01      	subs	r7, #1
 800bc58:	2f16      	cmp	r7, #22
 800bc5a:	d852      	bhi.n	800bd02 <_dtoa_r+0x212>
 800bc5c:	4b5d      	ldr	r3, [pc, #372]	@ (800bdd4 <_dtoa_r+0x2e4>)
 800bc5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc6a:	f7f4 ff87 	bl	8000b7c <__aeabi_dcmplt>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d049      	beq.n	800bd06 <_dtoa_r+0x216>
 800bc72:	3f01      	subs	r7, #1
 800bc74:	2300      	movs	r3, #0
 800bc76:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc7a:	1b9b      	subs	r3, r3, r6
 800bc7c:	1e5a      	subs	r2, r3, #1
 800bc7e:	bf45      	ittet	mi
 800bc80:	f1c3 0301 	rsbmi	r3, r3, #1
 800bc84:	9300      	strmi	r3, [sp, #0]
 800bc86:	2300      	movpl	r3, #0
 800bc88:	2300      	movmi	r3, #0
 800bc8a:	9206      	str	r2, [sp, #24]
 800bc8c:	bf54      	ite	pl
 800bc8e:	9300      	strpl	r3, [sp, #0]
 800bc90:	9306      	strmi	r3, [sp, #24]
 800bc92:	2f00      	cmp	r7, #0
 800bc94:	db39      	blt.n	800bd0a <_dtoa_r+0x21a>
 800bc96:	9b06      	ldr	r3, [sp, #24]
 800bc98:	970d      	str	r7, [sp, #52]	@ 0x34
 800bc9a:	443b      	add	r3, r7
 800bc9c:	9306      	str	r3, [sp, #24]
 800bc9e:	2300      	movs	r3, #0
 800bca0:	9308      	str	r3, [sp, #32]
 800bca2:	9b07      	ldr	r3, [sp, #28]
 800bca4:	2b09      	cmp	r3, #9
 800bca6:	d863      	bhi.n	800bd70 <_dtoa_r+0x280>
 800bca8:	2b05      	cmp	r3, #5
 800bcaa:	bfc4      	itt	gt
 800bcac:	3b04      	subgt	r3, #4
 800bcae:	9307      	strgt	r3, [sp, #28]
 800bcb0:	9b07      	ldr	r3, [sp, #28]
 800bcb2:	f1a3 0302 	sub.w	r3, r3, #2
 800bcb6:	bfcc      	ite	gt
 800bcb8:	2400      	movgt	r4, #0
 800bcba:	2401      	movle	r4, #1
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d863      	bhi.n	800bd88 <_dtoa_r+0x298>
 800bcc0:	e8df f003 	tbb	[pc, r3]
 800bcc4:	2b375452 	.word	0x2b375452
 800bcc8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bccc:	441e      	add	r6, r3
 800bcce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bcd2:	2b20      	cmp	r3, #32
 800bcd4:	bfc1      	itttt	gt
 800bcd6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bcda:	409f      	lslgt	r7, r3
 800bcdc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bce0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bce4:	bfd6      	itet	le
 800bce6:	f1c3 0320 	rsble	r3, r3, #32
 800bcea:	ea47 0003 	orrgt.w	r0, r7, r3
 800bcee:	fa04 f003 	lslle.w	r0, r4, r3
 800bcf2:	f7f4 fc57 	bl	80005a4 <__aeabi_ui2d>
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bcfc:	3e01      	subs	r6, #1
 800bcfe:	9212      	str	r2, [sp, #72]	@ 0x48
 800bd00:	e776      	b.n	800bbf0 <_dtoa_r+0x100>
 800bd02:	2301      	movs	r3, #1
 800bd04:	e7b7      	b.n	800bc76 <_dtoa_r+0x186>
 800bd06:	9010      	str	r0, [sp, #64]	@ 0x40
 800bd08:	e7b6      	b.n	800bc78 <_dtoa_r+0x188>
 800bd0a:	9b00      	ldr	r3, [sp, #0]
 800bd0c:	1bdb      	subs	r3, r3, r7
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	427b      	negs	r3, r7
 800bd12:	9308      	str	r3, [sp, #32]
 800bd14:	2300      	movs	r3, #0
 800bd16:	930d      	str	r3, [sp, #52]	@ 0x34
 800bd18:	e7c3      	b.n	800bca2 <_dtoa_r+0x1b2>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd20:	eb07 0b03 	add.w	fp, r7, r3
 800bd24:	f10b 0301 	add.w	r3, fp, #1
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	9303      	str	r3, [sp, #12]
 800bd2c:	bfb8      	it	lt
 800bd2e:	2301      	movlt	r3, #1
 800bd30:	e006      	b.n	800bd40 <_dtoa_r+0x250>
 800bd32:	2301      	movs	r3, #1
 800bd34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	dd28      	ble.n	800bd8e <_dtoa_r+0x29e>
 800bd3c:	469b      	mov	fp, r3
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bd44:	2100      	movs	r1, #0
 800bd46:	2204      	movs	r2, #4
 800bd48:	f102 0514 	add.w	r5, r2, #20
 800bd4c:	429d      	cmp	r5, r3
 800bd4e:	d926      	bls.n	800bd9e <_dtoa_r+0x2ae>
 800bd50:	6041      	str	r1, [r0, #4]
 800bd52:	4648      	mov	r0, r9
 800bd54:	f000 ff56 	bl	800cc04 <_Balloc>
 800bd58:	4682      	mov	sl, r0
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d142      	bne.n	800bde4 <_dtoa_r+0x2f4>
 800bd5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bdd8 <_dtoa_r+0x2e8>)
 800bd60:	4602      	mov	r2, r0
 800bd62:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd66:	e6da      	b.n	800bb1e <_dtoa_r+0x2e>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e7e3      	b.n	800bd34 <_dtoa_r+0x244>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	e7d5      	b.n	800bd1c <_dtoa_r+0x22c>
 800bd70:	2401      	movs	r4, #1
 800bd72:	2300      	movs	r3, #0
 800bd74:	9307      	str	r3, [sp, #28]
 800bd76:	9409      	str	r4, [sp, #36]	@ 0x24
 800bd78:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f8cd b00c 	str.w	fp, [sp, #12]
 800bd82:	2312      	movs	r3, #18
 800bd84:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd86:	e7db      	b.n	800bd40 <_dtoa_r+0x250>
 800bd88:	2301      	movs	r3, #1
 800bd8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd8c:	e7f4      	b.n	800bd78 <_dtoa_r+0x288>
 800bd8e:	f04f 0b01 	mov.w	fp, #1
 800bd92:	f8cd b00c 	str.w	fp, [sp, #12]
 800bd96:	465b      	mov	r3, fp
 800bd98:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bd9c:	e7d0      	b.n	800bd40 <_dtoa_r+0x250>
 800bd9e:	3101      	adds	r1, #1
 800bda0:	0052      	lsls	r2, r2, #1
 800bda2:	e7d1      	b.n	800bd48 <_dtoa_r+0x258>
 800bda4:	f3af 8000 	nop.w
 800bda8:	636f4361 	.word	0x636f4361
 800bdac:	3fd287a7 	.word	0x3fd287a7
 800bdb0:	8b60c8b3 	.word	0x8b60c8b3
 800bdb4:	3fc68a28 	.word	0x3fc68a28
 800bdb8:	509f79fb 	.word	0x509f79fb
 800bdbc:	3fd34413 	.word	0x3fd34413
 800bdc0:	0800e064 	.word	0x0800e064
 800bdc4:	0800e11c 	.word	0x0800e11c
 800bdc8:	7ff00000 	.word	0x7ff00000
 800bdcc:	0800e041 	.word	0x0800e041
 800bdd0:	3ff80000 	.word	0x3ff80000
 800bdd4:	0800e230 	.word	0x0800e230
 800bdd8:	0800e174 	.word	0x0800e174
 800bddc:	0800e118 	.word	0x0800e118
 800bde0:	0800e040 	.word	0x0800e040
 800bde4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bde8:	6018      	str	r0, [r3, #0]
 800bdea:	9b03      	ldr	r3, [sp, #12]
 800bdec:	2b0e      	cmp	r3, #14
 800bdee:	f200 80a1 	bhi.w	800bf34 <_dtoa_r+0x444>
 800bdf2:	2c00      	cmp	r4, #0
 800bdf4:	f000 809e 	beq.w	800bf34 <_dtoa_r+0x444>
 800bdf8:	2f00      	cmp	r7, #0
 800bdfa:	dd33      	ble.n	800be64 <_dtoa_r+0x374>
 800bdfc:	4b9c      	ldr	r3, [pc, #624]	@ (800c070 <_dtoa_r+0x580>)
 800bdfe:	f007 020f 	and.w	r2, r7, #15
 800be02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be06:	ed93 7b00 	vldr	d7, [r3]
 800be0a:	05f8      	lsls	r0, r7, #23
 800be0c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800be10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800be14:	d516      	bpl.n	800be44 <_dtoa_r+0x354>
 800be16:	4b97      	ldr	r3, [pc, #604]	@ (800c074 <_dtoa_r+0x584>)
 800be18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be20:	f7f4 fd64 	bl	80008ec <__aeabi_ddiv>
 800be24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be28:	f004 040f 	and.w	r4, r4, #15
 800be2c:	2603      	movs	r6, #3
 800be2e:	4d91      	ldr	r5, [pc, #580]	@ (800c074 <_dtoa_r+0x584>)
 800be30:	b954      	cbnz	r4, 800be48 <_dtoa_r+0x358>
 800be32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be3a:	f7f4 fd57 	bl	80008ec <__aeabi_ddiv>
 800be3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be42:	e028      	b.n	800be96 <_dtoa_r+0x3a6>
 800be44:	2602      	movs	r6, #2
 800be46:	e7f2      	b.n	800be2e <_dtoa_r+0x33e>
 800be48:	07e1      	lsls	r1, r4, #31
 800be4a:	d508      	bpl.n	800be5e <_dtoa_r+0x36e>
 800be4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800be50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be54:	f7f4 fc20 	bl	8000698 <__aeabi_dmul>
 800be58:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be5c:	3601      	adds	r6, #1
 800be5e:	1064      	asrs	r4, r4, #1
 800be60:	3508      	adds	r5, #8
 800be62:	e7e5      	b.n	800be30 <_dtoa_r+0x340>
 800be64:	f000 80af 	beq.w	800bfc6 <_dtoa_r+0x4d6>
 800be68:	427c      	negs	r4, r7
 800be6a:	4b81      	ldr	r3, [pc, #516]	@ (800c070 <_dtoa_r+0x580>)
 800be6c:	4d81      	ldr	r5, [pc, #516]	@ (800c074 <_dtoa_r+0x584>)
 800be6e:	f004 020f 	and.w	r2, r4, #15
 800be72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be7e:	f7f4 fc0b 	bl	8000698 <__aeabi_dmul>
 800be82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be86:	1124      	asrs	r4, r4, #4
 800be88:	2300      	movs	r3, #0
 800be8a:	2602      	movs	r6, #2
 800be8c:	2c00      	cmp	r4, #0
 800be8e:	f040 808f 	bne.w	800bfb0 <_dtoa_r+0x4c0>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1d3      	bne.n	800be3e <_dtoa_r+0x34e>
 800be96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be98:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 8094 	beq.w	800bfca <_dtoa_r+0x4da>
 800bea2:	4b75      	ldr	r3, [pc, #468]	@ (800c078 <_dtoa_r+0x588>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	4620      	mov	r0, r4
 800bea8:	4629      	mov	r1, r5
 800beaa:	f7f4 fe67 	bl	8000b7c <__aeabi_dcmplt>
 800beae:	2800      	cmp	r0, #0
 800beb0:	f000 808b 	beq.w	800bfca <_dtoa_r+0x4da>
 800beb4:	9b03      	ldr	r3, [sp, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 8087 	beq.w	800bfca <_dtoa_r+0x4da>
 800bebc:	f1bb 0f00 	cmp.w	fp, #0
 800bec0:	dd34      	ble.n	800bf2c <_dtoa_r+0x43c>
 800bec2:	4620      	mov	r0, r4
 800bec4:	4b6d      	ldr	r3, [pc, #436]	@ (800c07c <_dtoa_r+0x58c>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	4629      	mov	r1, r5
 800beca:	f7f4 fbe5 	bl	8000698 <__aeabi_dmul>
 800bece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bed2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800bed6:	3601      	adds	r6, #1
 800bed8:	465c      	mov	r4, fp
 800beda:	4630      	mov	r0, r6
 800bedc:	f7f4 fb72 	bl	80005c4 <__aeabi_i2d>
 800bee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bee4:	f7f4 fbd8 	bl	8000698 <__aeabi_dmul>
 800bee8:	4b65      	ldr	r3, [pc, #404]	@ (800c080 <_dtoa_r+0x590>)
 800beea:	2200      	movs	r2, #0
 800beec:	f7f4 fa1e 	bl	800032c <__adddf3>
 800bef0:	4605      	mov	r5, r0
 800bef2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bef6:	2c00      	cmp	r4, #0
 800bef8:	d16a      	bne.n	800bfd0 <_dtoa_r+0x4e0>
 800befa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800befe:	4b61      	ldr	r3, [pc, #388]	@ (800c084 <_dtoa_r+0x594>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	f7f4 fa11 	bl	8000328 <__aeabi_dsub>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf0e:	462a      	mov	r2, r5
 800bf10:	4633      	mov	r3, r6
 800bf12:	f7f4 fe51 	bl	8000bb8 <__aeabi_dcmpgt>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f040 8298 	bne.w	800c44c <_dtoa_r+0x95c>
 800bf1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf20:	462a      	mov	r2, r5
 800bf22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bf26:	f7f4 fe29 	bl	8000b7c <__aeabi_dcmplt>
 800bf2a:	bb38      	cbnz	r0, 800bf7c <_dtoa_r+0x48c>
 800bf2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bf30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f2c0 8157 	blt.w	800c1ea <_dtoa_r+0x6fa>
 800bf3c:	2f0e      	cmp	r7, #14
 800bf3e:	f300 8154 	bgt.w	800c1ea <_dtoa_r+0x6fa>
 800bf42:	4b4b      	ldr	r3, [pc, #300]	@ (800c070 <_dtoa_r+0x580>)
 800bf44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf48:	ed93 7b00 	vldr	d7, [r3]
 800bf4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	ed8d 7b00 	vstr	d7, [sp]
 800bf54:	f280 80e5 	bge.w	800c122 <_dtoa_r+0x632>
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f300 80e1 	bgt.w	800c122 <_dtoa_r+0x632>
 800bf60:	d10c      	bne.n	800bf7c <_dtoa_r+0x48c>
 800bf62:	4b48      	ldr	r3, [pc, #288]	@ (800c084 <_dtoa_r+0x594>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	ec51 0b17 	vmov	r0, r1, d7
 800bf6a:	f7f4 fb95 	bl	8000698 <__aeabi_dmul>
 800bf6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf72:	f7f4 fe17 	bl	8000ba4 <__aeabi_dcmpge>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	f000 8266 	beq.w	800c448 <_dtoa_r+0x958>
 800bf7c:	2400      	movs	r4, #0
 800bf7e:	4625      	mov	r5, r4
 800bf80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf82:	4656      	mov	r6, sl
 800bf84:	ea6f 0803 	mvn.w	r8, r3
 800bf88:	2700      	movs	r7, #0
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4648      	mov	r0, r9
 800bf8e:	f000 fe79 	bl	800cc84 <_Bfree>
 800bf92:	2d00      	cmp	r5, #0
 800bf94:	f000 80bd 	beq.w	800c112 <_dtoa_r+0x622>
 800bf98:	b12f      	cbz	r7, 800bfa6 <_dtoa_r+0x4b6>
 800bf9a:	42af      	cmp	r7, r5
 800bf9c:	d003      	beq.n	800bfa6 <_dtoa_r+0x4b6>
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	4648      	mov	r0, r9
 800bfa2:	f000 fe6f 	bl	800cc84 <_Bfree>
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	4648      	mov	r0, r9
 800bfaa:	f000 fe6b 	bl	800cc84 <_Bfree>
 800bfae:	e0b0      	b.n	800c112 <_dtoa_r+0x622>
 800bfb0:	07e2      	lsls	r2, r4, #31
 800bfb2:	d505      	bpl.n	800bfc0 <_dtoa_r+0x4d0>
 800bfb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfb8:	f7f4 fb6e 	bl	8000698 <__aeabi_dmul>
 800bfbc:	3601      	adds	r6, #1
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	1064      	asrs	r4, r4, #1
 800bfc2:	3508      	adds	r5, #8
 800bfc4:	e762      	b.n	800be8c <_dtoa_r+0x39c>
 800bfc6:	2602      	movs	r6, #2
 800bfc8:	e765      	b.n	800be96 <_dtoa_r+0x3a6>
 800bfca:	9c03      	ldr	r4, [sp, #12]
 800bfcc:	46b8      	mov	r8, r7
 800bfce:	e784      	b.n	800beda <_dtoa_r+0x3ea>
 800bfd0:	4b27      	ldr	r3, [pc, #156]	@ (800c070 <_dtoa_r+0x580>)
 800bfd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bfd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfdc:	4454      	add	r4, sl
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	d054      	beq.n	800c08c <_dtoa_r+0x59c>
 800bfe2:	4929      	ldr	r1, [pc, #164]	@ (800c088 <_dtoa_r+0x598>)
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	f7f4 fc81 	bl	80008ec <__aeabi_ddiv>
 800bfea:	4633      	mov	r3, r6
 800bfec:	462a      	mov	r2, r5
 800bfee:	f7f4 f99b 	bl	8000328 <__aeabi_dsub>
 800bff2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bff6:	4656      	mov	r6, sl
 800bff8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bffc:	f7f4 fdfc 	bl	8000bf8 <__aeabi_d2iz>
 800c000:	4605      	mov	r5, r0
 800c002:	f7f4 fadf 	bl	80005c4 <__aeabi_i2d>
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c00e:	f7f4 f98b 	bl	8000328 <__aeabi_dsub>
 800c012:	3530      	adds	r5, #48	@ 0x30
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c01c:	f806 5b01 	strb.w	r5, [r6], #1
 800c020:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c024:	f7f4 fdaa 	bl	8000b7c <__aeabi_dcmplt>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d172      	bne.n	800c112 <_dtoa_r+0x622>
 800c02c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c030:	4911      	ldr	r1, [pc, #68]	@ (800c078 <_dtoa_r+0x588>)
 800c032:	2000      	movs	r0, #0
 800c034:	f7f4 f978 	bl	8000328 <__aeabi_dsub>
 800c038:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c03c:	f7f4 fd9e 	bl	8000b7c <__aeabi_dcmplt>
 800c040:	2800      	cmp	r0, #0
 800c042:	f040 80b4 	bne.w	800c1ae <_dtoa_r+0x6be>
 800c046:	42a6      	cmp	r6, r4
 800c048:	f43f af70 	beq.w	800bf2c <_dtoa_r+0x43c>
 800c04c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c050:	4b0a      	ldr	r3, [pc, #40]	@ (800c07c <_dtoa_r+0x58c>)
 800c052:	2200      	movs	r2, #0
 800c054:	f7f4 fb20 	bl	8000698 <__aeabi_dmul>
 800c058:	4b08      	ldr	r3, [pc, #32]	@ (800c07c <_dtoa_r+0x58c>)
 800c05a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c05e:	2200      	movs	r2, #0
 800c060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c064:	f7f4 fb18 	bl	8000698 <__aeabi_dmul>
 800c068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c06c:	e7c4      	b.n	800bff8 <_dtoa_r+0x508>
 800c06e:	bf00      	nop
 800c070:	0800e230 	.word	0x0800e230
 800c074:	0800e208 	.word	0x0800e208
 800c078:	3ff00000 	.word	0x3ff00000
 800c07c:	40240000 	.word	0x40240000
 800c080:	401c0000 	.word	0x401c0000
 800c084:	40140000 	.word	0x40140000
 800c088:	3fe00000 	.word	0x3fe00000
 800c08c:	4631      	mov	r1, r6
 800c08e:	4628      	mov	r0, r5
 800c090:	f7f4 fb02 	bl	8000698 <__aeabi_dmul>
 800c094:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c098:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c09a:	4656      	mov	r6, sl
 800c09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0a0:	f7f4 fdaa 	bl	8000bf8 <__aeabi_d2iz>
 800c0a4:	4605      	mov	r5, r0
 800c0a6:	f7f4 fa8d 	bl	80005c4 <__aeabi_i2d>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0b2:	f7f4 f939 	bl	8000328 <__aeabi_dsub>
 800c0b6:	3530      	adds	r5, #48	@ 0x30
 800c0b8:	f806 5b01 	strb.w	r5, [r6], #1
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	42a6      	cmp	r6, r4
 800c0c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0c6:	f04f 0200 	mov.w	r2, #0
 800c0ca:	d124      	bne.n	800c116 <_dtoa_r+0x626>
 800c0cc:	4baf      	ldr	r3, [pc, #700]	@ (800c38c <_dtoa_r+0x89c>)
 800c0ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c0d2:	f7f4 f92b 	bl	800032c <__adddf3>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0de:	f7f4 fd6b 	bl	8000bb8 <__aeabi_dcmpgt>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d163      	bne.n	800c1ae <_dtoa_r+0x6be>
 800c0e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c0ea:	49a8      	ldr	r1, [pc, #672]	@ (800c38c <_dtoa_r+0x89c>)
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	f7f4 f91b 	bl	8000328 <__aeabi_dsub>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0fa:	f7f4 fd3f 	bl	8000b7c <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f43f af14 	beq.w	800bf2c <_dtoa_r+0x43c>
 800c104:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c106:	1e73      	subs	r3, r6, #1
 800c108:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c10a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c10e:	2b30      	cmp	r3, #48	@ 0x30
 800c110:	d0f8      	beq.n	800c104 <_dtoa_r+0x614>
 800c112:	4647      	mov	r7, r8
 800c114:	e03b      	b.n	800c18e <_dtoa_r+0x69e>
 800c116:	4b9e      	ldr	r3, [pc, #632]	@ (800c390 <_dtoa_r+0x8a0>)
 800c118:	f7f4 fabe 	bl	8000698 <__aeabi_dmul>
 800c11c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c120:	e7bc      	b.n	800c09c <_dtoa_r+0x5ac>
 800c122:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c126:	4656      	mov	r6, sl
 800c128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c12c:	4620      	mov	r0, r4
 800c12e:	4629      	mov	r1, r5
 800c130:	f7f4 fbdc 	bl	80008ec <__aeabi_ddiv>
 800c134:	f7f4 fd60 	bl	8000bf8 <__aeabi_d2iz>
 800c138:	4680      	mov	r8, r0
 800c13a:	f7f4 fa43 	bl	80005c4 <__aeabi_i2d>
 800c13e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c142:	f7f4 faa9 	bl	8000698 <__aeabi_dmul>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4620      	mov	r0, r4
 800c14c:	4629      	mov	r1, r5
 800c14e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c152:	f7f4 f8e9 	bl	8000328 <__aeabi_dsub>
 800c156:	f806 4b01 	strb.w	r4, [r6], #1
 800c15a:	9d03      	ldr	r5, [sp, #12]
 800c15c:	eba6 040a 	sub.w	r4, r6, sl
 800c160:	42a5      	cmp	r5, r4
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	d133      	bne.n	800c1d0 <_dtoa_r+0x6e0>
 800c168:	f7f4 f8e0 	bl	800032c <__adddf3>
 800c16c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c170:	4604      	mov	r4, r0
 800c172:	460d      	mov	r5, r1
 800c174:	f7f4 fd20 	bl	8000bb8 <__aeabi_dcmpgt>
 800c178:	b9c0      	cbnz	r0, 800c1ac <_dtoa_r+0x6bc>
 800c17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 fcf1 	bl	8000b68 <__aeabi_dcmpeq>
 800c186:	b110      	cbz	r0, 800c18e <_dtoa_r+0x69e>
 800c188:	f018 0f01 	tst.w	r8, #1
 800c18c:	d10e      	bne.n	800c1ac <_dtoa_r+0x6bc>
 800c18e:	9902      	ldr	r1, [sp, #8]
 800c190:	4648      	mov	r0, r9
 800c192:	f000 fd77 	bl	800cc84 <_Bfree>
 800c196:	2300      	movs	r3, #0
 800c198:	7033      	strb	r3, [r6, #0]
 800c19a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c19c:	3701      	adds	r7, #1
 800c19e:	601f      	str	r7, [r3, #0]
 800c1a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f000 824b 	beq.w	800c63e <_dtoa_r+0xb4e>
 800c1a8:	601e      	str	r6, [r3, #0]
 800c1aa:	e248      	b.n	800c63e <_dtoa_r+0xb4e>
 800c1ac:	46b8      	mov	r8, r7
 800c1ae:	4633      	mov	r3, r6
 800c1b0:	461e      	mov	r6, r3
 800c1b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1b6:	2a39      	cmp	r2, #57	@ 0x39
 800c1b8:	d106      	bne.n	800c1c8 <_dtoa_r+0x6d8>
 800c1ba:	459a      	cmp	sl, r3
 800c1bc:	d1f8      	bne.n	800c1b0 <_dtoa_r+0x6c0>
 800c1be:	2230      	movs	r2, #48	@ 0x30
 800c1c0:	f108 0801 	add.w	r8, r8, #1
 800c1c4:	f88a 2000 	strb.w	r2, [sl]
 800c1c8:	781a      	ldrb	r2, [r3, #0]
 800c1ca:	3201      	adds	r2, #1
 800c1cc:	701a      	strb	r2, [r3, #0]
 800c1ce:	e7a0      	b.n	800c112 <_dtoa_r+0x622>
 800c1d0:	4b6f      	ldr	r3, [pc, #444]	@ (800c390 <_dtoa_r+0x8a0>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7f4 fa60 	bl	8000698 <__aeabi_dmul>
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2300      	movs	r3, #0
 800c1dc:	4604      	mov	r4, r0
 800c1de:	460d      	mov	r5, r1
 800c1e0:	f7f4 fcc2 	bl	8000b68 <__aeabi_dcmpeq>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d09f      	beq.n	800c128 <_dtoa_r+0x638>
 800c1e8:	e7d1      	b.n	800c18e <_dtoa_r+0x69e>
 800c1ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1ec:	2a00      	cmp	r2, #0
 800c1ee:	f000 80ea 	beq.w	800c3c6 <_dtoa_r+0x8d6>
 800c1f2:	9a07      	ldr	r2, [sp, #28]
 800c1f4:	2a01      	cmp	r2, #1
 800c1f6:	f300 80cd 	bgt.w	800c394 <_dtoa_r+0x8a4>
 800c1fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c1fc:	2a00      	cmp	r2, #0
 800c1fe:	f000 80c1 	beq.w	800c384 <_dtoa_r+0x894>
 800c202:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c206:	9c08      	ldr	r4, [sp, #32]
 800c208:	9e00      	ldr	r6, [sp, #0]
 800c20a:	9a00      	ldr	r2, [sp, #0]
 800c20c:	441a      	add	r2, r3
 800c20e:	9200      	str	r2, [sp, #0]
 800c210:	9a06      	ldr	r2, [sp, #24]
 800c212:	2101      	movs	r1, #1
 800c214:	441a      	add	r2, r3
 800c216:	4648      	mov	r0, r9
 800c218:	9206      	str	r2, [sp, #24]
 800c21a:	f000 fde7 	bl	800cdec <__i2b>
 800c21e:	4605      	mov	r5, r0
 800c220:	b166      	cbz	r6, 800c23c <_dtoa_r+0x74c>
 800c222:	9b06      	ldr	r3, [sp, #24]
 800c224:	2b00      	cmp	r3, #0
 800c226:	dd09      	ble.n	800c23c <_dtoa_r+0x74c>
 800c228:	42b3      	cmp	r3, r6
 800c22a:	9a00      	ldr	r2, [sp, #0]
 800c22c:	bfa8      	it	ge
 800c22e:	4633      	movge	r3, r6
 800c230:	1ad2      	subs	r2, r2, r3
 800c232:	9200      	str	r2, [sp, #0]
 800c234:	9a06      	ldr	r2, [sp, #24]
 800c236:	1af6      	subs	r6, r6, r3
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	9306      	str	r3, [sp, #24]
 800c23c:	9b08      	ldr	r3, [sp, #32]
 800c23e:	b30b      	cbz	r3, 800c284 <_dtoa_r+0x794>
 800c240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 80c6 	beq.w	800c3d4 <_dtoa_r+0x8e4>
 800c248:	2c00      	cmp	r4, #0
 800c24a:	f000 80c0 	beq.w	800c3ce <_dtoa_r+0x8de>
 800c24e:	4629      	mov	r1, r5
 800c250:	4622      	mov	r2, r4
 800c252:	4648      	mov	r0, r9
 800c254:	f000 fe82 	bl	800cf5c <__pow5mult>
 800c258:	9a02      	ldr	r2, [sp, #8]
 800c25a:	4601      	mov	r1, r0
 800c25c:	4605      	mov	r5, r0
 800c25e:	4648      	mov	r0, r9
 800c260:	f000 fdda 	bl	800ce18 <__multiply>
 800c264:	9902      	ldr	r1, [sp, #8]
 800c266:	4680      	mov	r8, r0
 800c268:	4648      	mov	r0, r9
 800c26a:	f000 fd0b 	bl	800cc84 <_Bfree>
 800c26e:	9b08      	ldr	r3, [sp, #32]
 800c270:	1b1b      	subs	r3, r3, r4
 800c272:	9308      	str	r3, [sp, #32]
 800c274:	f000 80b1 	beq.w	800c3da <_dtoa_r+0x8ea>
 800c278:	9a08      	ldr	r2, [sp, #32]
 800c27a:	4641      	mov	r1, r8
 800c27c:	4648      	mov	r0, r9
 800c27e:	f000 fe6d 	bl	800cf5c <__pow5mult>
 800c282:	9002      	str	r0, [sp, #8]
 800c284:	2101      	movs	r1, #1
 800c286:	4648      	mov	r0, r9
 800c288:	f000 fdb0 	bl	800cdec <__i2b>
 800c28c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c28e:	4604      	mov	r4, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 81d8 	beq.w	800c646 <_dtoa_r+0xb56>
 800c296:	461a      	mov	r2, r3
 800c298:	4601      	mov	r1, r0
 800c29a:	4648      	mov	r0, r9
 800c29c:	f000 fe5e 	bl	800cf5c <__pow5mult>
 800c2a0:	9b07      	ldr	r3, [sp, #28]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	f300 809f 	bgt.w	800c3e8 <_dtoa_r+0x8f8>
 800c2aa:	9b04      	ldr	r3, [sp, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f040 8097 	bne.w	800c3e0 <_dtoa_r+0x8f0>
 800c2b2:	9b05      	ldr	r3, [sp, #20]
 800c2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f040 8093 	bne.w	800c3e4 <_dtoa_r+0x8f4>
 800c2be:	9b05      	ldr	r3, [sp, #20]
 800c2c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c2c4:	0d1b      	lsrs	r3, r3, #20
 800c2c6:	051b      	lsls	r3, r3, #20
 800c2c8:	b133      	cbz	r3, 800c2d8 <_dtoa_r+0x7e8>
 800c2ca:	9b00      	ldr	r3, [sp, #0]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	9b06      	ldr	r3, [sp, #24]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	9306      	str	r3, [sp, #24]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	9308      	str	r3, [sp, #32]
 800c2da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f000 81b8 	beq.w	800c652 <_dtoa_r+0xb62>
 800c2e2:	6923      	ldr	r3, [r4, #16]
 800c2e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2e8:	6918      	ldr	r0, [r3, #16]
 800c2ea:	f000 fd33 	bl	800cd54 <__hi0bits>
 800c2ee:	f1c0 0020 	rsb	r0, r0, #32
 800c2f2:	9b06      	ldr	r3, [sp, #24]
 800c2f4:	4418      	add	r0, r3
 800c2f6:	f010 001f 	ands.w	r0, r0, #31
 800c2fa:	f000 8082 	beq.w	800c402 <_dtoa_r+0x912>
 800c2fe:	f1c0 0320 	rsb	r3, r0, #32
 800c302:	2b04      	cmp	r3, #4
 800c304:	dd73      	ble.n	800c3ee <_dtoa_r+0x8fe>
 800c306:	9b00      	ldr	r3, [sp, #0]
 800c308:	f1c0 001c 	rsb	r0, r0, #28
 800c30c:	4403      	add	r3, r0
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	9b06      	ldr	r3, [sp, #24]
 800c312:	4403      	add	r3, r0
 800c314:	4406      	add	r6, r0
 800c316:	9306      	str	r3, [sp, #24]
 800c318:	9b00      	ldr	r3, [sp, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	dd05      	ble.n	800c32a <_dtoa_r+0x83a>
 800c31e:	9902      	ldr	r1, [sp, #8]
 800c320:	461a      	mov	r2, r3
 800c322:	4648      	mov	r0, r9
 800c324:	f000 fe74 	bl	800d010 <__lshift>
 800c328:	9002      	str	r0, [sp, #8]
 800c32a:	9b06      	ldr	r3, [sp, #24]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dd05      	ble.n	800c33c <_dtoa_r+0x84c>
 800c330:	4621      	mov	r1, r4
 800c332:	461a      	mov	r2, r3
 800c334:	4648      	mov	r0, r9
 800c336:	f000 fe6b 	bl	800d010 <__lshift>
 800c33a:	4604      	mov	r4, r0
 800c33c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d061      	beq.n	800c406 <_dtoa_r+0x916>
 800c342:	9802      	ldr	r0, [sp, #8]
 800c344:	4621      	mov	r1, r4
 800c346:	f000 fecf 	bl	800d0e8 <__mcmp>
 800c34a:	2800      	cmp	r0, #0
 800c34c:	da5b      	bge.n	800c406 <_dtoa_r+0x916>
 800c34e:	2300      	movs	r3, #0
 800c350:	9902      	ldr	r1, [sp, #8]
 800c352:	220a      	movs	r2, #10
 800c354:	4648      	mov	r0, r9
 800c356:	f000 fcb7 	bl	800ccc8 <__multadd>
 800c35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c35c:	9002      	str	r0, [sp, #8]
 800c35e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c362:	2b00      	cmp	r3, #0
 800c364:	f000 8177 	beq.w	800c656 <_dtoa_r+0xb66>
 800c368:	4629      	mov	r1, r5
 800c36a:	2300      	movs	r3, #0
 800c36c:	220a      	movs	r2, #10
 800c36e:	4648      	mov	r0, r9
 800c370:	f000 fcaa 	bl	800ccc8 <__multadd>
 800c374:	f1bb 0f00 	cmp.w	fp, #0
 800c378:	4605      	mov	r5, r0
 800c37a:	dc6f      	bgt.n	800c45c <_dtoa_r+0x96c>
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	dc49      	bgt.n	800c416 <_dtoa_r+0x926>
 800c382:	e06b      	b.n	800c45c <_dtoa_r+0x96c>
 800c384:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c386:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c38a:	e73c      	b.n	800c206 <_dtoa_r+0x716>
 800c38c:	3fe00000 	.word	0x3fe00000
 800c390:	40240000 	.word	0x40240000
 800c394:	9b03      	ldr	r3, [sp, #12]
 800c396:	1e5c      	subs	r4, r3, #1
 800c398:	9b08      	ldr	r3, [sp, #32]
 800c39a:	42a3      	cmp	r3, r4
 800c39c:	db09      	blt.n	800c3b2 <_dtoa_r+0x8c2>
 800c39e:	1b1c      	subs	r4, r3, r4
 800c3a0:	9b03      	ldr	r3, [sp, #12]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f6bf af30 	bge.w	800c208 <_dtoa_r+0x718>
 800c3a8:	9b00      	ldr	r3, [sp, #0]
 800c3aa:	9a03      	ldr	r2, [sp, #12]
 800c3ac:	1a9e      	subs	r6, r3, r2
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e72b      	b.n	800c20a <_dtoa_r+0x71a>
 800c3b2:	9b08      	ldr	r3, [sp, #32]
 800c3b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c3b6:	9408      	str	r4, [sp, #32]
 800c3b8:	1ae3      	subs	r3, r4, r3
 800c3ba:	441a      	add	r2, r3
 800c3bc:	9e00      	ldr	r6, [sp, #0]
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c3c2:	2400      	movs	r4, #0
 800c3c4:	e721      	b.n	800c20a <_dtoa_r+0x71a>
 800c3c6:	9c08      	ldr	r4, [sp, #32]
 800c3c8:	9e00      	ldr	r6, [sp, #0]
 800c3ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c3cc:	e728      	b.n	800c220 <_dtoa_r+0x730>
 800c3ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c3d2:	e751      	b.n	800c278 <_dtoa_r+0x788>
 800c3d4:	9a08      	ldr	r2, [sp, #32]
 800c3d6:	9902      	ldr	r1, [sp, #8]
 800c3d8:	e750      	b.n	800c27c <_dtoa_r+0x78c>
 800c3da:	f8cd 8008 	str.w	r8, [sp, #8]
 800c3de:	e751      	b.n	800c284 <_dtoa_r+0x794>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e779      	b.n	800c2d8 <_dtoa_r+0x7e8>
 800c3e4:	9b04      	ldr	r3, [sp, #16]
 800c3e6:	e777      	b.n	800c2d8 <_dtoa_r+0x7e8>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	9308      	str	r3, [sp, #32]
 800c3ec:	e779      	b.n	800c2e2 <_dtoa_r+0x7f2>
 800c3ee:	d093      	beq.n	800c318 <_dtoa_r+0x828>
 800c3f0:	9a00      	ldr	r2, [sp, #0]
 800c3f2:	331c      	adds	r3, #28
 800c3f4:	441a      	add	r2, r3
 800c3f6:	9200      	str	r2, [sp, #0]
 800c3f8:	9a06      	ldr	r2, [sp, #24]
 800c3fa:	441a      	add	r2, r3
 800c3fc:	441e      	add	r6, r3
 800c3fe:	9206      	str	r2, [sp, #24]
 800c400:	e78a      	b.n	800c318 <_dtoa_r+0x828>
 800c402:	4603      	mov	r3, r0
 800c404:	e7f4      	b.n	800c3f0 <_dtoa_r+0x900>
 800c406:	9b03      	ldr	r3, [sp, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	46b8      	mov	r8, r7
 800c40c:	dc20      	bgt.n	800c450 <_dtoa_r+0x960>
 800c40e:	469b      	mov	fp, r3
 800c410:	9b07      	ldr	r3, [sp, #28]
 800c412:	2b02      	cmp	r3, #2
 800c414:	dd1e      	ble.n	800c454 <_dtoa_r+0x964>
 800c416:	f1bb 0f00 	cmp.w	fp, #0
 800c41a:	f47f adb1 	bne.w	800bf80 <_dtoa_r+0x490>
 800c41e:	4621      	mov	r1, r4
 800c420:	465b      	mov	r3, fp
 800c422:	2205      	movs	r2, #5
 800c424:	4648      	mov	r0, r9
 800c426:	f000 fc4f 	bl	800ccc8 <__multadd>
 800c42a:	4601      	mov	r1, r0
 800c42c:	4604      	mov	r4, r0
 800c42e:	9802      	ldr	r0, [sp, #8]
 800c430:	f000 fe5a 	bl	800d0e8 <__mcmp>
 800c434:	2800      	cmp	r0, #0
 800c436:	f77f ada3 	ble.w	800bf80 <_dtoa_r+0x490>
 800c43a:	4656      	mov	r6, sl
 800c43c:	2331      	movs	r3, #49	@ 0x31
 800c43e:	f806 3b01 	strb.w	r3, [r6], #1
 800c442:	f108 0801 	add.w	r8, r8, #1
 800c446:	e59f      	b.n	800bf88 <_dtoa_r+0x498>
 800c448:	9c03      	ldr	r4, [sp, #12]
 800c44a:	46b8      	mov	r8, r7
 800c44c:	4625      	mov	r5, r4
 800c44e:	e7f4      	b.n	800c43a <_dtoa_r+0x94a>
 800c450:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c456:	2b00      	cmp	r3, #0
 800c458:	f000 8101 	beq.w	800c65e <_dtoa_r+0xb6e>
 800c45c:	2e00      	cmp	r6, #0
 800c45e:	dd05      	ble.n	800c46c <_dtoa_r+0x97c>
 800c460:	4629      	mov	r1, r5
 800c462:	4632      	mov	r2, r6
 800c464:	4648      	mov	r0, r9
 800c466:	f000 fdd3 	bl	800d010 <__lshift>
 800c46a:	4605      	mov	r5, r0
 800c46c:	9b08      	ldr	r3, [sp, #32]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d05c      	beq.n	800c52c <_dtoa_r+0xa3c>
 800c472:	6869      	ldr	r1, [r5, #4]
 800c474:	4648      	mov	r0, r9
 800c476:	f000 fbc5 	bl	800cc04 <_Balloc>
 800c47a:	4606      	mov	r6, r0
 800c47c:	b928      	cbnz	r0, 800c48a <_dtoa_r+0x99a>
 800c47e:	4b82      	ldr	r3, [pc, #520]	@ (800c688 <_dtoa_r+0xb98>)
 800c480:	4602      	mov	r2, r0
 800c482:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c486:	f7ff bb4a 	b.w	800bb1e <_dtoa_r+0x2e>
 800c48a:	692a      	ldr	r2, [r5, #16]
 800c48c:	3202      	adds	r2, #2
 800c48e:	0092      	lsls	r2, r2, #2
 800c490:	f105 010c 	add.w	r1, r5, #12
 800c494:	300c      	adds	r0, #12
 800c496:	f7ff fa75 	bl	800b984 <memcpy>
 800c49a:	2201      	movs	r2, #1
 800c49c:	4631      	mov	r1, r6
 800c49e:	4648      	mov	r0, r9
 800c4a0:	f000 fdb6 	bl	800d010 <__lshift>
 800c4a4:	f10a 0301 	add.w	r3, sl, #1
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	eb0a 030b 	add.w	r3, sl, fp
 800c4ae:	9308      	str	r3, [sp, #32]
 800c4b0:	9b04      	ldr	r3, [sp, #16]
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	462f      	mov	r7, r5
 800c4b8:	9306      	str	r3, [sp, #24]
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	9b00      	ldr	r3, [sp, #0]
 800c4be:	9802      	ldr	r0, [sp, #8]
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c4c6:	f7ff fa89 	bl	800b9dc <quorem>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	3330      	adds	r3, #48	@ 0x30
 800c4ce:	9003      	str	r0, [sp, #12]
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	9802      	ldr	r0, [sp, #8]
 800c4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4d6:	f000 fe07 	bl	800d0e8 <__mcmp>
 800c4da:	462a      	mov	r2, r5
 800c4dc:	9004      	str	r0, [sp, #16]
 800c4de:	4621      	mov	r1, r4
 800c4e0:	4648      	mov	r0, r9
 800c4e2:	f000 fe1d 	bl	800d120 <__mdiff>
 800c4e6:	68c2      	ldr	r2, [r0, #12]
 800c4e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ea:	4606      	mov	r6, r0
 800c4ec:	bb02      	cbnz	r2, 800c530 <_dtoa_r+0xa40>
 800c4ee:	4601      	mov	r1, r0
 800c4f0:	9802      	ldr	r0, [sp, #8]
 800c4f2:	f000 fdf9 	bl	800d0e8 <__mcmp>
 800c4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	4648      	mov	r0, r9
 800c4fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800c500:	9309      	str	r3, [sp, #36]	@ 0x24
 800c502:	f000 fbbf 	bl	800cc84 <_Bfree>
 800c506:	9b07      	ldr	r3, [sp, #28]
 800c508:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c50a:	9e00      	ldr	r6, [sp, #0]
 800c50c:	ea42 0103 	orr.w	r1, r2, r3
 800c510:	9b06      	ldr	r3, [sp, #24]
 800c512:	4319      	orrs	r1, r3
 800c514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c516:	d10d      	bne.n	800c534 <_dtoa_r+0xa44>
 800c518:	2b39      	cmp	r3, #57	@ 0x39
 800c51a:	d027      	beq.n	800c56c <_dtoa_r+0xa7c>
 800c51c:	9a04      	ldr	r2, [sp, #16]
 800c51e:	2a00      	cmp	r2, #0
 800c520:	dd01      	ble.n	800c526 <_dtoa_r+0xa36>
 800c522:	9b03      	ldr	r3, [sp, #12]
 800c524:	3331      	adds	r3, #49	@ 0x31
 800c526:	f88b 3000 	strb.w	r3, [fp]
 800c52a:	e52e      	b.n	800bf8a <_dtoa_r+0x49a>
 800c52c:	4628      	mov	r0, r5
 800c52e:	e7b9      	b.n	800c4a4 <_dtoa_r+0x9b4>
 800c530:	2201      	movs	r2, #1
 800c532:	e7e2      	b.n	800c4fa <_dtoa_r+0xa0a>
 800c534:	9904      	ldr	r1, [sp, #16]
 800c536:	2900      	cmp	r1, #0
 800c538:	db04      	blt.n	800c544 <_dtoa_r+0xa54>
 800c53a:	9807      	ldr	r0, [sp, #28]
 800c53c:	4301      	orrs	r1, r0
 800c53e:	9806      	ldr	r0, [sp, #24]
 800c540:	4301      	orrs	r1, r0
 800c542:	d120      	bne.n	800c586 <_dtoa_r+0xa96>
 800c544:	2a00      	cmp	r2, #0
 800c546:	ddee      	ble.n	800c526 <_dtoa_r+0xa36>
 800c548:	9902      	ldr	r1, [sp, #8]
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	2201      	movs	r2, #1
 800c54e:	4648      	mov	r0, r9
 800c550:	f000 fd5e 	bl	800d010 <__lshift>
 800c554:	4621      	mov	r1, r4
 800c556:	9002      	str	r0, [sp, #8]
 800c558:	f000 fdc6 	bl	800d0e8 <__mcmp>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	9b00      	ldr	r3, [sp, #0]
 800c560:	dc02      	bgt.n	800c568 <_dtoa_r+0xa78>
 800c562:	d1e0      	bne.n	800c526 <_dtoa_r+0xa36>
 800c564:	07da      	lsls	r2, r3, #31
 800c566:	d5de      	bpl.n	800c526 <_dtoa_r+0xa36>
 800c568:	2b39      	cmp	r3, #57	@ 0x39
 800c56a:	d1da      	bne.n	800c522 <_dtoa_r+0xa32>
 800c56c:	2339      	movs	r3, #57	@ 0x39
 800c56e:	f88b 3000 	strb.w	r3, [fp]
 800c572:	4633      	mov	r3, r6
 800c574:	461e      	mov	r6, r3
 800c576:	3b01      	subs	r3, #1
 800c578:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c57c:	2a39      	cmp	r2, #57	@ 0x39
 800c57e:	d04e      	beq.n	800c61e <_dtoa_r+0xb2e>
 800c580:	3201      	adds	r2, #1
 800c582:	701a      	strb	r2, [r3, #0]
 800c584:	e501      	b.n	800bf8a <_dtoa_r+0x49a>
 800c586:	2a00      	cmp	r2, #0
 800c588:	dd03      	ble.n	800c592 <_dtoa_r+0xaa2>
 800c58a:	2b39      	cmp	r3, #57	@ 0x39
 800c58c:	d0ee      	beq.n	800c56c <_dtoa_r+0xa7c>
 800c58e:	3301      	adds	r3, #1
 800c590:	e7c9      	b.n	800c526 <_dtoa_r+0xa36>
 800c592:	9a00      	ldr	r2, [sp, #0]
 800c594:	9908      	ldr	r1, [sp, #32]
 800c596:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c59a:	428a      	cmp	r2, r1
 800c59c:	d028      	beq.n	800c5f0 <_dtoa_r+0xb00>
 800c59e:	9902      	ldr	r1, [sp, #8]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	220a      	movs	r2, #10
 800c5a4:	4648      	mov	r0, r9
 800c5a6:	f000 fb8f 	bl	800ccc8 <__multadd>
 800c5aa:	42af      	cmp	r7, r5
 800c5ac:	9002      	str	r0, [sp, #8]
 800c5ae:	f04f 0300 	mov.w	r3, #0
 800c5b2:	f04f 020a 	mov.w	r2, #10
 800c5b6:	4639      	mov	r1, r7
 800c5b8:	4648      	mov	r0, r9
 800c5ba:	d107      	bne.n	800c5cc <_dtoa_r+0xadc>
 800c5bc:	f000 fb84 	bl	800ccc8 <__multadd>
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	4605      	mov	r5, r0
 800c5c4:	9b00      	ldr	r3, [sp, #0]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	e777      	b.n	800c4bc <_dtoa_r+0x9cc>
 800c5cc:	f000 fb7c 	bl	800ccc8 <__multadd>
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	4607      	mov	r7, r0
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	220a      	movs	r2, #10
 800c5d8:	4648      	mov	r0, r9
 800c5da:	f000 fb75 	bl	800ccc8 <__multadd>
 800c5de:	4605      	mov	r5, r0
 800c5e0:	e7f0      	b.n	800c5c4 <_dtoa_r+0xad4>
 800c5e2:	f1bb 0f00 	cmp.w	fp, #0
 800c5e6:	bfcc      	ite	gt
 800c5e8:	465e      	movgt	r6, fp
 800c5ea:	2601      	movle	r6, #1
 800c5ec:	4456      	add	r6, sl
 800c5ee:	2700      	movs	r7, #0
 800c5f0:	9902      	ldr	r1, [sp, #8]
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	4648      	mov	r0, r9
 800c5f8:	f000 fd0a 	bl	800d010 <__lshift>
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	9002      	str	r0, [sp, #8]
 800c600:	f000 fd72 	bl	800d0e8 <__mcmp>
 800c604:	2800      	cmp	r0, #0
 800c606:	dcb4      	bgt.n	800c572 <_dtoa_r+0xa82>
 800c608:	d102      	bne.n	800c610 <_dtoa_r+0xb20>
 800c60a:	9b00      	ldr	r3, [sp, #0]
 800c60c:	07db      	lsls	r3, r3, #31
 800c60e:	d4b0      	bmi.n	800c572 <_dtoa_r+0xa82>
 800c610:	4633      	mov	r3, r6
 800c612:	461e      	mov	r6, r3
 800c614:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c618:	2a30      	cmp	r2, #48	@ 0x30
 800c61a:	d0fa      	beq.n	800c612 <_dtoa_r+0xb22>
 800c61c:	e4b5      	b.n	800bf8a <_dtoa_r+0x49a>
 800c61e:	459a      	cmp	sl, r3
 800c620:	d1a8      	bne.n	800c574 <_dtoa_r+0xa84>
 800c622:	2331      	movs	r3, #49	@ 0x31
 800c624:	f108 0801 	add.w	r8, r8, #1
 800c628:	f88a 3000 	strb.w	r3, [sl]
 800c62c:	e4ad      	b.n	800bf8a <_dtoa_r+0x49a>
 800c62e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c630:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c68c <_dtoa_r+0xb9c>
 800c634:	b11b      	cbz	r3, 800c63e <_dtoa_r+0xb4e>
 800c636:	f10a 0308 	add.w	r3, sl, #8
 800c63a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c63c:	6013      	str	r3, [r2, #0]
 800c63e:	4650      	mov	r0, sl
 800c640:	b017      	add	sp, #92	@ 0x5c
 800c642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c646:	9b07      	ldr	r3, [sp, #28]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	f77f ae2e 	ble.w	800c2aa <_dtoa_r+0x7ba>
 800c64e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c650:	9308      	str	r3, [sp, #32]
 800c652:	2001      	movs	r0, #1
 800c654:	e64d      	b.n	800c2f2 <_dtoa_r+0x802>
 800c656:	f1bb 0f00 	cmp.w	fp, #0
 800c65a:	f77f aed9 	ble.w	800c410 <_dtoa_r+0x920>
 800c65e:	4656      	mov	r6, sl
 800c660:	9802      	ldr	r0, [sp, #8]
 800c662:	4621      	mov	r1, r4
 800c664:	f7ff f9ba 	bl	800b9dc <quorem>
 800c668:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c66c:	f806 3b01 	strb.w	r3, [r6], #1
 800c670:	eba6 020a 	sub.w	r2, r6, sl
 800c674:	4593      	cmp	fp, r2
 800c676:	ddb4      	ble.n	800c5e2 <_dtoa_r+0xaf2>
 800c678:	9902      	ldr	r1, [sp, #8]
 800c67a:	2300      	movs	r3, #0
 800c67c:	220a      	movs	r2, #10
 800c67e:	4648      	mov	r0, r9
 800c680:	f000 fb22 	bl	800ccc8 <__multadd>
 800c684:	9002      	str	r0, [sp, #8]
 800c686:	e7eb      	b.n	800c660 <_dtoa_r+0xb70>
 800c688:	0800e174 	.word	0x0800e174
 800c68c:	0800e10f 	.word	0x0800e10f

0800c690 <__ssputs_r>:
 800c690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c694:	688e      	ldr	r6, [r1, #8]
 800c696:	461f      	mov	r7, r3
 800c698:	42be      	cmp	r6, r7
 800c69a:	680b      	ldr	r3, [r1, #0]
 800c69c:	4682      	mov	sl, r0
 800c69e:	460c      	mov	r4, r1
 800c6a0:	4690      	mov	r8, r2
 800c6a2:	d82d      	bhi.n	800c700 <__ssputs_r+0x70>
 800c6a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c6ac:	d026      	beq.n	800c6fc <__ssputs_r+0x6c>
 800c6ae:	6965      	ldr	r5, [r4, #20]
 800c6b0:	6909      	ldr	r1, [r1, #16]
 800c6b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6b6:	eba3 0901 	sub.w	r9, r3, r1
 800c6ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6be:	1c7b      	adds	r3, r7, #1
 800c6c0:	444b      	add	r3, r9
 800c6c2:	106d      	asrs	r5, r5, #1
 800c6c4:	429d      	cmp	r5, r3
 800c6c6:	bf38      	it	cc
 800c6c8:	461d      	movcc	r5, r3
 800c6ca:	0553      	lsls	r3, r2, #21
 800c6cc:	d527      	bpl.n	800c71e <__ssputs_r+0x8e>
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	f000 f960 	bl	800c994 <_malloc_r>
 800c6d4:	4606      	mov	r6, r0
 800c6d6:	b360      	cbz	r0, 800c732 <__ssputs_r+0xa2>
 800c6d8:	6921      	ldr	r1, [r4, #16]
 800c6da:	464a      	mov	r2, r9
 800c6dc:	f7ff f952 	bl	800b984 <memcpy>
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ea:	81a3      	strh	r3, [r4, #12]
 800c6ec:	6126      	str	r6, [r4, #16]
 800c6ee:	6165      	str	r5, [r4, #20]
 800c6f0:	444e      	add	r6, r9
 800c6f2:	eba5 0509 	sub.w	r5, r5, r9
 800c6f6:	6026      	str	r6, [r4, #0]
 800c6f8:	60a5      	str	r5, [r4, #8]
 800c6fa:	463e      	mov	r6, r7
 800c6fc:	42be      	cmp	r6, r7
 800c6fe:	d900      	bls.n	800c702 <__ssputs_r+0x72>
 800c700:	463e      	mov	r6, r7
 800c702:	6820      	ldr	r0, [r4, #0]
 800c704:	4632      	mov	r2, r6
 800c706:	4641      	mov	r1, r8
 800c708:	f000 fe7a 	bl	800d400 <memmove>
 800c70c:	68a3      	ldr	r3, [r4, #8]
 800c70e:	1b9b      	subs	r3, r3, r6
 800c710:	60a3      	str	r3, [r4, #8]
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	4433      	add	r3, r6
 800c716:	6023      	str	r3, [r4, #0]
 800c718:	2000      	movs	r0, #0
 800c71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71e:	462a      	mov	r2, r5
 800c720:	f000 fe40 	bl	800d3a4 <_realloc_r>
 800c724:	4606      	mov	r6, r0
 800c726:	2800      	cmp	r0, #0
 800c728:	d1e0      	bne.n	800c6ec <__ssputs_r+0x5c>
 800c72a:	6921      	ldr	r1, [r4, #16]
 800c72c:	4650      	mov	r0, sl
 800c72e:	f000 fee1 	bl	800d4f4 <_free_r>
 800c732:	230c      	movs	r3, #12
 800c734:	f8ca 3000 	str.w	r3, [sl]
 800c738:	89a3      	ldrh	r3, [r4, #12]
 800c73a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c73e:	81a3      	strh	r3, [r4, #12]
 800c740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c744:	e7e9      	b.n	800c71a <__ssputs_r+0x8a>
	...

0800c748 <_svfiprintf_r>:
 800c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	4698      	mov	r8, r3
 800c74e:	898b      	ldrh	r3, [r1, #12]
 800c750:	061b      	lsls	r3, r3, #24
 800c752:	b09d      	sub	sp, #116	@ 0x74
 800c754:	4607      	mov	r7, r0
 800c756:	460d      	mov	r5, r1
 800c758:	4614      	mov	r4, r2
 800c75a:	d510      	bpl.n	800c77e <_svfiprintf_r+0x36>
 800c75c:	690b      	ldr	r3, [r1, #16]
 800c75e:	b973      	cbnz	r3, 800c77e <_svfiprintf_r+0x36>
 800c760:	2140      	movs	r1, #64	@ 0x40
 800c762:	f000 f917 	bl	800c994 <_malloc_r>
 800c766:	6028      	str	r0, [r5, #0]
 800c768:	6128      	str	r0, [r5, #16]
 800c76a:	b930      	cbnz	r0, 800c77a <_svfiprintf_r+0x32>
 800c76c:	230c      	movs	r3, #12
 800c76e:	603b      	str	r3, [r7, #0]
 800c770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c774:	b01d      	add	sp, #116	@ 0x74
 800c776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77a:	2340      	movs	r3, #64	@ 0x40
 800c77c:	616b      	str	r3, [r5, #20]
 800c77e:	2300      	movs	r3, #0
 800c780:	9309      	str	r3, [sp, #36]	@ 0x24
 800c782:	2320      	movs	r3, #32
 800c784:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c788:	f8cd 800c 	str.w	r8, [sp, #12]
 800c78c:	2330      	movs	r3, #48	@ 0x30
 800c78e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c92c <_svfiprintf_r+0x1e4>
 800c792:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c796:	f04f 0901 	mov.w	r9, #1
 800c79a:	4623      	mov	r3, r4
 800c79c:	469a      	mov	sl, r3
 800c79e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7a2:	b10a      	cbz	r2, 800c7a8 <_svfiprintf_r+0x60>
 800c7a4:	2a25      	cmp	r2, #37	@ 0x25
 800c7a6:	d1f9      	bne.n	800c79c <_svfiprintf_r+0x54>
 800c7a8:	ebba 0b04 	subs.w	fp, sl, r4
 800c7ac:	d00b      	beq.n	800c7c6 <_svfiprintf_r+0x7e>
 800c7ae:	465b      	mov	r3, fp
 800c7b0:	4622      	mov	r2, r4
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7ff ff6b 	bl	800c690 <__ssputs_r>
 800c7ba:	3001      	adds	r0, #1
 800c7bc:	f000 80a7 	beq.w	800c90e <_svfiprintf_r+0x1c6>
 800c7c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7c2:	445a      	add	r2, fp
 800c7c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 809f 	beq.w	800c90e <_svfiprintf_r+0x1c6>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7da:	f10a 0a01 	add.w	sl, sl, #1
 800c7de:	9304      	str	r3, [sp, #16]
 800c7e0:	9307      	str	r3, [sp, #28]
 800c7e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7e8:	4654      	mov	r4, sl
 800c7ea:	2205      	movs	r2, #5
 800c7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f0:	484e      	ldr	r0, [pc, #312]	@ (800c92c <_svfiprintf_r+0x1e4>)
 800c7f2:	f7f3 fd3d 	bl	8000270 <memchr>
 800c7f6:	9a04      	ldr	r2, [sp, #16]
 800c7f8:	b9d8      	cbnz	r0, 800c832 <_svfiprintf_r+0xea>
 800c7fa:	06d0      	lsls	r0, r2, #27
 800c7fc:	bf44      	itt	mi
 800c7fe:	2320      	movmi	r3, #32
 800c800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c804:	0711      	lsls	r1, r2, #28
 800c806:	bf44      	itt	mi
 800c808:	232b      	movmi	r3, #43	@ 0x2b
 800c80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c80e:	f89a 3000 	ldrb.w	r3, [sl]
 800c812:	2b2a      	cmp	r3, #42	@ 0x2a
 800c814:	d015      	beq.n	800c842 <_svfiprintf_r+0xfa>
 800c816:	9a07      	ldr	r2, [sp, #28]
 800c818:	4654      	mov	r4, sl
 800c81a:	2000      	movs	r0, #0
 800c81c:	f04f 0c0a 	mov.w	ip, #10
 800c820:	4621      	mov	r1, r4
 800c822:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c826:	3b30      	subs	r3, #48	@ 0x30
 800c828:	2b09      	cmp	r3, #9
 800c82a:	d94b      	bls.n	800c8c4 <_svfiprintf_r+0x17c>
 800c82c:	b1b0      	cbz	r0, 800c85c <_svfiprintf_r+0x114>
 800c82e:	9207      	str	r2, [sp, #28]
 800c830:	e014      	b.n	800c85c <_svfiprintf_r+0x114>
 800c832:	eba0 0308 	sub.w	r3, r0, r8
 800c836:	fa09 f303 	lsl.w	r3, r9, r3
 800c83a:	4313      	orrs	r3, r2
 800c83c:	9304      	str	r3, [sp, #16]
 800c83e:	46a2      	mov	sl, r4
 800c840:	e7d2      	b.n	800c7e8 <_svfiprintf_r+0xa0>
 800c842:	9b03      	ldr	r3, [sp, #12]
 800c844:	1d19      	adds	r1, r3, #4
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	9103      	str	r1, [sp, #12]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	bfbb      	ittet	lt
 800c84e:	425b      	neglt	r3, r3
 800c850:	f042 0202 	orrlt.w	r2, r2, #2
 800c854:	9307      	strge	r3, [sp, #28]
 800c856:	9307      	strlt	r3, [sp, #28]
 800c858:	bfb8      	it	lt
 800c85a:	9204      	strlt	r2, [sp, #16]
 800c85c:	7823      	ldrb	r3, [r4, #0]
 800c85e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c860:	d10a      	bne.n	800c878 <_svfiprintf_r+0x130>
 800c862:	7863      	ldrb	r3, [r4, #1]
 800c864:	2b2a      	cmp	r3, #42	@ 0x2a
 800c866:	d132      	bne.n	800c8ce <_svfiprintf_r+0x186>
 800c868:	9b03      	ldr	r3, [sp, #12]
 800c86a:	1d1a      	adds	r2, r3, #4
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	9203      	str	r2, [sp, #12]
 800c870:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c874:	3402      	adds	r4, #2
 800c876:	9305      	str	r3, [sp, #20]
 800c878:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c93c <_svfiprintf_r+0x1f4>
 800c87c:	7821      	ldrb	r1, [r4, #0]
 800c87e:	2203      	movs	r2, #3
 800c880:	4650      	mov	r0, sl
 800c882:	f7f3 fcf5 	bl	8000270 <memchr>
 800c886:	b138      	cbz	r0, 800c898 <_svfiprintf_r+0x150>
 800c888:	9b04      	ldr	r3, [sp, #16]
 800c88a:	eba0 000a 	sub.w	r0, r0, sl
 800c88e:	2240      	movs	r2, #64	@ 0x40
 800c890:	4082      	lsls	r2, r0
 800c892:	4313      	orrs	r3, r2
 800c894:	3401      	adds	r4, #1
 800c896:	9304      	str	r3, [sp, #16]
 800c898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89c:	4824      	ldr	r0, [pc, #144]	@ (800c930 <_svfiprintf_r+0x1e8>)
 800c89e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8a2:	2206      	movs	r2, #6
 800c8a4:	f7f3 fce4 	bl	8000270 <memchr>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d036      	beq.n	800c91a <_svfiprintf_r+0x1d2>
 800c8ac:	4b21      	ldr	r3, [pc, #132]	@ (800c934 <_svfiprintf_r+0x1ec>)
 800c8ae:	bb1b      	cbnz	r3, 800c8f8 <_svfiprintf_r+0x1b0>
 800c8b0:	9b03      	ldr	r3, [sp, #12]
 800c8b2:	3307      	adds	r3, #7
 800c8b4:	f023 0307 	bic.w	r3, r3, #7
 800c8b8:	3308      	adds	r3, #8
 800c8ba:	9303      	str	r3, [sp, #12]
 800c8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8be:	4433      	add	r3, r6
 800c8c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8c2:	e76a      	b.n	800c79a <_svfiprintf_r+0x52>
 800c8c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	2001      	movs	r0, #1
 800c8cc:	e7a8      	b.n	800c820 <_svfiprintf_r+0xd8>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	3401      	adds	r4, #1
 800c8d2:	9305      	str	r3, [sp, #20]
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	f04f 0c0a 	mov.w	ip, #10
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8e0:	3a30      	subs	r2, #48	@ 0x30
 800c8e2:	2a09      	cmp	r2, #9
 800c8e4:	d903      	bls.n	800c8ee <_svfiprintf_r+0x1a6>
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d0c6      	beq.n	800c878 <_svfiprintf_r+0x130>
 800c8ea:	9105      	str	r1, [sp, #20]
 800c8ec:	e7c4      	b.n	800c878 <_svfiprintf_r+0x130>
 800c8ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e7f0      	b.n	800c8da <_svfiprintf_r+0x192>
 800c8f8:	ab03      	add	r3, sp, #12
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	462a      	mov	r2, r5
 800c8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c938 <_svfiprintf_r+0x1f0>)
 800c900:	a904      	add	r1, sp, #16
 800c902:	4638      	mov	r0, r7
 800c904:	f7fe fb1e 	bl	800af44 <_printf_float>
 800c908:	1c42      	adds	r2, r0, #1
 800c90a:	4606      	mov	r6, r0
 800c90c:	d1d6      	bne.n	800c8bc <_svfiprintf_r+0x174>
 800c90e:	89ab      	ldrh	r3, [r5, #12]
 800c910:	065b      	lsls	r3, r3, #25
 800c912:	f53f af2d 	bmi.w	800c770 <_svfiprintf_r+0x28>
 800c916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c918:	e72c      	b.n	800c774 <_svfiprintf_r+0x2c>
 800c91a:	ab03      	add	r3, sp, #12
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	462a      	mov	r2, r5
 800c920:	4b05      	ldr	r3, [pc, #20]	@ (800c938 <_svfiprintf_r+0x1f0>)
 800c922:	a904      	add	r1, sp, #16
 800c924:	4638      	mov	r0, r7
 800c926:	f7fe fda5 	bl	800b474 <_printf_i>
 800c92a:	e7ed      	b.n	800c908 <_svfiprintf_r+0x1c0>
 800c92c:	0800e185 	.word	0x0800e185
 800c930:	0800e18f 	.word	0x0800e18f
 800c934:	0800af45 	.word	0x0800af45
 800c938:	0800c691 	.word	0x0800c691
 800c93c:	0800e18b 	.word	0x0800e18b

0800c940 <malloc>:
 800c940:	4b02      	ldr	r3, [pc, #8]	@ (800c94c <malloc+0xc>)
 800c942:	4601      	mov	r1, r0
 800c944:	6818      	ldr	r0, [r3, #0]
 800c946:	f000 b825 	b.w	800c994 <_malloc_r>
 800c94a:	bf00      	nop
 800c94c:	20000024 	.word	0x20000024

0800c950 <sbrk_aligned>:
 800c950:	b570      	push	{r4, r5, r6, lr}
 800c952:	4e0f      	ldr	r6, [pc, #60]	@ (800c990 <sbrk_aligned+0x40>)
 800c954:	460c      	mov	r4, r1
 800c956:	6831      	ldr	r1, [r6, #0]
 800c958:	4605      	mov	r5, r0
 800c95a:	b911      	cbnz	r1, 800c962 <sbrk_aligned+0x12>
 800c95c:	f000 fd8e 	bl	800d47c <_sbrk_r>
 800c960:	6030      	str	r0, [r6, #0]
 800c962:	4621      	mov	r1, r4
 800c964:	4628      	mov	r0, r5
 800c966:	f000 fd89 	bl	800d47c <_sbrk_r>
 800c96a:	1c43      	adds	r3, r0, #1
 800c96c:	d103      	bne.n	800c976 <sbrk_aligned+0x26>
 800c96e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c972:	4620      	mov	r0, r4
 800c974:	bd70      	pop	{r4, r5, r6, pc}
 800c976:	1cc4      	adds	r4, r0, #3
 800c978:	f024 0403 	bic.w	r4, r4, #3
 800c97c:	42a0      	cmp	r0, r4
 800c97e:	d0f8      	beq.n	800c972 <sbrk_aligned+0x22>
 800c980:	1a21      	subs	r1, r4, r0
 800c982:	4628      	mov	r0, r5
 800c984:	f000 fd7a 	bl	800d47c <_sbrk_r>
 800c988:	3001      	adds	r0, #1
 800c98a:	d1f2      	bne.n	800c972 <sbrk_aligned+0x22>
 800c98c:	e7ef      	b.n	800c96e <sbrk_aligned+0x1e>
 800c98e:	bf00      	nop
 800c990:	20017538 	.word	0x20017538

0800c994 <_malloc_r>:
 800c994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c998:	1ccd      	adds	r5, r1, #3
 800c99a:	f025 0503 	bic.w	r5, r5, #3
 800c99e:	3508      	adds	r5, #8
 800c9a0:	2d0c      	cmp	r5, #12
 800c9a2:	bf38      	it	cc
 800c9a4:	250c      	movcc	r5, #12
 800c9a6:	2d00      	cmp	r5, #0
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	db01      	blt.n	800c9b0 <_malloc_r+0x1c>
 800c9ac:	42a9      	cmp	r1, r5
 800c9ae:	d904      	bls.n	800c9ba <_malloc_r+0x26>
 800c9b0:	230c      	movs	r3, #12
 800c9b2:	6033      	str	r3, [r6, #0]
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca90 <_malloc_r+0xfc>
 800c9be:	f000 f915 	bl	800cbec <__malloc_lock>
 800c9c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c9c6:	461c      	mov	r4, r3
 800c9c8:	bb44      	cbnz	r4, 800ca1c <_malloc_r+0x88>
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f7ff ffbf 	bl	800c950 <sbrk_aligned>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	d158      	bne.n	800ca8a <_malloc_r+0xf6>
 800c9d8:	f8d8 4000 	ldr.w	r4, [r8]
 800c9dc:	4627      	mov	r7, r4
 800c9de:	2f00      	cmp	r7, #0
 800c9e0:	d143      	bne.n	800ca6a <_malloc_r+0xd6>
 800c9e2:	2c00      	cmp	r4, #0
 800c9e4:	d04b      	beq.n	800ca7e <_malloc_r+0xea>
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	4639      	mov	r1, r7
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	eb04 0903 	add.w	r9, r4, r3
 800c9f0:	f000 fd44 	bl	800d47c <_sbrk_r>
 800c9f4:	4581      	cmp	r9, r0
 800c9f6:	d142      	bne.n	800ca7e <_malloc_r+0xea>
 800c9f8:	6821      	ldr	r1, [r4, #0]
 800c9fa:	1a6d      	subs	r5, r5, r1
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7ff ffa6 	bl	800c950 <sbrk_aligned>
 800ca04:	3001      	adds	r0, #1
 800ca06:	d03a      	beq.n	800ca7e <_malloc_r+0xea>
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	442b      	add	r3, r5
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	bb62      	cbnz	r2, 800ca70 <_malloc_r+0xdc>
 800ca16:	f8c8 7000 	str.w	r7, [r8]
 800ca1a:	e00f      	b.n	800ca3c <_malloc_r+0xa8>
 800ca1c:	6822      	ldr	r2, [r4, #0]
 800ca1e:	1b52      	subs	r2, r2, r5
 800ca20:	d420      	bmi.n	800ca64 <_malloc_r+0xd0>
 800ca22:	2a0b      	cmp	r2, #11
 800ca24:	d917      	bls.n	800ca56 <_malloc_r+0xc2>
 800ca26:	1961      	adds	r1, r4, r5
 800ca28:	42a3      	cmp	r3, r4
 800ca2a:	6025      	str	r5, [r4, #0]
 800ca2c:	bf18      	it	ne
 800ca2e:	6059      	strne	r1, [r3, #4]
 800ca30:	6863      	ldr	r3, [r4, #4]
 800ca32:	bf08      	it	eq
 800ca34:	f8c8 1000 	streq.w	r1, [r8]
 800ca38:	5162      	str	r2, [r4, r5]
 800ca3a:	604b      	str	r3, [r1, #4]
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f000 f8db 	bl	800cbf8 <__malloc_unlock>
 800ca42:	f104 000b 	add.w	r0, r4, #11
 800ca46:	1d23      	adds	r3, r4, #4
 800ca48:	f020 0007 	bic.w	r0, r0, #7
 800ca4c:	1ac2      	subs	r2, r0, r3
 800ca4e:	bf1c      	itt	ne
 800ca50:	1a1b      	subne	r3, r3, r0
 800ca52:	50a3      	strne	r3, [r4, r2]
 800ca54:	e7af      	b.n	800c9b6 <_malloc_r+0x22>
 800ca56:	6862      	ldr	r2, [r4, #4]
 800ca58:	42a3      	cmp	r3, r4
 800ca5a:	bf0c      	ite	eq
 800ca5c:	f8c8 2000 	streq.w	r2, [r8]
 800ca60:	605a      	strne	r2, [r3, #4]
 800ca62:	e7eb      	b.n	800ca3c <_malloc_r+0xa8>
 800ca64:	4623      	mov	r3, r4
 800ca66:	6864      	ldr	r4, [r4, #4]
 800ca68:	e7ae      	b.n	800c9c8 <_malloc_r+0x34>
 800ca6a:	463c      	mov	r4, r7
 800ca6c:	687f      	ldr	r7, [r7, #4]
 800ca6e:	e7b6      	b.n	800c9de <_malloc_r+0x4a>
 800ca70:	461a      	mov	r2, r3
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	42a3      	cmp	r3, r4
 800ca76:	d1fb      	bne.n	800ca70 <_malloc_r+0xdc>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	6053      	str	r3, [r2, #4]
 800ca7c:	e7de      	b.n	800ca3c <_malloc_r+0xa8>
 800ca7e:	230c      	movs	r3, #12
 800ca80:	6033      	str	r3, [r6, #0]
 800ca82:	4630      	mov	r0, r6
 800ca84:	f000 f8b8 	bl	800cbf8 <__malloc_unlock>
 800ca88:	e794      	b.n	800c9b4 <_malloc_r+0x20>
 800ca8a:	6005      	str	r5, [r0, #0]
 800ca8c:	e7d6      	b.n	800ca3c <_malloc_r+0xa8>
 800ca8e:	bf00      	nop
 800ca90:	2001753c 	.word	0x2001753c

0800ca94 <__sflush_r>:
 800ca94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9c:	0716      	lsls	r6, r2, #28
 800ca9e:	4605      	mov	r5, r0
 800caa0:	460c      	mov	r4, r1
 800caa2:	d454      	bmi.n	800cb4e <__sflush_r+0xba>
 800caa4:	684b      	ldr	r3, [r1, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	dc02      	bgt.n	800cab0 <__sflush_r+0x1c>
 800caaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800caac:	2b00      	cmp	r3, #0
 800caae:	dd48      	ble.n	800cb42 <__sflush_r+0xae>
 800cab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cab2:	2e00      	cmp	r6, #0
 800cab4:	d045      	beq.n	800cb42 <__sflush_r+0xae>
 800cab6:	2300      	movs	r3, #0
 800cab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cabc:	682f      	ldr	r7, [r5, #0]
 800cabe:	6a21      	ldr	r1, [r4, #32]
 800cac0:	602b      	str	r3, [r5, #0]
 800cac2:	d030      	beq.n	800cb26 <__sflush_r+0x92>
 800cac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	0759      	lsls	r1, r3, #29
 800caca:	d505      	bpl.n	800cad8 <__sflush_r+0x44>
 800cacc:	6863      	ldr	r3, [r4, #4]
 800cace:	1ad2      	subs	r2, r2, r3
 800cad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cad2:	b10b      	cbz	r3, 800cad8 <__sflush_r+0x44>
 800cad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cad6:	1ad2      	subs	r2, r2, r3
 800cad8:	2300      	movs	r3, #0
 800cada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cadc:	6a21      	ldr	r1, [r4, #32]
 800cade:	4628      	mov	r0, r5
 800cae0:	47b0      	blx	r6
 800cae2:	1c43      	adds	r3, r0, #1
 800cae4:	89a3      	ldrh	r3, [r4, #12]
 800cae6:	d106      	bne.n	800caf6 <__sflush_r+0x62>
 800cae8:	6829      	ldr	r1, [r5, #0]
 800caea:	291d      	cmp	r1, #29
 800caec:	d82b      	bhi.n	800cb46 <__sflush_r+0xb2>
 800caee:	4a2a      	ldr	r2, [pc, #168]	@ (800cb98 <__sflush_r+0x104>)
 800caf0:	40ca      	lsrs	r2, r1
 800caf2:	07d6      	lsls	r6, r2, #31
 800caf4:	d527      	bpl.n	800cb46 <__sflush_r+0xb2>
 800caf6:	2200      	movs	r2, #0
 800caf8:	6062      	str	r2, [r4, #4]
 800cafa:	04d9      	lsls	r1, r3, #19
 800cafc:	6922      	ldr	r2, [r4, #16]
 800cafe:	6022      	str	r2, [r4, #0]
 800cb00:	d504      	bpl.n	800cb0c <__sflush_r+0x78>
 800cb02:	1c42      	adds	r2, r0, #1
 800cb04:	d101      	bne.n	800cb0a <__sflush_r+0x76>
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	b903      	cbnz	r3, 800cb0c <__sflush_r+0x78>
 800cb0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb0e:	602f      	str	r7, [r5, #0]
 800cb10:	b1b9      	cbz	r1, 800cb42 <__sflush_r+0xae>
 800cb12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb16:	4299      	cmp	r1, r3
 800cb18:	d002      	beq.n	800cb20 <__sflush_r+0x8c>
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	f000 fcea 	bl	800d4f4 <_free_r>
 800cb20:	2300      	movs	r3, #0
 800cb22:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb24:	e00d      	b.n	800cb42 <__sflush_r+0xae>
 800cb26:	2301      	movs	r3, #1
 800cb28:	4628      	mov	r0, r5
 800cb2a:	47b0      	blx	r6
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	1c50      	adds	r0, r2, #1
 800cb30:	d1c9      	bne.n	800cac6 <__sflush_r+0x32>
 800cb32:	682b      	ldr	r3, [r5, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0c6      	beq.n	800cac6 <__sflush_r+0x32>
 800cb38:	2b1d      	cmp	r3, #29
 800cb3a:	d001      	beq.n	800cb40 <__sflush_r+0xac>
 800cb3c:	2b16      	cmp	r3, #22
 800cb3e:	d11e      	bne.n	800cb7e <__sflush_r+0xea>
 800cb40:	602f      	str	r7, [r5, #0]
 800cb42:	2000      	movs	r0, #0
 800cb44:	e022      	b.n	800cb8c <__sflush_r+0xf8>
 800cb46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb4a:	b21b      	sxth	r3, r3
 800cb4c:	e01b      	b.n	800cb86 <__sflush_r+0xf2>
 800cb4e:	690f      	ldr	r7, [r1, #16]
 800cb50:	2f00      	cmp	r7, #0
 800cb52:	d0f6      	beq.n	800cb42 <__sflush_r+0xae>
 800cb54:	0793      	lsls	r3, r2, #30
 800cb56:	680e      	ldr	r6, [r1, #0]
 800cb58:	bf08      	it	eq
 800cb5a:	694b      	ldreq	r3, [r1, #20]
 800cb5c:	600f      	str	r7, [r1, #0]
 800cb5e:	bf18      	it	ne
 800cb60:	2300      	movne	r3, #0
 800cb62:	eba6 0807 	sub.w	r8, r6, r7
 800cb66:	608b      	str	r3, [r1, #8]
 800cb68:	f1b8 0f00 	cmp.w	r8, #0
 800cb6c:	dde9      	ble.n	800cb42 <__sflush_r+0xae>
 800cb6e:	6a21      	ldr	r1, [r4, #32]
 800cb70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb72:	4643      	mov	r3, r8
 800cb74:	463a      	mov	r2, r7
 800cb76:	4628      	mov	r0, r5
 800cb78:	47b0      	blx	r6
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	dc08      	bgt.n	800cb90 <__sflush_r+0xfc>
 800cb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb86:	81a3      	strh	r3, [r4, #12]
 800cb88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb90:	4407      	add	r7, r0
 800cb92:	eba8 0800 	sub.w	r8, r8, r0
 800cb96:	e7e7      	b.n	800cb68 <__sflush_r+0xd4>
 800cb98:	20400001 	.word	0x20400001

0800cb9c <_fflush_r>:
 800cb9c:	b538      	push	{r3, r4, r5, lr}
 800cb9e:	690b      	ldr	r3, [r1, #16]
 800cba0:	4605      	mov	r5, r0
 800cba2:	460c      	mov	r4, r1
 800cba4:	b913      	cbnz	r3, 800cbac <_fflush_r+0x10>
 800cba6:	2500      	movs	r5, #0
 800cba8:	4628      	mov	r0, r5
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}
 800cbac:	b118      	cbz	r0, 800cbb6 <_fflush_r+0x1a>
 800cbae:	6a03      	ldr	r3, [r0, #32]
 800cbb0:	b90b      	cbnz	r3, 800cbb6 <_fflush_r+0x1a>
 800cbb2:	f7fe fe47 	bl	800b844 <__sinit>
 800cbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d0f3      	beq.n	800cba6 <_fflush_r+0xa>
 800cbbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cbc0:	07d0      	lsls	r0, r2, #31
 800cbc2:	d404      	bmi.n	800cbce <_fflush_r+0x32>
 800cbc4:	0599      	lsls	r1, r3, #22
 800cbc6:	d402      	bmi.n	800cbce <_fflush_r+0x32>
 800cbc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbca:	f7fe fed4 	bl	800b976 <__retarget_lock_acquire_recursive>
 800cbce:	4628      	mov	r0, r5
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	f7ff ff5f 	bl	800ca94 <__sflush_r>
 800cbd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbd8:	07da      	lsls	r2, r3, #31
 800cbda:	4605      	mov	r5, r0
 800cbdc:	d4e4      	bmi.n	800cba8 <_fflush_r+0xc>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	059b      	lsls	r3, r3, #22
 800cbe2:	d4e1      	bmi.n	800cba8 <_fflush_r+0xc>
 800cbe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbe6:	f7fe fec7 	bl	800b978 <__retarget_lock_release_recursive>
 800cbea:	e7dd      	b.n	800cba8 <_fflush_r+0xc>

0800cbec <__malloc_lock>:
 800cbec:	4801      	ldr	r0, [pc, #4]	@ (800cbf4 <__malloc_lock+0x8>)
 800cbee:	f7fe bec2 	b.w	800b976 <__retarget_lock_acquire_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	20017534 	.word	0x20017534

0800cbf8 <__malloc_unlock>:
 800cbf8:	4801      	ldr	r0, [pc, #4]	@ (800cc00 <__malloc_unlock+0x8>)
 800cbfa:	f7fe bebd 	b.w	800b978 <__retarget_lock_release_recursive>
 800cbfe:	bf00      	nop
 800cc00:	20017534 	.word	0x20017534

0800cc04 <_Balloc>:
 800cc04:	b570      	push	{r4, r5, r6, lr}
 800cc06:	69c6      	ldr	r6, [r0, #28]
 800cc08:	4604      	mov	r4, r0
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	b976      	cbnz	r6, 800cc2c <_Balloc+0x28>
 800cc0e:	2010      	movs	r0, #16
 800cc10:	f7ff fe96 	bl	800c940 <malloc>
 800cc14:	4602      	mov	r2, r0
 800cc16:	61e0      	str	r0, [r4, #28]
 800cc18:	b920      	cbnz	r0, 800cc24 <_Balloc+0x20>
 800cc1a:	4b18      	ldr	r3, [pc, #96]	@ (800cc7c <_Balloc+0x78>)
 800cc1c:	4818      	ldr	r0, [pc, #96]	@ (800cc80 <_Balloc+0x7c>)
 800cc1e:	216b      	movs	r1, #107	@ 0x6b
 800cc20:	f7fe febe 	bl	800b9a0 <__assert_func>
 800cc24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc28:	6006      	str	r6, [r0, #0]
 800cc2a:	60c6      	str	r6, [r0, #12]
 800cc2c:	69e6      	ldr	r6, [r4, #28]
 800cc2e:	68f3      	ldr	r3, [r6, #12]
 800cc30:	b183      	cbz	r3, 800cc54 <_Balloc+0x50>
 800cc32:	69e3      	ldr	r3, [r4, #28]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc3a:	b9b8      	cbnz	r0, 800cc6c <_Balloc+0x68>
 800cc3c:	2101      	movs	r1, #1
 800cc3e:	fa01 f605 	lsl.w	r6, r1, r5
 800cc42:	1d72      	adds	r2, r6, #5
 800cc44:	0092      	lsls	r2, r2, #2
 800cc46:	4620      	mov	r0, r4
 800cc48:	f000 fc3f 	bl	800d4ca <_calloc_r>
 800cc4c:	b160      	cbz	r0, 800cc68 <_Balloc+0x64>
 800cc4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc52:	e00e      	b.n	800cc72 <_Balloc+0x6e>
 800cc54:	2221      	movs	r2, #33	@ 0x21
 800cc56:	2104      	movs	r1, #4
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f000 fc36 	bl	800d4ca <_calloc_r>
 800cc5e:	69e3      	ldr	r3, [r4, #28]
 800cc60:	60f0      	str	r0, [r6, #12]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d1e4      	bne.n	800cc32 <_Balloc+0x2e>
 800cc68:	2000      	movs	r0, #0
 800cc6a:	bd70      	pop	{r4, r5, r6, pc}
 800cc6c:	6802      	ldr	r2, [r0, #0]
 800cc6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc72:	2300      	movs	r3, #0
 800cc74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc78:	e7f7      	b.n	800cc6a <_Balloc+0x66>
 800cc7a:	bf00      	nop
 800cc7c:	0800e064 	.word	0x0800e064
 800cc80:	0800e196 	.word	0x0800e196

0800cc84 <_Bfree>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	69c6      	ldr	r6, [r0, #28]
 800cc88:	4605      	mov	r5, r0
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	b976      	cbnz	r6, 800ccac <_Bfree+0x28>
 800cc8e:	2010      	movs	r0, #16
 800cc90:	f7ff fe56 	bl	800c940 <malloc>
 800cc94:	4602      	mov	r2, r0
 800cc96:	61e8      	str	r0, [r5, #28]
 800cc98:	b920      	cbnz	r0, 800cca4 <_Bfree+0x20>
 800cc9a:	4b09      	ldr	r3, [pc, #36]	@ (800ccc0 <_Bfree+0x3c>)
 800cc9c:	4809      	ldr	r0, [pc, #36]	@ (800ccc4 <_Bfree+0x40>)
 800cc9e:	218f      	movs	r1, #143	@ 0x8f
 800cca0:	f7fe fe7e 	bl	800b9a0 <__assert_func>
 800cca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cca8:	6006      	str	r6, [r0, #0]
 800ccaa:	60c6      	str	r6, [r0, #12]
 800ccac:	b13c      	cbz	r4, 800ccbe <_Bfree+0x3a>
 800ccae:	69eb      	ldr	r3, [r5, #28]
 800ccb0:	6862      	ldr	r2, [r4, #4]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccb8:	6021      	str	r1, [r4, #0]
 800ccba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
 800ccc0:	0800e064 	.word	0x0800e064
 800ccc4:	0800e196 	.word	0x0800e196

0800ccc8 <__multadd>:
 800ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cccc:	690d      	ldr	r5, [r1, #16]
 800ccce:	4607      	mov	r7, r0
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	461e      	mov	r6, r3
 800ccd4:	f101 0c14 	add.w	ip, r1, #20
 800ccd8:	2000      	movs	r0, #0
 800ccda:	f8dc 3000 	ldr.w	r3, [ip]
 800ccde:	b299      	uxth	r1, r3
 800cce0:	fb02 6101 	mla	r1, r2, r1, r6
 800cce4:	0c1e      	lsrs	r6, r3, #16
 800cce6:	0c0b      	lsrs	r3, r1, #16
 800cce8:	fb02 3306 	mla	r3, r2, r6, r3
 800ccec:	b289      	uxth	r1, r1
 800ccee:	3001      	adds	r0, #1
 800ccf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccf4:	4285      	cmp	r5, r0
 800ccf6:	f84c 1b04 	str.w	r1, [ip], #4
 800ccfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccfe:	dcec      	bgt.n	800ccda <__multadd+0x12>
 800cd00:	b30e      	cbz	r6, 800cd46 <__multadd+0x7e>
 800cd02:	68a3      	ldr	r3, [r4, #8]
 800cd04:	42ab      	cmp	r3, r5
 800cd06:	dc19      	bgt.n	800cd3c <__multadd+0x74>
 800cd08:	6861      	ldr	r1, [r4, #4]
 800cd0a:	4638      	mov	r0, r7
 800cd0c:	3101      	adds	r1, #1
 800cd0e:	f7ff ff79 	bl	800cc04 <_Balloc>
 800cd12:	4680      	mov	r8, r0
 800cd14:	b928      	cbnz	r0, 800cd22 <__multadd+0x5a>
 800cd16:	4602      	mov	r2, r0
 800cd18:	4b0c      	ldr	r3, [pc, #48]	@ (800cd4c <__multadd+0x84>)
 800cd1a:	480d      	ldr	r0, [pc, #52]	@ (800cd50 <__multadd+0x88>)
 800cd1c:	21ba      	movs	r1, #186	@ 0xba
 800cd1e:	f7fe fe3f 	bl	800b9a0 <__assert_func>
 800cd22:	6922      	ldr	r2, [r4, #16]
 800cd24:	3202      	adds	r2, #2
 800cd26:	f104 010c 	add.w	r1, r4, #12
 800cd2a:	0092      	lsls	r2, r2, #2
 800cd2c:	300c      	adds	r0, #12
 800cd2e:	f7fe fe29 	bl	800b984 <memcpy>
 800cd32:	4621      	mov	r1, r4
 800cd34:	4638      	mov	r0, r7
 800cd36:	f7ff ffa5 	bl	800cc84 <_Bfree>
 800cd3a:	4644      	mov	r4, r8
 800cd3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd40:	3501      	adds	r5, #1
 800cd42:	615e      	str	r6, [r3, #20]
 800cd44:	6125      	str	r5, [r4, #16]
 800cd46:	4620      	mov	r0, r4
 800cd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd4c:	0800e174 	.word	0x0800e174
 800cd50:	0800e196 	.word	0x0800e196

0800cd54 <__hi0bits>:
 800cd54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd58:	4603      	mov	r3, r0
 800cd5a:	bf36      	itet	cc
 800cd5c:	0403      	lslcc	r3, r0, #16
 800cd5e:	2000      	movcs	r0, #0
 800cd60:	2010      	movcc	r0, #16
 800cd62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd66:	bf3c      	itt	cc
 800cd68:	021b      	lslcc	r3, r3, #8
 800cd6a:	3008      	addcc	r0, #8
 800cd6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd70:	bf3c      	itt	cc
 800cd72:	011b      	lslcc	r3, r3, #4
 800cd74:	3004      	addcc	r0, #4
 800cd76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd7a:	bf3c      	itt	cc
 800cd7c:	009b      	lslcc	r3, r3, #2
 800cd7e:	3002      	addcc	r0, #2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	db05      	blt.n	800cd90 <__hi0bits+0x3c>
 800cd84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd88:	f100 0001 	add.w	r0, r0, #1
 800cd8c:	bf08      	it	eq
 800cd8e:	2020      	moveq	r0, #32
 800cd90:	4770      	bx	lr

0800cd92 <__lo0bits>:
 800cd92:	6803      	ldr	r3, [r0, #0]
 800cd94:	4602      	mov	r2, r0
 800cd96:	f013 0007 	ands.w	r0, r3, #7
 800cd9a:	d00b      	beq.n	800cdb4 <__lo0bits+0x22>
 800cd9c:	07d9      	lsls	r1, r3, #31
 800cd9e:	d421      	bmi.n	800cde4 <__lo0bits+0x52>
 800cda0:	0798      	lsls	r0, r3, #30
 800cda2:	bf49      	itett	mi
 800cda4:	085b      	lsrmi	r3, r3, #1
 800cda6:	089b      	lsrpl	r3, r3, #2
 800cda8:	2001      	movmi	r0, #1
 800cdaa:	6013      	strmi	r3, [r2, #0]
 800cdac:	bf5c      	itt	pl
 800cdae:	6013      	strpl	r3, [r2, #0]
 800cdb0:	2002      	movpl	r0, #2
 800cdb2:	4770      	bx	lr
 800cdb4:	b299      	uxth	r1, r3
 800cdb6:	b909      	cbnz	r1, 800cdbc <__lo0bits+0x2a>
 800cdb8:	0c1b      	lsrs	r3, r3, #16
 800cdba:	2010      	movs	r0, #16
 800cdbc:	b2d9      	uxtb	r1, r3
 800cdbe:	b909      	cbnz	r1, 800cdc4 <__lo0bits+0x32>
 800cdc0:	3008      	adds	r0, #8
 800cdc2:	0a1b      	lsrs	r3, r3, #8
 800cdc4:	0719      	lsls	r1, r3, #28
 800cdc6:	bf04      	itt	eq
 800cdc8:	091b      	lsreq	r3, r3, #4
 800cdca:	3004      	addeq	r0, #4
 800cdcc:	0799      	lsls	r1, r3, #30
 800cdce:	bf04      	itt	eq
 800cdd0:	089b      	lsreq	r3, r3, #2
 800cdd2:	3002      	addeq	r0, #2
 800cdd4:	07d9      	lsls	r1, r3, #31
 800cdd6:	d403      	bmi.n	800cde0 <__lo0bits+0x4e>
 800cdd8:	085b      	lsrs	r3, r3, #1
 800cdda:	f100 0001 	add.w	r0, r0, #1
 800cdde:	d003      	beq.n	800cde8 <__lo0bits+0x56>
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	4770      	bx	lr
 800cde4:	2000      	movs	r0, #0
 800cde6:	4770      	bx	lr
 800cde8:	2020      	movs	r0, #32
 800cdea:	4770      	bx	lr

0800cdec <__i2b>:
 800cdec:	b510      	push	{r4, lr}
 800cdee:	460c      	mov	r4, r1
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	f7ff ff07 	bl	800cc04 <_Balloc>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	b928      	cbnz	r0, 800ce06 <__i2b+0x1a>
 800cdfa:	4b05      	ldr	r3, [pc, #20]	@ (800ce10 <__i2b+0x24>)
 800cdfc:	4805      	ldr	r0, [pc, #20]	@ (800ce14 <__i2b+0x28>)
 800cdfe:	f240 1145 	movw	r1, #325	@ 0x145
 800ce02:	f7fe fdcd 	bl	800b9a0 <__assert_func>
 800ce06:	2301      	movs	r3, #1
 800ce08:	6144      	str	r4, [r0, #20]
 800ce0a:	6103      	str	r3, [r0, #16]
 800ce0c:	bd10      	pop	{r4, pc}
 800ce0e:	bf00      	nop
 800ce10:	0800e174 	.word	0x0800e174
 800ce14:	0800e196 	.word	0x0800e196

0800ce18 <__multiply>:
 800ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1c:	4617      	mov	r7, r2
 800ce1e:	690a      	ldr	r2, [r1, #16]
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	bfa8      	it	ge
 800ce26:	463b      	movge	r3, r7
 800ce28:	4689      	mov	r9, r1
 800ce2a:	bfa4      	itt	ge
 800ce2c:	460f      	movge	r7, r1
 800ce2e:	4699      	movge	r9, r3
 800ce30:	693d      	ldr	r5, [r7, #16]
 800ce32:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	6879      	ldr	r1, [r7, #4]
 800ce3a:	eb05 060a 	add.w	r6, r5, sl
 800ce3e:	42b3      	cmp	r3, r6
 800ce40:	b085      	sub	sp, #20
 800ce42:	bfb8      	it	lt
 800ce44:	3101      	addlt	r1, #1
 800ce46:	f7ff fedd 	bl	800cc04 <_Balloc>
 800ce4a:	b930      	cbnz	r0, 800ce5a <__multiply+0x42>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	4b41      	ldr	r3, [pc, #260]	@ (800cf54 <__multiply+0x13c>)
 800ce50:	4841      	ldr	r0, [pc, #260]	@ (800cf58 <__multiply+0x140>)
 800ce52:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce56:	f7fe fda3 	bl	800b9a0 <__assert_func>
 800ce5a:	f100 0414 	add.w	r4, r0, #20
 800ce5e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ce62:	4623      	mov	r3, r4
 800ce64:	2200      	movs	r2, #0
 800ce66:	4573      	cmp	r3, lr
 800ce68:	d320      	bcc.n	800ceac <__multiply+0x94>
 800ce6a:	f107 0814 	add.w	r8, r7, #20
 800ce6e:	f109 0114 	add.w	r1, r9, #20
 800ce72:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ce76:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ce7a:	9302      	str	r3, [sp, #8]
 800ce7c:	1beb      	subs	r3, r5, r7
 800ce7e:	3b15      	subs	r3, #21
 800ce80:	f023 0303 	bic.w	r3, r3, #3
 800ce84:	3304      	adds	r3, #4
 800ce86:	3715      	adds	r7, #21
 800ce88:	42bd      	cmp	r5, r7
 800ce8a:	bf38      	it	cc
 800ce8c:	2304      	movcc	r3, #4
 800ce8e:	9301      	str	r3, [sp, #4]
 800ce90:	9b02      	ldr	r3, [sp, #8]
 800ce92:	9103      	str	r1, [sp, #12]
 800ce94:	428b      	cmp	r3, r1
 800ce96:	d80c      	bhi.n	800ceb2 <__multiply+0x9a>
 800ce98:	2e00      	cmp	r6, #0
 800ce9a:	dd03      	ble.n	800cea4 <__multiply+0x8c>
 800ce9c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d055      	beq.n	800cf50 <__multiply+0x138>
 800cea4:	6106      	str	r6, [r0, #16]
 800cea6:	b005      	add	sp, #20
 800cea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceac:	f843 2b04 	str.w	r2, [r3], #4
 800ceb0:	e7d9      	b.n	800ce66 <__multiply+0x4e>
 800ceb2:	f8b1 a000 	ldrh.w	sl, [r1]
 800ceb6:	f1ba 0f00 	cmp.w	sl, #0
 800ceba:	d01f      	beq.n	800cefc <__multiply+0xe4>
 800cebc:	46c4      	mov	ip, r8
 800cebe:	46a1      	mov	r9, r4
 800cec0:	2700      	movs	r7, #0
 800cec2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cec6:	f8d9 3000 	ldr.w	r3, [r9]
 800ceca:	fa1f fb82 	uxth.w	fp, r2
 800cece:	b29b      	uxth	r3, r3
 800ced0:	fb0a 330b 	mla	r3, sl, fp, r3
 800ced4:	443b      	add	r3, r7
 800ced6:	f8d9 7000 	ldr.w	r7, [r9]
 800ceda:	0c12      	lsrs	r2, r2, #16
 800cedc:	0c3f      	lsrs	r7, r7, #16
 800cede:	fb0a 7202 	mla	r2, sl, r2, r7
 800cee2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ceec:	4565      	cmp	r5, ip
 800ceee:	f849 3b04 	str.w	r3, [r9], #4
 800cef2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cef6:	d8e4      	bhi.n	800cec2 <__multiply+0xaa>
 800cef8:	9b01      	ldr	r3, [sp, #4]
 800cefa:	50e7      	str	r7, [r4, r3]
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf02:	3104      	adds	r1, #4
 800cf04:	f1b9 0f00 	cmp.w	r9, #0
 800cf08:	d020      	beq.n	800cf4c <__multiply+0x134>
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	4647      	mov	r7, r8
 800cf0e:	46a4      	mov	ip, r4
 800cf10:	f04f 0a00 	mov.w	sl, #0
 800cf14:	f8b7 b000 	ldrh.w	fp, [r7]
 800cf18:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cf1c:	fb09 220b 	mla	r2, r9, fp, r2
 800cf20:	4452      	add	r2, sl
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf28:	f84c 3b04 	str.w	r3, [ip], #4
 800cf2c:	f857 3b04 	ldr.w	r3, [r7], #4
 800cf30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf34:	f8bc 3000 	ldrh.w	r3, [ip]
 800cf38:	fb09 330a 	mla	r3, r9, sl, r3
 800cf3c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cf40:	42bd      	cmp	r5, r7
 800cf42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf46:	d8e5      	bhi.n	800cf14 <__multiply+0xfc>
 800cf48:	9a01      	ldr	r2, [sp, #4]
 800cf4a:	50a3      	str	r3, [r4, r2]
 800cf4c:	3404      	adds	r4, #4
 800cf4e:	e79f      	b.n	800ce90 <__multiply+0x78>
 800cf50:	3e01      	subs	r6, #1
 800cf52:	e7a1      	b.n	800ce98 <__multiply+0x80>
 800cf54:	0800e174 	.word	0x0800e174
 800cf58:	0800e196 	.word	0x0800e196

0800cf5c <__pow5mult>:
 800cf5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf60:	4615      	mov	r5, r2
 800cf62:	f012 0203 	ands.w	r2, r2, #3
 800cf66:	4607      	mov	r7, r0
 800cf68:	460e      	mov	r6, r1
 800cf6a:	d007      	beq.n	800cf7c <__pow5mult+0x20>
 800cf6c:	4c25      	ldr	r4, [pc, #148]	@ (800d004 <__pow5mult+0xa8>)
 800cf6e:	3a01      	subs	r2, #1
 800cf70:	2300      	movs	r3, #0
 800cf72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf76:	f7ff fea7 	bl	800ccc8 <__multadd>
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	10ad      	asrs	r5, r5, #2
 800cf7e:	d03d      	beq.n	800cffc <__pow5mult+0xa0>
 800cf80:	69fc      	ldr	r4, [r7, #28]
 800cf82:	b97c      	cbnz	r4, 800cfa4 <__pow5mult+0x48>
 800cf84:	2010      	movs	r0, #16
 800cf86:	f7ff fcdb 	bl	800c940 <malloc>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	61f8      	str	r0, [r7, #28]
 800cf8e:	b928      	cbnz	r0, 800cf9c <__pow5mult+0x40>
 800cf90:	4b1d      	ldr	r3, [pc, #116]	@ (800d008 <__pow5mult+0xac>)
 800cf92:	481e      	ldr	r0, [pc, #120]	@ (800d00c <__pow5mult+0xb0>)
 800cf94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf98:	f7fe fd02 	bl	800b9a0 <__assert_func>
 800cf9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfa0:	6004      	str	r4, [r0, #0]
 800cfa2:	60c4      	str	r4, [r0, #12]
 800cfa4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cfa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfac:	b94c      	cbnz	r4, 800cfc2 <__pow5mult+0x66>
 800cfae:	f240 2171 	movw	r1, #625	@ 0x271
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	f7ff ff1a 	bl	800cdec <__i2b>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	6003      	str	r3, [r0, #0]
 800cfc2:	f04f 0900 	mov.w	r9, #0
 800cfc6:	07eb      	lsls	r3, r5, #31
 800cfc8:	d50a      	bpl.n	800cfe0 <__pow5mult+0x84>
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4622      	mov	r2, r4
 800cfce:	4638      	mov	r0, r7
 800cfd0:	f7ff ff22 	bl	800ce18 <__multiply>
 800cfd4:	4631      	mov	r1, r6
 800cfd6:	4680      	mov	r8, r0
 800cfd8:	4638      	mov	r0, r7
 800cfda:	f7ff fe53 	bl	800cc84 <_Bfree>
 800cfde:	4646      	mov	r6, r8
 800cfe0:	106d      	asrs	r5, r5, #1
 800cfe2:	d00b      	beq.n	800cffc <__pow5mult+0xa0>
 800cfe4:	6820      	ldr	r0, [r4, #0]
 800cfe6:	b938      	cbnz	r0, 800cff8 <__pow5mult+0x9c>
 800cfe8:	4622      	mov	r2, r4
 800cfea:	4621      	mov	r1, r4
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7ff ff13 	bl	800ce18 <__multiply>
 800cff2:	6020      	str	r0, [r4, #0]
 800cff4:	f8c0 9000 	str.w	r9, [r0]
 800cff8:	4604      	mov	r4, r0
 800cffa:	e7e4      	b.n	800cfc6 <__pow5mult+0x6a>
 800cffc:	4630      	mov	r0, r6
 800cffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d002:	bf00      	nop
 800d004:	0800e1fc 	.word	0x0800e1fc
 800d008:	0800e064 	.word	0x0800e064
 800d00c:	0800e196 	.word	0x0800e196

0800d010 <__lshift>:
 800d010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d014:	460c      	mov	r4, r1
 800d016:	6849      	ldr	r1, [r1, #4]
 800d018:	6923      	ldr	r3, [r4, #16]
 800d01a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d01e:	68a3      	ldr	r3, [r4, #8]
 800d020:	4607      	mov	r7, r0
 800d022:	4691      	mov	r9, r2
 800d024:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d028:	f108 0601 	add.w	r6, r8, #1
 800d02c:	42b3      	cmp	r3, r6
 800d02e:	db0b      	blt.n	800d048 <__lshift+0x38>
 800d030:	4638      	mov	r0, r7
 800d032:	f7ff fde7 	bl	800cc04 <_Balloc>
 800d036:	4605      	mov	r5, r0
 800d038:	b948      	cbnz	r0, 800d04e <__lshift+0x3e>
 800d03a:	4602      	mov	r2, r0
 800d03c:	4b28      	ldr	r3, [pc, #160]	@ (800d0e0 <__lshift+0xd0>)
 800d03e:	4829      	ldr	r0, [pc, #164]	@ (800d0e4 <__lshift+0xd4>)
 800d040:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d044:	f7fe fcac 	bl	800b9a0 <__assert_func>
 800d048:	3101      	adds	r1, #1
 800d04a:	005b      	lsls	r3, r3, #1
 800d04c:	e7ee      	b.n	800d02c <__lshift+0x1c>
 800d04e:	2300      	movs	r3, #0
 800d050:	f100 0114 	add.w	r1, r0, #20
 800d054:	f100 0210 	add.w	r2, r0, #16
 800d058:	4618      	mov	r0, r3
 800d05a:	4553      	cmp	r3, sl
 800d05c:	db33      	blt.n	800d0c6 <__lshift+0xb6>
 800d05e:	6920      	ldr	r0, [r4, #16]
 800d060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d064:	f104 0314 	add.w	r3, r4, #20
 800d068:	f019 091f 	ands.w	r9, r9, #31
 800d06c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d070:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d074:	d02b      	beq.n	800d0ce <__lshift+0xbe>
 800d076:	f1c9 0e20 	rsb	lr, r9, #32
 800d07a:	468a      	mov	sl, r1
 800d07c:	2200      	movs	r2, #0
 800d07e:	6818      	ldr	r0, [r3, #0]
 800d080:	fa00 f009 	lsl.w	r0, r0, r9
 800d084:	4310      	orrs	r0, r2
 800d086:	f84a 0b04 	str.w	r0, [sl], #4
 800d08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d08e:	459c      	cmp	ip, r3
 800d090:	fa22 f20e 	lsr.w	r2, r2, lr
 800d094:	d8f3      	bhi.n	800d07e <__lshift+0x6e>
 800d096:	ebac 0304 	sub.w	r3, ip, r4
 800d09a:	3b15      	subs	r3, #21
 800d09c:	f023 0303 	bic.w	r3, r3, #3
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	f104 0015 	add.w	r0, r4, #21
 800d0a6:	4560      	cmp	r0, ip
 800d0a8:	bf88      	it	hi
 800d0aa:	2304      	movhi	r3, #4
 800d0ac:	50ca      	str	r2, [r1, r3]
 800d0ae:	b10a      	cbz	r2, 800d0b4 <__lshift+0xa4>
 800d0b0:	f108 0602 	add.w	r6, r8, #2
 800d0b4:	3e01      	subs	r6, #1
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	612e      	str	r6, [r5, #16]
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	f7ff fde2 	bl	800cc84 <_Bfree>
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	e7c5      	b.n	800d05a <__lshift+0x4a>
 800d0ce:	3904      	subs	r1, #4
 800d0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0d8:	459c      	cmp	ip, r3
 800d0da:	d8f9      	bhi.n	800d0d0 <__lshift+0xc0>
 800d0dc:	e7ea      	b.n	800d0b4 <__lshift+0xa4>
 800d0de:	bf00      	nop
 800d0e0:	0800e174 	.word	0x0800e174
 800d0e4:	0800e196 	.word	0x0800e196

0800d0e8 <__mcmp>:
 800d0e8:	690a      	ldr	r2, [r1, #16]
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	6900      	ldr	r0, [r0, #16]
 800d0ee:	1a80      	subs	r0, r0, r2
 800d0f0:	b530      	push	{r4, r5, lr}
 800d0f2:	d10e      	bne.n	800d112 <__mcmp+0x2a>
 800d0f4:	3314      	adds	r3, #20
 800d0f6:	3114      	adds	r1, #20
 800d0f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d100:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d104:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d108:	4295      	cmp	r5, r2
 800d10a:	d003      	beq.n	800d114 <__mcmp+0x2c>
 800d10c:	d205      	bcs.n	800d11a <__mcmp+0x32>
 800d10e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d112:	bd30      	pop	{r4, r5, pc}
 800d114:	42a3      	cmp	r3, r4
 800d116:	d3f3      	bcc.n	800d100 <__mcmp+0x18>
 800d118:	e7fb      	b.n	800d112 <__mcmp+0x2a>
 800d11a:	2001      	movs	r0, #1
 800d11c:	e7f9      	b.n	800d112 <__mcmp+0x2a>
	...

0800d120 <__mdiff>:
 800d120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d124:	4689      	mov	r9, r1
 800d126:	4606      	mov	r6, r0
 800d128:	4611      	mov	r1, r2
 800d12a:	4648      	mov	r0, r9
 800d12c:	4614      	mov	r4, r2
 800d12e:	f7ff ffdb 	bl	800d0e8 <__mcmp>
 800d132:	1e05      	subs	r5, r0, #0
 800d134:	d112      	bne.n	800d15c <__mdiff+0x3c>
 800d136:	4629      	mov	r1, r5
 800d138:	4630      	mov	r0, r6
 800d13a:	f7ff fd63 	bl	800cc04 <_Balloc>
 800d13e:	4602      	mov	r2, r0
 800d140:	b928      	cbnz	r0, 800d14e <__mdiff+0x2e>
 800d142:	4b3f      	ldr	r3, [pc, #252]	@ (800d240 <__mdiff+0x120>)
 800d144:	f240 2137 	movw	r1, #567	@ 0x237
 800d148:	483e      	ldr	r0, [pc, #248]	@ (800d244 <__mdiff+0x124>)
 800d14a:	f7fe fc29 	bl	800b9a0 <__assert_func>
 800d14e:	2301      	movs	r3, #1
 800d150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d154:	4610      	mov	r0, r2
 800d156:	b003      	add	sp, #12
 800d158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15c:	bfbc      	itt	lt
 800d15e:	464b      	movlt	r3, r9
 800d160:	46a1      	movlt	r9, r4
 800d162:	4630      	mov	r0, r6
 800d164:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d168:	bfba      	itte	lt
 800d16a:	461c      	movlt	r4, r3
 800d16c:	2501      	movlt	r5, #1
 800d16e:	2500      	movge	r5, #0
 800d170:	f7ff fd48 	bl	800cc04 <_Balloc>
 800d174:	4602      	mov	r2, r0
 800d176:	b918      	cbnz	r0, 800d180 <__mdiff+0x60>
 800d178:	4b31      	ldr	r3, [pc, #196]	@ (800d240 <__mdiff+0x120>)
 800d17a:	f240 2145 	movw	r1, #581	@ 0x245
 800d17e:	e7e3      	b.n	800d148 <__mdiff+0x28>
 800d180:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d184:	6926      	ldr	r6, [r4, #16]
 800d186:	60c5      	str	r5, [r0, #12]
 800d188:	f109 0310 	add.w	r3, r9, #16
 800d18c:	f109 0514 	add.w	r5, r9, #20
 800d190:	f104 0e14 	add.w	lr, r4, #20
 800d194:	f100 0b14 	add.w	fp, r0, #20
 800d198:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d19c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	46d9      	mov	r9, fp
 800d1a4:	f04f 0c00 	mov.w	ip, #0
 800d1a8:	9b01      	ldr	r3, [sp, #4]
 800d1aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1b2:	9301      	str	r3, [sp, #4]
 800d1b4:	fa1f f38a 	uxth.w	r3, sl
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	b283      	uxth	r3, r0
 800d1bc:	1acb      	subs	r3, r1, r3
 800d1be:	0c00      	lsrs	r0, r0, #16
 800d1c0:	4463      	add	r3, ip
 800d1c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1d0:	4576      	cmp	r6, lr
 800d1d2:	f849 3b04 	str.w	r3, [r9], #4
 800d1d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1da:	d8e5      	bhi.n	800d1a8 <__mdiff+0x88>
 800d1dc:	1b33      	subs	r3, r6, r4
 800d1de:	3b15      	subs	r3, #21
 800d1e0:	f023 0303 	bic.w	r3, r3, #3
 800d1e4:	3415      	adds	r4, #21
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	42a6      	cmp	r6, r4
 800d1ea:	bf38      	it	cc
 800d1ec:	2304      	movcc	r3, #4
 800d1ee:	441d      	add	r5, r3
 800d1f0:	445b      	add	r3, fp
 800d1f2:	461e      	mov	r6, r3
 800d1f4:	462c      	mov	r4, r5
 800d1f6:	4544      	cmp	r4, r8
 800d1f8:	d30e      	bcc.n	800d218 <__mdiff+0xf8>
 800d1fa:	f108 0103 	add.w	r1, r8, #3
 800d1fe:	1b49      	subs	r1, r1, r5
 800d200:	f021 0103 	bic.w	r1, r1, #3
 800d204:	3d03      	subs	r5, #3
 800d206:	45a8      	cmp	r8, r5
 800d208:	bf38      	it	cc
 800d20a:	2100      	movcc	r1, #0
 800d20c:	440b      	add	r3, r1
 800d20e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d212:	b191      	cbz	r1, 800d23a <__mdiff+0x11a>
 800d214:	6117      	str	r7, [r2, #16]
 800d216:	e79d      	b.n	800d154 <__mdiff+0x34>
 800d218:	f854 1b04 	ldr.w	r1, [r4], #4
 800d21c:	46e6      	mov	lr, ip
 800d21e:	0c08      	lsrs	r0, r1, #16
 800d220:	fa1c fc81 	uxtah	ip, ip, r1
 800d224:	4471      	add	r1, lr
 800d226:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d22a:	b289      	uxth	r1, r1
 800d22c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d230:	f846 1b04 	str.w	r1, [r6], #4
 800d234:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d238:	e7dd      	b.n	800d1f6 <__mdiff+0xd6>
 800d23a:	3f01      	subs	r7, #1
 800d23c:	e7e7      	b.n	800d20e <__mdiff+0xee>
 800d23e:	bf00      	nop
 800d240:	0800e174 	.word	0x0800e174
 800d244:	0800e196 	.word	0x0800e196

0800d248 <__d2b>:
 800d248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d24c:	460f      	mov	r7, r1
 800d24e:	2101      	movs	r1, #1
 800d250:	ec59 8b10 	vmov	r8, r9, d0
 800d254:	4616      	mov	r6, r2
 800d256:	f7ff fcd5 	bl	800cc04 <_Balloc>
 800d25a:	4604      	mov	r4, r0
 800d25c:	b930      	cbnz	r0, 800d26c <__d2b+0x24>
 800d25e:	4602      	mov	r2, r0
 800d260:	4b23      	ldr	r3, [pc, #140]	@ (800d2f0 <__d2b+0xa8>)
 800d262:	4824      	ldr	r0, [pc, #144]	@ (800d2f4 <__d2b+0xac>)
 800d264:	f240 310f 	movw	r1, #783	@ 0x30f
 800d268:	f7fe fb9a 	bl	800b9a0 <__assert_func>
 800d26c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d274:	b10d      	cbz	r5, 800d27a <__d2b+0x32>
 800d276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d27a:	9301      	str	r3, [sp, #4]
 800d27c:	f1b8 0300 	subs.w	r3, r8, #0
 800d280:	d023      	beq.n	800d2ca <__d2b+0x82>
 800d282:	4668      	mov	r0, sp
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	f7ff fd84 	bl	800cd92 <__lo0bits>
 800d28a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d28e:	b1d0      	cbz	r0, 800d2c6 <__d2b+0x7e>
 800d290:	f1c0 0320 	rsb	r3, r0, #32
 800d294:	fa02 f303 	lsl.w	r3, r2, r3
 800d298:	430b      	orrs	r3, r1
 800d29a:	40c2      	lsrs	r2, r0
 800d29c:	6163      	str	r3, [r4, #20]
 800d29e:	9201      	str	r2, [sp, #4]
 800d2a0:	9b01      	ldr	r3, [sp, #4]
 800d2a2:	61a3      	str	r3, [r4, #24]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	bf0c      	ite	eq
 800d2a8:	2201      	moveq	r2, #1
 800d2aa:	2202      	movne	r2, #2
 800d2ac:	6122      	str	r2, [r4, #16]
 800d2ae:	b1a5      	cbz	r5, 800d2da <__d2b+0x92>
 800d2b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2b4:	4405      	add	r5, r0
 800d2b6:	603d      	str	r5, [r7, #0]
 800d2b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2bc:	6030      	str	r0, [r6, #0]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	b003      	add	sp, #12
 800d2c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2c6:	6161      	str	r1, [r4, #20]
 800d2c8:	e7ea      	b.n	800d2a0 <__d2b+0x58>
 800d2ca:	a801      	add	r0, sp, #4
 800d2cc:	f7ff fd61 	bl	800cd92 <__lo0bits>
 800d2d0:	9b01      	ldr	r3, [sp, #4]
 800d2d2:	6163      	str	r3, [r4, #20]
 800d2d4:	3020      	adds	r0, #32
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	e7e8      	b.n	800d2ac <__d2b+0x64>
 800d2da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2e2:	6038      	str	r0, [r7, #0]
 800d2e4:	6918      	ldr	r0, [r3, #16]
 800d2e6:	f7ff fd35 	bl	800cd54 <__hi0bits>
 800d2ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2ee:	e7e5      	b.n	800d2bc <__d2b+0x74>
 800d2f0:	0800e174 	.word	0x0800e174
 800d2f4:	0800e196 	.word	0x0800e196

0800d2f8 <__sread>:
 800d2f8:	b510      	push	{r4, lr}
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d300:	f000 f8aa 	bl	800d458 <_read_r>
 800d304:	2800      	cmp	r0, #0
 800d306:	bfab      	itete	ge
 800d308:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d30a:	89a3      	ldrhlt	r3, [r4, #12]
 800d30c:	181b      	addge	r3, r3, r0
 800d30e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d312:	bfac      	ite	ge
 800d314:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d316:	81a3      	strhlt	r3, [r4, #12]
 800d318:	bd10      	pop	{r4, pc}

0800d31a <__swrite>:
 800d31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d31e:	461f      	mov	r7, r3
 800d320:	898b      	ldrh	r3, [r1, #12]
 800d322:	05db      	lsls	r3, r3, #23
 800d324:	4605      	mov	r5, r0
 800d326:	460c      	mov	r4, r1
 800d328:	4616      	mov	r6, r2
 800d32a:	d505      	bpl.n	800d338 <__swrite+0x1e>
 800d32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d330:	2302      	movs	r3, #2
 800d332:	2200      	movs	r2, #0
 800d334:	f000 f87e 	bl	800d434 <_lseek_r>
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d33e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d342:	81a3      	strh	r3, [r4, #12]
 800d344:	4632      	mov	r2, r6
 800d346:	463b      	mov	r3, r7
 800d348:	4628      	mov	r0, r5
 800d34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d34e:	f7fd bab7 	b.w	800a8c0 <_write_r>

0800d352 <__sseek>:
 800d352:	b510      	push	{r4, lr}
 800d354:	460c      	mov	r4, r1
 800d356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d35a:	f000 f86b 	bl	800d434 <_lseek_r>
 800d35e:	1c43      	adds	r3, r0, #1
 800d360:	89a3      	ldrh	r3, [r4, #12]
 800d362:	bf15      	itete	ne
 800d364:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d366:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d36a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d36e:	81a3      	strheq	r3, [r4, #12]
 800d370:	bf18      	it	ne
 800d372:	81a3      	strhne	r3, [r4, #12]
 800d374:	bd10      	pop	{r4, pc}

0800d376 <__sclose>:
 800d376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d37a:	f000 b88f 	b.w	800d49c <_close_r>
	...

0800d380 <fiprintf>:
 800d380:	b40e      	push	{r1, r2, r3}
 800d382:	b503      	push	{r0, r1, lr}
 800d384:	4601      	mov	r1, r0
 800d386:	ab03      	add	r3, sp, #12
 800d388:	4805      	ldr	r0, [pc, #20]	@ (800d3a0 <fiprintf+0x20>)
 800d38a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d38e:	6800      	ldr	r0, [r0, #0]
 800d390:	9301      	str	r3, [sp, #4]
 800d392:	f000 f923 	bl	800d5dc <_vfiprintf_r>
 800d396:	b002      	add	sp, #8
 800d398:	f85d eb04 	ldr.w	lr, [sp], #4
 800d39c:	b003      	add	sp, #12
 800d39e:	4770      	bx	lr
 800d3a0:	20000024 	.word	0x20000024

0800d3a4 <_realloc_r>:
 800d3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	4614      	mov	r4, r2
 800d3ac:	460d      	mov	r5, r1
 800d3ae:	b921      	cbnz	r1, 800d3ba <_realloc_r+0x16>
 800d3b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	f7ff baed 	b.w	800c994 <_malloc_r>
 800d3ba:	b92a      	cbnz	r2, 800d3c8 <_realloc_r+0x24>
 800d3bc:	f000 f89a 	bl	800d4f4 <_free_r>
 800d3c0:	4625      	mov	r5, r4
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c8:	f000 fa32 	bl	800d830 <_malloc_usable_size_r>
 800d3cc:	4284      	cmp	r4, r0
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	d802      	bhi.n	800d3d8 <_realloc_r+0x34>
 800d3d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3d6:	d8f4      	bhi.n	800d3c2 <_realloc_r+0x1e>
 800d3d8:	4621      	mov	r1, r4
 800d3da:	4638      	mov	r0, r7
 800d3dc:	f7ff fada 	bl	800c994 <_malloc_r>
 800d3e0:	4680      	mov	r8, r0
 800d3e2:	b908      	cbnz	r0, 800d3e8 <_realloc_r+0x44>
 800d3e4:	4645      	mov	r5, r8
 800d3e6:	e7ec      	b.n	800d3c2 <_realloc_r+0x1e>
 800d3e8:	42b4      	cmp	r4, r6
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	bf28      	it	cs
 800d3f0:	4632      	movcs	r2, r6
 800d3f2:	f7fe fac7 	bl	800b984 <memcpy>
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	4638      	mov	r0, r7
 800d3fa:	f000 f87b 	bl	800d4f4 <_free_r>
 800d3fe:	e7f1      	b.n	800d3e4 <_realloc_r+0x40>

0800d400 <memmove>:
 800d400:	4288      	cmp	r0, r1
 800d402:	b510      	push	{r4, lr}
 800d404:	eb01 0402 	add.w	r4, r1, r2
 800d408:	d902      	bls.n	800d410 <memmove+0x10>
 800d40a:	4284      	cmp	r4, r0
 800d40c:	4623      	mov	r3, r4
 800d40e:	d807      	bhi.n	800d420 <memmove+0x20>
 800d410:	1e43      	subs	r3, r0, #1
 800d412:	42a1      	cmp	r1, r4
 800d414:	d008      	beq.n	800d428 <memmove+0x28>
 800d416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d41a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d41e:	e7f8      	b.n	800d412 <memmove+0x12>
 800d420:	4402      	add	r2, r0
 800d422:	4601      	mov	r1, r0
 800d424:	428a      	cmp	r2, r1
 800d426:	d100      	bne.n	800d42a <memmove+0x2a>
 800d428:	bd10      	pop	{r4, pc}
 800d42a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d42e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d432:	e7f7      	b.n	800d424 <memmove+0x24>

0800d434 <_lseek_r>:
 800d434:	b538      	push	{r3, r4, r5, lr}
 800d436:	4d07      	ldr	r5, [pc, #28]	@ (800d454 <_lseek_r+0x20>)
 800d438:	4604      	mov	r4, r0
 800d43a:	4608      	mov	r0, r1
 800d43c:	4611      	mov	r1, r2
 800d43e:	2200      	movs	r2, #0
 800d440:	602a      	str	r2, [r5, #0]
 800d442:	461a      	mov	r2, r3
 800d444:	f7f4 fa1d 	bl	8001882 <_lseek>
 800d448:	1c43      	adds	r3, r0, #1
 800d44a:	d102      	bne.n	800d452 <_lseek_r+0x1e>
 800d44c:	682b      	ldr	r3, [r5, #0]
 800d44e:	b103      	cbz	r3, 800d452 <_lseek_r+0x1e>
 800d450:	6023      	str	r3, [r4, #0]
 800d452:	bd38      	pop	{r3, r4, r5, pc}
 800d454:	20017540 	.word	0x20017540

0800d458 <_read_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	4d07      	ldr	r5, [pc, #28]	@ (800d478 <_read_r+0x20>)
 800d45c:	4604      	mov	r4, r0
 800d45e:	4608      	mov	r0, r1
 800d460:	4611      	mov	r1, r2
 800d462:	2200      	movs	r2, #0
 800d464:	602a      	str	r2, [r5, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	f7f4 f9c7 	bl	80017fa <_read>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d102      	bne.n	800d476 <_read_r+0x1e>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	b103      	cbz	r3, 800d476 <_read_r+0x1e>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	20017540 	.word	0x20017540

0800d47c <_sbrk_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4d06      	ldr	r5, [pc, #24]	@ (800d498 <_sbrk_r+0x1c>)
 800d480:	2300      	movs	r3, #0
 800d482:	4604      	mov	r4, r0
 800d484:	4608      	mov	r0, r1
 800d486:	602b      	str	r3, [r5, #0]
 800d488:	f7f4 fa08 	bl	800189c <_sbrk>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d102      	bne.n	800d496 <_sbrk_r+0x1a>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	b103      	cbz	r3, 800d496 <_sbrk_r+0x1a>
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	20017540 	.word	0x20017540

0800d49c <_close_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	4d06      	ldr	r5, [pc, #24]	@ (800d4b8 <_close_r+0x1c>)
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	4608      	mov	r0, r1
 800d4a6:	602b      	str	r3, [r5, #0]
 800d4a8:	f7f4 f9c4 	bl	8001834 <_close>
 800d4ac:	1c43      	adds	r3, r0, #1
 800d4ae:	d102      	bne.n	800d4b6 <_close_r+0x1a>
 800d4b0:	682b      	ldr	r3, [r5, #0]
 800d4b2:	b103      	cbz	r3, 800d4b6 <_close_r+0x1a>
 800d4b4:	6023      	str	r3, [r4, #0]
 800d4b6:	bd38      	pop	{r3, r4, r5, pc}
 800d4b8:	20017540 	.word	0x20017540

0800d4bc <abort>:
 800d4bc:	b508      	push	{r3, lr}
 800d4be:	2006      	movs	r0, #6
 800d4c0:	f000 faea 	bl	800da98 <raise>
 800d4c4:	2001      	movs	r0, #1
 800d4c6:	f7f4 f98d 	bl	80017e4 <_exit>

0800d4ca <_calloc_r>:
 800d4ca:	b570      	push	{r4, r5, r6, lr}
 800d4cc:	fba1 5402 	umull	r5, r4, r1, r2
 800d4d0:	b934      	cbnz	r4, 800d4e0 <_calloc_r+0x16>
 800d4d2:	4629      	mov	r1, r5
 800d4d4:	f7ff fa5e 	bl	800c994 <_malloc_r>
 800d4d8:	4606      	mov	r6, r0
 800d4da:	b928      	cbnz	r0, 800d4e8 <_calloc_r+0x1e>
 800d4dc:	4630      	mov	r0, r6
 800d4de:	bd70      	pop	{r4, r5, r6, pc}
 800d4e0:	220c      	movs	r2, #12
 800d4e2:	6002      	str	r2, [r0, #0]
 800d4e4:	2600      	movs	r6, #0
 800d4e6:	e7f9      	b.n	800d4dc <_calloc_r+0x12>
 800d4e8:	462a      	mov	r2, r5
 800d4ea:	4621      	mov	r1, r4
 800d4ec:	f7fe fa10 	bl	800b910 <memset>
 800d4f0:	e7f4      	b.n	800d4dc <_calloc_r+0x12>
	...

0800d4f4 <_free_r>:
 800d4f4:	b538      	push	{r3, r4, r5, lr}
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	2900      	cmp	r1, #0
 800d4fa:	d041      	beq.n	800d580 <_free_r+0x8c>
 800d4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d500:	1f0c      	subs	r4, r1, #4
 800d502:	2b00      	cmp	r3, #0
 800d504:	bfb8      	it	lt
 800d506:	18e4      	addlt	r4, r4, r3
 800d508:	f7ff fb70 	bl	800cbec <__malloc_lock>
 800d50c:	4a1d      	ldr	r2, [pc, #116]	@ (800d584 <_free_r+0x90>)
 800d50e:	6813      	ldr	r3, [r2, #0]
 800d510:	b933      	cbnz	r3, 800d520 <_free_r+0x2c>
 800d512:	6063      	str	r3, [r4, #4]
 800d514:	6014      	str	r4, [r2, #0]
 800d516:	4628      	mov	r0, r5
 800d518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d51c:	f7ff bb6c 	b.w	800cbf8 <__malloc_unlock>
 800d520:	42a3      	cmp	r3, r4
 800d522:	d908      	bls.n	800d536 <_free_r+0x42>
 800d524:	6820      	ldr	r0, [r4, #0]
 800d526:	1821      	adds	r1, r4, r0
 800d528:	428b      	cmp	r3, r1
 800d52a:	bf01      	itttt	eq
 800d52c:	6819      	ldreq	r1, [r3, #0]
 800d52e:	685b      	ldreq	r3, [r3, #4]
 800d530:	1809      	addeq	r1, r1, r0
 800d532:	6021      	streq	r1, [r4, #0]
 800d534:	e7ed      	b.n	800d512 <_free_r+0x1e>
 800d536:	461a      	mov	r2, r3
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	b10b      	cbz	r3, 800d540 <_free_r+0x4c>
 800d53c:	42a3      	cmp	r3, r4
 800d53e:	d9fa      	bls.n	800d536 <_free_r+0x42>
 800d540:	6811      	ldr	r1, [r2, #0]
 800d542:	1850      	adds	r0, r2, r1
 800d544:	42a0      	cmp	r0, r4
 800d546:	d10b      	bne.n	800d560 <_free_r+0x6c>
 800d548:	6820      	ldr	r0, [r4, #0]
 800d54a:	4401      	add	r1, r0
 800d54c:	1850      	adds	r0, r2, r1
 800d54e:	4283      	cmp	r3, r0
 800d550:	6011      	str	r1, [r2, #0]
 800d552:	d1e0      	bne.n	800d516 <_free_r+0x22>
 800d554:	6818      	ldr	r0, [r3, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	6053      	str	r3, [r2, #4]
 800d55a:	4408      	add	r0, r1
 800d55c:	6010      	str	r0, [r2, #0]
 800d55e:	e7da      	b.n	800d516 <_free_r+0x22>
 800d560:	d902      	bls.n	800d568 <_free_r+0x74>
 800d562:	230c      	movs	r3, #12
 800d564:	602b      	str	r3, [r5, #0]
 800d566:	e7d6      	b.n	800d516 <_free_r+0x22>
 800d568:	6820      	ldr	r0, [r4, #0]
 800d56a:	1821      	adds	r1, r4, r0
 800d56c:	428b      	cmp	r3, r1
 800d56e:	bf04      	itt	eq
 800d570:	6819      	ldreq	r1, [r3, #0]
 800d572:	685b      	ldreq	r3, [r3, #4]
 800d574:	6063      	str	r3, [r4, #4]
 800d576:	bf04      	itt	eq
 800d578:	1809      	addeq	r1, r1, r0
 800d57a:	6021      	streq	r1, [r4, #0]
 800d57c:	6054      	str	r4, [r2, #4]
 800d57e:	e7ca      	b.n	800d516 <_free_r+0x22>
 800d580:	bd38      	pop	{r3, r4, r5, pc}
 800d582:	bf00      	nop
 800d584:	2001753c 	.word	0x2001753c

0800d588 <__sfputc_r>:
 800d588:	6893      	ldr	r3, [r2, #8]
 800d58a:	3b01      	subs	r3, #1
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	b410      	push	{r4}
 800d590:	6093      	str	r3, [r2, #8]
 800d592:	da08      	bge.n	800d5a6 <__sfputc_r+0x1e>
 800d594:	6994      	ldr	r4, [r2, #24]
 800d596:	42a3      	cmp	r3, r4
 800d598:	db01      	blt.n	800d59e <__sfputc_r+0x16>
 800d59a:	290a      	cmp	r1, #10
 800d59c:	d103      	bne.n	800d5a6 <__sfputc_r+0x1e>
 800d59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5a2:	f000 b94d 	b.w	800d840 <__swbuf_r>
 800d5a6:	6813      	ldr	r3, [r2, #0]
 800d5a8:	1c58      	adds	r0, r3, #1
 800d5aa:	6010      	str	r0, [r2, #0]
 800d5ac:	7019      	strb	r1, [r3, #0]
 800d5ae:	4608      	mov	r0, r1
 800d5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5b4:	4770      	bx	lr

0800d5b6 <__sfputs_r>:
 800d5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b8:	4606      	mov	r6, r0
 800d5ba:	460f      	mov	r7, r1
 800d5bc:	4614      	mov	r4, r2
 800d5be:	18d5      	adds	r5, r2, r3
 800d5c0:	42ac      	cmp	r4, r5
 800d5c2:	d101      	bne.n	800d5c8 <__sfputs_r+0x12>
 800d5c4:	2000      	movs	r0, #0
 800d5c6:	e007      	b.n	800d5d8 <__sfputs_r+0x22>
 800d5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5cc:	463a      	mov	r2, r7
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f7ff ffda 	bl	800d588 <__sfputc_r>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d1f3      	bne.n	800d5c0 <__sfputs_r+0xa>
 800d5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d5dc <_vfiprintf_r>:
 800d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e0:	460d      	mov	r5, r1
 800d5e2:	b09d      	sub	sp, #116	@ 0x74
 800d5e4:	4614      	mov	r4, r2
 800d5e6:	4698      	mov	r8, r3
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	b118      	cbz	r0, 800d5f4 <_vfiprintf_r+0x18>
 800d5ec:	6a03      	ldr	r3, [r0, #32]
 800d5ee:	b90b      	cbnz	r3, 800d5f4 <_vfiprintf_r+0x18>
 800d5f0:	f7fe f928 	bl	800b844 <__sinit>
 800d5f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5f6:	07d9      	lsls	r1, r3, #31
 800d5f8:	d405      	bmi.n	800d606 <_vfiprintf_r+0x2a>
 800d5fa:	89ab      	ldrh	r3, [r5, #12]
 800d5fc:	059a      	lsls	r2, r3, #22
 800d5fe:	d402      	bmi.n	800d606 <_vfiprintf_r+0x2a>
 800d600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d602:	f7fe f9b8 	bl	800b976 <__retarget_lock_acquire_recursive>
 800d606:	89ab      	ldrh	r3, [r5, #12]
 800d608:	071b      	lsls	r3, r3, #28
 800d60a:	d501      	bpl.n	800d610 <_vfiprintf_r+0x34>
 800d60c:	692b      	ldr	r3, [r5, #16]
 800d60e:	b99b      	cbnz	r3, 800d638 <_vfiprintf_r+0x5c>
 800d610:	4629      	mov	r1, r5
 800d612:	4630      	mov	r0, r6
 800d614:	f000 f952 	bl	800d8bc <__swsetup_r>
 800d618:	b170      	cbz	r0, 800d638 <_vfiprintf_r+0x5c>
 800d61a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d61c:	07dc      	lsls	r4, r3, #31
 800d61e:	d504      	bpl.n	800d62a <_vfiprintf_r+0x4e>
 800d620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d624:	b01d      	add	sp, #116	@ 0x74
 800d626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62a:	89ab      	ldrh	r3, [r5, #12]
 800d62c:	0598      	lsls	r0, r3, #22
 800d62e:	d4f7      	bmi.n	800d620 <_vfiprintf_r+0x44>
 800d630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d632:	f7fe f9a1 	bl	800b978 <__retarget_lock_release_recursive>
 800d636:	e7f3      	b.n	800d620 <_vfiprintf_r+0x44>
 800d638:	2300      	movs	r3, #0
 800d63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d63c:	2320      	movs	r3, #32
 800d63e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d642:	f8cd 800c 	str.w	r8, [sp, #12]
 800d646:	2330      	movs	r3, #48	@ 0x30
 800d648:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d7f8 <_vfiprintf_r+0x21c>
 800d64c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d650:	f04f 0901 	mov.w	r9, #1
 800d654:	4623      	mov	r3, r4
 800d656:	469a      	mov	sl, r3
 800d658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d65c:	b10a      	cbz	r2, 800d662 <_vfiprintf_r+0x86>
 800d65e:	2a25      	cmp	r2, #37	@ 0x25
 800d660:	d1f9      	bne.n	800d656 <_vfiprintf_r+0x7a>
 800d662:	ebba 0b04 	subs.w	fp, sl, r4
 800d666:	d00b      	beq.n	800d680 <_vfiprintf_r+0xa4>
 800d668:	465b      	mov	r3, fp
 800d66a:	4622      	mov	r2, r4
 800d66c:	4629      	mov	r1, r5
 800d66e:	4630      	mov	r0, r6
 800d670:	f7ff ffa1 	bl	800d5b6 <__sfputs_r>
 800d674:	3001      	adds	r0, #1
 800d676:	f000 80a7 	beq.w	800d7c8 <_vfiprintf_r+0x1ec>
 800d67a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d67c:	445a      	add	r2, fp
 800d67e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d680:	f89a 3000 	ldrb.w	r3, [sl]
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 809f 	beq.w	800d7c8 <_vfiprintf_r+0x1ec>
 800d68a:	2300      	movs	r3, #0
 800d68c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d694:	f10a 0a01 	add.w	sl, sl, #1
 800d698:	9304      	str	r3, [sp, #16]
 800d69a:	9307      	str	r3, [sp, #28]
 800d69c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6a2:	4654      	mov	r4, sl
 800d6a4:	2205      	movs	r2, #5
 800d6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6aa:	4853      	ldr	r0, [pc, #332]	@ (800d7f8 <_vfiprintf_r+0x21c>)
 800d6ac:	f7f2 fde0 	bl	8000270 <memchr>
 800d6b0:	9a04      	ldr	r2, [sp, #16]
 800d6b2:	b9d8      	cbnz	r0, 800d6ec <_vfiprintf_r+0x110>
 800d6b4:	06d1      	lsls	r1, r2, #27
 800d6b6:	bf44      	itt	mi
 800d6b8:	2320      	movmi	r3, #32
 800d6ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6be:	0713      	lsls	r3, r2, #28
 800d6c0:	bf44      	itt	mi
 800d6c2:	232b      	movmi	r3, #43	@ 0x2b
 800d6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d6cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6ce:	d015      	beq.n	800d6fc <_vfiprintf_r+0x120>
 800d6d0:	9a07      	ldr	r2, [sp, #28]
 800d6d2:	4654      	mov	r4, sl
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	f04f 0c0a 	mov.w	ip, #10
 800d6da:	4621      	mov	r1, r4
 800d6dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6e0:	3b30      	subs	r3, #48	@ 0x30
 800d6e2:	2b09      	cmp	r3, #9
 800d6e4:	d94b      	bls.n	800d77e <_vfiprintf_r+0x1a2>
 800d6e6:	b1b0      	cbz	r0, 800d716 <_vfiprintf_r+0x13a>
 800d6e8:	9207      	str	r2, [sp, #28]
 800d6ea:	e014      	b.n	800d716 <_vfiprintf_r+0x13a>
 800d6ec:	eba0 0308 	sub.w	r3, r0, r8
 800d6f0:	fa09 f303 	lsl.w	r3, r9, r3
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	9304      	str	r3, [sp, #16]
 800d6f8:	46a2      	mov	sl, r4
 800d6fa:	e7d2      	b.n	800d6a2 <_vfiprintf_r+0xc6>
 800d6fc:	9b03      	ldr	r3, [sp, #12]
 800d6fe:	1d19      	adds	r1, r3, #4
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	9103      	str	r1, [sp, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	bfbb      	ittet	lt
 800d708:	425b      	neglt	r3, r3
 800d70a:	f042 0202 	orrlt.w	r2, r2, #2
 800d70e:	9307      	strge	r3, [sp, #28]
 800d710:	9307      	strlt	r3, [sp, #28]
 800d712:	bfb8      	it	lt
 800d714:	9204      	strlt	r2, [sp, #16]
 800d716:	7823      	ldrb	r3, [r4, #0]
 800d718:	2b2e      	cmp	r3, #46	@ 0x2e
 800d71a:	d10a      	bne.n	800d732 <_vfiprintf_r+0x156>
 800d71c:	7863      	ldrb	r3, [r4, #1]
 800d71e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d720:	d132      	bne.n	800d788 <_vfiprintf_r+0x1ac>
 800d722:	9b03      	ldr	r3, [sp, #12]
 800d724:	1d1a      	adds	r2, r3, #4
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	9203      	str	r2, [sp, #12]
 800d72a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d72e:	3402      	adds	r4, #2
 800d730:	9305      	str	r3, [sp, #20]
 800d732:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d808 <_vfiprintf_r+0x22c>
 800d736:	7821      	ldrb	r1, [r4, #0]
 800d738:	2203      	movs	r2, #3
 800d73a:	4650      	mov	r0, sl
 800d73c:	f7f2 fd98 	bl	8000270 <memchr>
 800d740:	b138      	cbz	r0, 800d752 <_vfiprintf_r+0x176>
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	eba0 000a 	sub.w	r0, r0, sl
 800d748:	2240      	movs	r2, #64	@ 0x40
 800d74a:	4082      	lsls	r2, r0
 800d74c:	4313      	orrs	r3, r2
 800d74e:	3401      	adds	r4, #1
 800d750:	9304      	str	r3, [sp, #16]
 800d752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d756:	4829      	ldr	r0, [pc, #164]	@ (800d7fc <_vfiprintf_r+0x220>)
 800d758:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d75c:	2206      	movs	r2, #6
 800d75e:	f7f2 fd87 	bl	8000270 <memchr>
 800d762:	2800      	cmp	r0, #0
 800d764:	d03f      	beq.n	800d7e6 <_vfiprintf_r+0x20a>
 800d766:	4b26      	ldr	r3, [pc, #152]	@ (800d800 <_vfiprintf_r+0x224>)
 800d768:	bb1b      	cbnz	r3, 800d7b2 <_vfiprintf_r+0x1d6>
 800d76a:	9b03      	ldr	r3, [sp, #12]
 800d76c:	3307      	adds	r3, #7
 800d76e:	f023 0307 	bic.w	r3, r3, #7
 800d772:	3308      	adds	r3, #8
 800d774:	9303      	str	r3, [sp, #12]
 800d776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d778:	443b      	add	r3, r7
 800d77a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d77c:	e76a      	b.n	800d654 <_vfiprintf_r+0x78>
 800d77e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d782:	460c      	mov	r4, r1
 800d784:	2001      	movs	r0, #1
 800d786:	e7a8      	b.n	800d6da <_vfiprintf_r+0xfe>
 800d788:	2300      	movs	r3, #0
 800d78a:	3401      	adds	r4, #1
 800d78c:	9305      	str	r3, [sp, #20]
 800d78e:	4619      	mov	r1, r3
 800d790:	f04f 0c0a 	mov.w	ip, #10
 800d794:	4620      	mov	r0, r4
 800d796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d79a:	3a30      	subs	r2, #48	@ 0x30
 800d79c:	2a09      	cmp	r2, #9
 800d79e:	d903      	bls.n	800d7a8 <_vfiprintf_r+0x1cc>
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d0c6      	beq.n	800d732 <_vfiprintf_r+0x156>
 800d7a4:	9105      	str	r1, [sp, #20]
 800d7a6:	e7c4      	b.n	800d732 <_vfiprintf_r+0x156>
 800d7a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	e7f0      	b.n	800d794 <_vfiprintf_r+0x1b8>
 800d7b2:	ab03      	add	r3, sp, #12
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	462a      	mov	r2, r5
 800d7b8:	4b12      	ldr	r3, [pc, #72]	@ (800d804 <_vfiprintf_r+0x228>)
 800d7ba:	a904      	add	r1, sp, #16
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f7fd fbc1 	bl	800af44 <_printf_float>
 800d7c2:	4607      	mov	r7, r0
 800d7c4:	1c78      	adds	r0, r7, #1
 800d7c6:	d1d6      	bne.n	800d776 <_vfiprintf_r+0x19a>
 800d7c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7ca:	07d9      	lsls	r1, r3, #31
 800d7cc:	d405      	bmi.n	800d7da <_vfiprintf_r+0x1fe>
 800d7ce:	89ab      	ldrh	r3, [r5, #12]
 800d7d0:	059a      	lsls	r2, r3, #22
 800d7d2:	d402      	bmi.n	800d7da <_vfiprintf_r+0x1fe>
 800d7d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7d6:	f7fe f8cf 	bl	800b978 <__retarget_lock_release_recursive>
 800d7da:	89ab      	ldrh	r3, [r5, #12]
 800d7dc:	065b      	lsls	r3, r3, #25
 800d7de:	f53f af1f 	bmi.w	800d620 <_vfiprintf_r+0x44>
 800d7e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7e4:	e71e      	b.n	800d624 <_vfiprintf_r+0x48>
 800d7e6:	ab03      	add	r3, sp, #12
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	462a      	mov	r2, r5
 800d7ec:	4b05      	ldr	r3, [pc, #20]	@ (800d804 <_vfiprintf_r+0x228>)
 800d7ee:	a904      	add	r1, sp, #16
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f7fd fe3f 	bl	800b474 <_printf_i>
 800d7f6:	e7e4      	b.n	800d7c2 <_vfiprintf_r+0x1e6>
 800d7f8:	0800e185 	.word	0x0800e185
 800d7fc:	0800e18f 	.word	0x0800e18f
 800d800:	0800af45 	.word	0x0800af45
 800d804:	0800d5b7 	.word	0x0800d5b7
 800d808:	0800e18b 	.word	0x0800e18b

0800d80c <__ascii_mbtowc>:
 800d80c:	b082      	sub	sp, #8
 800d80e:	b901      	cbnz	r1, 800d812 <__ascii_mbtowc+0x6>
 800d810:	a901      	add	r1, sp, #4
 800d812:	b142      	cbz	r2, 800d826 <__ascii_mbtowc+0x1a>
 800d814:	b14b      	cbz	r3, 800d82a <__ascii_mbtowc+0x1e>
 800d816:	7813      	ldrb	r3, [r2, #0]
 800d818:	600b      	str	r3, [r1, #0]
 800d81a:	7812      	ldrb	r2, [r2, #0]
 800d81c:	1e10      	subs	r0, r2, #0
 800d81e:	bf18      	it	ne
 800d820:	2001      	movne	r0, #1
 800d822:	b002      	add	sp, #8
 800d824:	4770      	bx	lr
 800d826:	4610      	mov	r0, r2
 800d828:	e7fb      	b.n	800d822 <__ascii_mbtowc+0x16>
 800d82a:	f06f 0001 	mvn.w	r0, #1
 800d82e:	e7f8      	b.n	800d822 <__ascii_mbtowc+0x16>

0800d830 <_malloc_usable_size_r>:
 800d830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d834:	1f18      	subs	r0, r3, #4
 800d836:	2b00      	cmp	r3, #0
 800d838:	bfbc      	itt	lt
 800d83a:	580b      	ldrlt	r3, [r1, r0]
 800d83c:	18c0      	addlt	r0, r0, r3
 800d83e:	4770      	bx	lr

0800d840 <__swbuf_r>:
 800d840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d842:	460e      	mov	r6, r1
 800d844:	4614      	mov	r4, r2
 800d846:	4605      	mov	r5, r0
 800d848:	b118      	cbz	r0, 800d852 <__swbuf_r+0x12>
 800d84a:	6a03      	ldr	r3, [r0, #32]
 800d84c:	b90b      	cbnz	r3, 800d852 <__swbuf_r+0x12>
 800d84e:	f7fd fff9 	bl	800b844 <__sinit>
 800d852:	69a3      	ldr	r3, [r4, #24]
 800d854:	60a3      	str	r3, [r4, #8]
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	071a      	lsls	r2, r3, #28
 800d85a:	d501      	bpl.n	800d860 <__swbuf_r+0x20>
 800d85c:	6923      	ldr	r3, [r4, #16]
 800d85e:	b943      	cbnz	r3, 800d872 <__swbuf_r+0x32>
 800d860:	4621      	mov	r1, r4
 800d862:	4628      	mov	r0, r5
 800d864:	f000 f82a 	bl	800d8bc <__swsetup_r>
 800d868:	b118      	cbz	r0, 800d872 <__swbuf_r+0x32>
 800d86a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d86e:	4638      	mov	r0, r7
 800d870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	6922      	ldr	r2, [r4, #16]
 800d876:	1a98      	subs	r0, r3, r2
 800d878:	6963      	ldr	r3, [r4, #20]
 800d87a:	b2f6      	uxtb	r6, r6
 800d87c:	4283      	cmp	r3, r0
 800d87e:	4637      	mov	r7, r6
 800d880:	dc05      	bgt.n	800d88e <__swbuf_r+0x4e>
 800d882:	4621      	mov	r1, r4
 800d884:	4628      	mov	r0, r5
 800d886:	f7ff f989 	bl	800cb9c <_fflush_r>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d1ed      	bne.n	800d86a <__swbuf_r+0x2a>
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	3b01      	subs	r3, #1
 800d892:	60a3      	str	r3, [r4, #8]
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	1c5a      	adds	r2, r3, #1
 800d898:	6022      	str	r2, [r4, #0]
 800d89a:	701e      	strb	r6, [r3, #0]
 800d89c:	6962      	ldr	r2, [r4, #20]
 800d89e:	1c43      	adds	r3, r0, #1
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d004      	beq.n	800d8ae <__swbuf_r+0x6e>
 800d8a4:	89a3      	ldrh	r3, [r4, #12]
 800d8a6:	07db      	lsls	r3, r3, #31
 800d8a8:	d5e1      	bpl.n	800d86e <__swbuf_r+0x2e>
 800d8aa:	2e0a      	cmp	r6, #10
 800d8ac:	d1df      	bne.n	800d86e <__swbuf_r+0x2e>
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	f7ff f973 	bl	800cb9c <_fflush_r>
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d0d9      	beq.n	800d86e <__swbuf_r+0x2e>
 800d8ba:	e7d6      	b.n	800d86a <__swbuf_r+0x2a>

0800d8bc <__swsetup_r>:
 800d8bc:	b538      	push	{r3, r4, r5, lr}
 800d8be:	4b29      	ldr	r3, [pc, #164]	@ (800d964 <__swsetup_r+0xa8>)
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	6818      	ldr	r0, [r3, #0]
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	b118      	cbz	r0, 800d8d0 <__swsetup_r+0x14>
 800d8c8:	6a03      	ldr	r3, [r0, #32]
 800d8ca:	b90b      	cbnz	r3, 800d8d0 <__swsetup_r+0x14>
 800d8cc:	f7fd ffba 	bl	800b844 <__sinit>
 800d8d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d4:	0719      	lsls	r1, r3, #28
 800d8d6:	d422      	bmi.n	800d91e <__swsetup_r+0x62>
 800d8d8:	06da      	lsls	r2, r3, #27
 800d8da:	d407      	bmi.n	800d8ec <__swsetup_r+0x30>
 800d8dc:	2209      	movs	r2, #9
 800d8de:	602a      	str	r2, [r5, #0]
 800d8e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8e4:	81a3      	strh	r3, [r4, #12]
 800d8e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8ea:	e033      	b.n	800d954 <__swsetup_r+0x98>
 800d8ec:	0758      	lsls	r0, r3, #29
 800d8ee:	d512      	bpl.n	800d916 <__swsetup_r+0x5a>
 800d8f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8f2:	b141      	cbz	r1, 800d906 <__swsetup_r+0x4a>
 800d8f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8f8:	4299      	cmp	r1, r3
 800d8fa:	d002      	beq.n	800d902 <__swsetup_r+0x46>
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	f7ff fdf9 	bl	800d4f4 <_free_r>
 800d902:	2300      	movs	r3, #0
 800d904:	6363      	str	r3, [r4, #52]	@ 0x34
 800d906:	89a3      	ldrh	r3, [r4, #12]
 800d908:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d90c:	81a3      	strh	r3, [r4, #12]
 800d90e:	2300      	movs	r3, #0
 800d910:	6063      	str	r3, [r4, #4]
 800d912:	6923      	ldr	r3, [r4, #16]
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	89a3      	ldrh	r3, [r4, #12]
 800d918:	f043 0308 	orr.w	r3, r3, #8
 800d91c:	81a3      	strh	r3, [r4, #12]
 800d91e:	6923      	ldr	r3, [r4, #16]
 800d920:	b94b      	cbnz	r3, 800d936 <__swsetup_r+0x7a>
 800d922:	89a3      	ldrh	r3, [r4, #12]
 800d924:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d92c:	d003      	beq.n	800d936 <__swsetup_r+0x7a>
 800d92e:	4621      	mov	r1, r4
 800d930:	4628      	mov	r0, r5
 800d932:	f000 f84c 	bl	800d9ce <__smakebuf_r>
 800d936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d93a:	f013 0201 	ands.w	r2, r3, #1
 800d93e:	d00a      	beq.n	800d956 <__swsetup_r+0x9a>
 800d940:	2200      	movs	r2, #0
 800d942:	60a2      	str	r2, [r4, #8]
 800d944:	6962      	ldr	r2, [r4, #20]
 800d946:	4252      	negs	r2, r2
 800d948:	61a2      	str	r2, [r4, #24]
 800d94a:	6922      	ldr	r2, [r4, #16]
 800d94c:	b942      	cbnz	r2, 800d960 <__swsetup_r+0xa4>
 800d94e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d952:	d1c5      	bne.n	800d8e0 <__swsetup_r+0x24>
 800d954:	bd38      	pop	{r3, r4, r5, pc}
 800d956:	0799      	lsls	r1, r3, #30
 800d958:	bf58      	it	pl
 800d95a:	6962      	ldrpl	r2, [r4, #20]
 800d95c:	60a2      	str	r2, [r4, #8]
 800d95e:	e7f4      	b.n	800d94a <__swsetup_r+0x8e>
 800d960:	2000      	movs	r0, #0
 800d962:	e7f7      	b.n	800d954 <__swsetup_r+0x98>
 800d964:	20000024 	.word	0x20000024

0800d968 <__ascii_wctomb>:
 800d968:	4603      	mov	r3, r0
 800d96a:	4608      	mov	r0, r1
 800d96c:	b141      	cbz	r1, 800d980 <__ascii_wctomb+0x18>
 800d96e:	2aff      	cmp	r2, #255	@ 0xff
 800d970:	d904      	bls.n	800d97c <__ascii_wctomb+0x14>
 800d972:	228a      	movs	r2, #138	@ 0x8a
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d97a:	4770      	bx	lr
 800d97c:	700a      	strb	r2, [r1, #0]
 800d97e:	2001      	movs	r0, #1
 800d980:	4770      	bx	lr

0800d982 <__swhatbuf_r>:
 800d982:	b570      	push	{r4, r5, r6, lr}
 800d984:	460c      	mov	r4, r1
 800d986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d98a:	2900      	cmp	r1, #0
 800d98c:	b096      	sub	sp, #88	@ 0x58
 800d98e:	4615      	mov	r5, r2
 800d990:	461e      	mov	r6, r3
 800d992:	da0d      	bge.n	800d9b0 <__swhatbuf_r+0x2e>
 800d994:	89a3      	ldrh	r3, [r4, #12]
 800d996:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d99a:	f04f 0100 	mov.w	r1, #0
 800d99e:	bf14      	ite	ne
 800d9a0:	2340      	movne	r3, #64	@ 0x40
 800d9a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	6031      	str	r1, [r6, #0]
 800d9aa:	602b      	str	r3, [r5, #0]
 800d9ac:	b016      	add	sp, #88	@ 0x58
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}
 800d9b0:	466a      	mov	r2, sp
 800d9b2:	f000 f89d 	bl	800daf0 <_fstat_r>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	dbec      	blt.n	800d994 <__swhatbuf_r+0x12>
 800d9ba:	9901      	ldr	r1, [sp, #4]
 800d9bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d9c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d9c4:	4259      	negs	r1, r3
 800d9c6:	4159      	adcs	r1, r3
 800d9c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9cc:	e7eb      	b.n	800d9a6 <__swhatbuf_r+0x24>

0800d9ce <__smakebuf_r>:
 800d9ce:	898b      	ldrh	r3, [r1, #12]
 800d9d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9d2:	079d      	lsls	r5, r3, #30
 800d9d4:	4606      	mov	r6, r0
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	d507      	bpl.n	800d9ea <__smakebuf_r+0x1c>
 800d9da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d9de:	6023      	str	r3, [r4, #0]
 800d9e0:	6123      	str	r3, [r4, #16]
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	6163      	str	r3, [r4, #20]
 800d9e6:	b003      	add	sp, #12
 800d9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ea:	ab01      	add	r3, sp, #4
 800d9ec:	466a      	mov	r2, sp
 800d9ee:	f7ff ffc8 	bl	800d982 <__swhatbuf_r>
 800d9f2:	9f00      	ldr	r7, [sp, #0]
 800d9f4:	4605      	mov	r5, r0
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f7fe ffcb 	bl	800c994 <_malloc_r>
 800d9fe:	b948      	cbnz	r0, 800da14 <__smakebuf_r+0x46>
 800da00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da04:	059a      	lsls	r2, r3, #22
 800da06:	d4ee      	bmi.n	800d9e6 <__smakebuf_r+0x18>
 800da08:	f023 0303 	bic.w	r3, r3, #3
 800da0c:	f043 0302 	orr.w	r3, r3, #2
 800da10:	81a3      	strh	r3, [r4, #12]
 800da12:	e7e2      	b.n	800d9da <__smakebuf_r+0xc>
 800da14:	89a3      	ldrh	r3, [r4, #12]
 800da16:	6020      	str	r0, [r4, #0]
 800da18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da1c:	81a3      	strh	r3, [r4, #12]
 800da1e:	9b01      	ldr	r3, [sp, #4]
 800da20:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da24:	b15b      	cbz	r3, 800da3e <__smakebuf_r+0x70>
 800da26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da2a:	4630      	mov	r0, r6
 800da2c:	f000 f83c 	bl	800daa8 <_isatty_r>
 800da30:	b128      	cbz	r0, 800da3e <__smakebuf_r+0x70>
 800da32:	89a3      	ldrh	r3, [r4, #12]
 800da34:	f023 0303 	bic.w	r3, r3, #3
 800da38:	f043 0301 	orr.w	r3, r3, #1
 800da3c:	81a3      	strh	r3, [r4, #12]
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	431d      	orrs	r5, r3
 800da42:	81a5      	strh	r5, [r4, #12]
 800da44:	e7cf      	b.n	800d9e6 <__smakebuf_r+0x18>

0800da46 <_raise_r>:
 800da46:	291f      	cmp	r1, #31
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	4605      	mov	r5, r0
 800da4c:	460c      	mov	r4, r1
 800da4e:	d904      	bls.n	800da5a <_raise_r+0x14>
 800da50:	2316      	movs	r3, #22
 800da52:	6003      	str	r3, [r0, #0]
 800da54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da58:	bd38      	pop	{r3, r4, r5, pc}
 800da5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da5c:	b112      	cbz	r2, 800da64 <_raise_r+0x1e>
 800da5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da62:	b94b      	cbnz	r3, 800da78 <_raise_r+0x32>
 800da64:	4628      	mov	r0, r5
 800da66:	f000 f841 	bl	800daec <_getpid_r>
 800da6a:	4622      	mov	r2, r4
 800da6c:	4601      	mov	r1, r0
 800da6e:	4628      	mov	r0, r5
 800da70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da74:	f000 b828 	b.w	800dac8 <_kill_r>
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d00a      	beq.n	800da92 <_raise_r+0x4c>
 800da7c:	1c59      	adds	r1, r3, #1
 800da7e:	d103      	bne.n	800da88 <_raise_r+0x42>
 800da80:	2316      	movs	r3, #22
 800da82:	6003      	str	r3, [r0, #0]
 800da84:	2001      	movs	r0, #1
 800da86:	e7e7      	b.n	800da58 <_raise_r+0x12>
 800da88:	2100      	movs	r1, #0
 800da8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da8e:	4620      	mov	r0, r4
 800da90:	4798      	blx	r3
 800da92:	2000      	movs	r0, #0
 800da94:	e7e0      	b.n	800da58 <_raise_r+0x12>
	...

0800da98 <raise>:
 800da98:	4b02      	ldr	r3, [pc, #8]	@ (800daa4 <raise+0xc>)
 800da9a:	4601      	mov	r1, r0
 800da9c:	6818      	ldr	r0, [r3, #0]
 800da9e:	f7ff bfd2 	b.w	800da46 <_raise_r>
 800daa2:	bf00      	nop
 800daa4:	20000024 	.word	0x20000024

0800daa8 <_isatty_r>:
 800daa8:	b538      	push	{r3, r4, r5, lr}
 800daaa:	4d06      	ldr	r5, [pc, #24]	@ (800dac4 <_isatty_r+0x1c>)
 800daac:	2300      	movs	r3, #0
 800daae:	4604      	mov	r4, r0
 800dab0:	4608      	mov	r0, r1
 800dab2:	602b      	str	r3, [r5, #0]
 800dab4:	f7f3 feda 	bl	800186c <_isatty>
 800dab8:	1c43      	adds	r3, r0, #1
 800daba:	d102      	bne.n	800dac2 <_isatty_r+0x1a>
 800dabc:	682b      	ldr	r3, [r5, #0]
 800dabe:	b103      	cbz	r3, 800dac2 <_isatty_r+0x1a>
 800dac0:	6023      	str	r3, [r4, #0]
 800dac2:	bd38      	pop	{r3, r4, r5, pc}
 800dac4:	20017540 	.word	0x20017540

0800dac8 <_kill_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d07      	ldr	r5, [pc, #28]	@ (800dae8 <_kill_r+0x20>)
 800dacc:	2300      	movs	r3, #0
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	602b      	str	r3, [r5, #0]
 800dad6:	f7f3 fe75 	bl	80017c4 <_kill>
 800dada:	1c43      	adds	r3, r0, #1
 800dadc:	d102      	bne.n	800dae4 <_kill_r+0x1c>
 800dade:	682b      	ldr	r3, [r5, #0]
 800dae0:	b103      	cbz	r3, 800dae4 <_kill_r+0x1c>
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	bd38      	pop	{r3, r4, r5, pc}
 800dae6:	bf00      	nop
 800dae8:	20017540 	.word	0x20017540

0800daec <_getpid_r>:
 800daec:	f7f3 be62 	b.w	80017b4 <_getpid>

0800daf0 <_fstat_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	4d07      	ldr	r5, [pc, #28]	@ (800db10 <_fstat_r+0x20>)
 800daf4:	2300      	movs	r3, #0
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	4611      	mov	r1, r2
 800dafc:	602b      	str	r3, [r5, #0]
 800dafe:	f7f3 fea5 	bl	800184c <_fstat>
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	d102      	bne.n	800db0c <_fstat_r+0x1c>
 800db06:	682b      	ldr	r3, [r5, #0]
 800db08:	b103      	cbz	r3, 800db0c <_fstat_r+0x1c>
 800db0a:	6023      	str	r3, [r4, #0]
 800db0c:	bd38      	pop	{r3, r4, r5, pc}
 800db0e:	bf00      	nop
 800db10:	20017540 	.word	0x20017540

0800db14 <_init>:
 800db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db16:	bf00      	nop
 800db18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1a:	bc08      	pop	{r3}
 800db1c:	469e      	mov	lr, r3
 800db1e:	4770      	bx	lr

0800db20 <_fini>:
 800db20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db22:	bf00      	nop
 800db24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db26:	bc08      	pop	{r3}
 800db28:	469e      	mov	lr, r3
 800db2a:	4770      	bx	lr
